diff --git a/.classpath b/.classpath
new file mode 100644
index 0000000..7a68efe
--- /dev/null
+++ b/.classpath
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="audioEngine"/>
+	<classpathentry kind="src" path="utils"/>
+	<classpathentry kind="src" path="resources"/>
+	<classpathentry kind="src" path="renderEngine"/>
+	<classpathentry kind="src" path="updater"/>
+	<classpathentry excluding="src/" kind="src" path="gameEngine"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER">
+		<attributes>
+			<attribute name="org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY" value="NatureSimulator/lib/native"/>
+			<attribute name="module" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="lib" path="lib/jar/lwjgl_util.jar" sourcepath="/sysroot/home/dinu/Downloads/lwjgl-source-2.9.3.zip">
+		<attributes>
+			<attribute name="module" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="lib" path="lib/jar/lwjgl.jar" sourcepath="/sysroot/home/dinu/Downloads/lwjgl-source-2.9.3.zip">
+		<attributes>
+			<attribute name="module" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..05081f1
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+/target/
+/.gradle/
diff --git a/.project b/.project
new file mode 100644
index 0000000..b196234
--- /dev/null
+++ b/.project
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>NatureSimulator</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+</projectDescription>
diff --git a/.settings/org.eclipse.buildship.core.prefs b/.settings/org.eclipse.buildship.core.prefs
new file mode 100644
index 0000000..e889521
--- /dev/null
+++ b/.settings/org.eclipse.buildship.core.prefs
@@ -0,0 +1,2 @@
+connection.project.dir=
+eclipse.preferences.version=1
diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 0000000..99f26c0
--- /dev/null
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..d724478
--- /dev/null
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,112 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnull.secondary=
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault.secondary=
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullable.secondary=
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=10
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=10
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.APILeak=ignore
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=ignore
+org.eclipse.jdt.core.compiler.problem.emptyStatement=ignore
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=ignore
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=ignore
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignore
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nonnullTypeVariableFromLegacyInvocation=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.pessimisticNullAnalysisForFreeTypeVariables=warning
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=ignore
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=ignore
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=ignore
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.terminalDeprecation=warning
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unlikelyCollectionMethodArgumentType=warning
+org.eclipse.jdt.core.compiler.problem.unlikelyCollectionMethodArgumentTypeStrict=disabled
+org.eclipse.jdt.core.compiler.problem.unlikelyEqualsArgumentType=info
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=ignore
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.release=disabled
+org.eclipse.jdt.core.compiler.source=10
diff --git a/.settings/org.eclipse.m2e.core.prefs b/.settings/org.eclipse.m2e.core.prefs
new file mode 100644
index 0000000..f897a7f
--- /dev/null
+++ b/.settings/org.eclipse.m2e.core.prefs
@@ -0,0 +1,4 @@
+activeProfiles=
+eclipse.preferences.version=1
+resolveWorkspaceProjects=true
+version=1
diff --git a/audioEngine/ns/openALObjects/Buffer.java b/audioEngine/ns/openALObjects/Buffer.java
new file mode 100644
index 0000000..4f00291
--- /dev/null
+++ b/audioEngine/ns/openALObjects/Buffer.java
@@ -0,0 +1,13 @@
+package ns.openALObjects;
+
+public class Buffer {
+	private int id;
+	
+	public Buffer(int id) {
+		this.id = id;
+	}
+	
+	public int getId() {
+		return id;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/camera/Camera.java b/gameEngine/ns/camera/Camera.java
new file mode 100644
index 0000000..3dd6f2e
--- /dev/null
+++ b/gameEngine/ns/camera/Camera.java
@@ -0,0 +1,129 @@
+package ns.camera;
+
+import org.lwjgl.input.Mouse;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import ns.display.DisplayManager;
+import ns.utils.Maths;
+import ns.world.World;
+
+public class Camera extends ICamera {
+	private static final float DIST_AB_TER = 10f;
+	private static final float SENSITIVITY = 0.1f;
+
+	private Matrix4f toWorldRotation;
+	private Vector3f point;
+	private Vector3f onTerrainPoint;
+	private float distance;
+	private float toTerrainDistance;
+	private float dist;
+	private float angle = 180;
+
+	private int flags = 0;
+
+	public Camera() {
+		super();
+		point = new Vector3f();
+		onTerrainPoint = new Vector3f();
+		distance = position.length();
+		rotX = (float) Math.toDegrees(Vector3f.angle(new Vector3f(-position.x, -position.y, -position.z), new Vector3f(0, 0, -1)));
+	}
+
+	@Override
+	public void update(World world) {
+		Vector2f mouseDelta = new Vector2f(Mouse.getDX(), Mouse.getDY());
+		if (Mouse.isButtonDown(1)) {
+			if (mouseDelta.lengthSquared() != 0f) {
+				mouseDelta.scale(SENSITIVITY);
+				Vector3f delta = new Vector3f();
+				float coef = 120f * DisplayManager.getFrameTimeSeconds();
+				delta.x = coef * -mouseDelta.x;
+				delta.z = coef * mouseDelta.y;
+				toWorldRotation = Maths.createTransformationMatrix(new Vector3f(), 0, -rotY, 0, 1);
+				Vector4f result = Matrix4f.transform(toWorldRotation, new Vector4f(delta.x, 0, delta.z, 0), null);
+				position.x += result.x;
+				position.z += result.z;
+				point.x += result.x;
+				point.z += result.z;
+				onTerrainPoint.x = point.x;
+				onTerrainPoint.z = point.z;
+				onTerrainPoint.y = world.getTerrain().getHeight(onTerrainPoint.x, onTerrainPoint.z);
+			}
+		}
+		if (Mouse.isButtonDown(0)) {
+			if (mouseDelta.lengthSquared() != 0f) {
+				angle -= mouseDelta.x;
+				rotX -= mouseDelta.y;
+				if (rotX < 1f)
+					rotX = 1f;
+				if (rotX > 90f)
+					rotX = 90f;
+				if(angle < 0f)
+					angle += 360f;
+				if(angle >= 360f)
+					angle -= 360f;
+			} else {
+				float dw = Mouse.getDWheel();
+				if (dw != 0) {
+					distance -= dw * 0.1f;
+				}
+			}
+		}
+		toTerrainDistance = Vector3f.sub(onTerrainPoint, position, null).length();
+		Vector2f pt = new Vector2f(point.x, point.z);
+		Vector2f ps = new Vector2f(position.x, position.z);
+		dist = Vector2f.sub(pt, ps, null).length();
+		recalcultePosition(world);
+	}
+
+	private void recalcultePosition(World world) {
+		if (dist < 200f) {
+			point.y = onTerrainPoint.y;
+			if ((flags & 1) == 0) {
+				flags = 3;
+			} else
+				flags = 1;
+		} else {
+			point.y = 0f;
+			if ((flags & 1) != 0) {
+				flags = 2;
+			} else
+				flags = 0;
+		}
+		if ((flags & 2) == 2) {
+			if ((flags & 1) != 0) {
+				distance = toTerrainDistance;
+				rotX -= Math.toDegrees(Vector3f.angle(Vector3f.sub(point, position, null), Vector3f.sub(onTerrainPoint, position, null)));
+			} else {
+				distance = Vector3f.sub(point, position, null).length();
+				rotX += Math.toDegrees(Vector3f.angle(Vector3f.sub(point, position, null), Vector3f.sub(onTerrainPoint, position, null)));
+			}
+		}
+		position.y = point.y + (float) (distance * Math.sin(Math.toRadians(rotX)));
+		position.y = Math.max(position.y, DIST_AB_TER);
+		float xz = (float) (distance * Math.cos(Math.toRadians(rotX)));
+		float dx = (float) (xz * Math.sin(Math.toRadians(angle)));
+		float dz = (float) (xz * Math.cos(Math.toRadians(angle)));
+		position.x = point.x - dx;
+		position.z = point.z - dz;
+		rotY = 180 - angle;
+		if (position.y < world.getTerrain().getHeight(position.x, position.z) + DIST_AB_TER) {
+			while (position.y < world.getTerrain().getHeight(position.x, position.z) + DIST_AB_TER) {
+				if (rotX < 90f)
+					rotX += 0.1f;
+				else
+					distance += 2f;
+				position.y = point.y + (float) (distance * Math.sin(Math.toRadians(rotX)));
+				xz = (float) (distance * Math.cos(Math.toRadians(rotX)));
+				dx = (float) (xz * Math.sin(Math.toRadians(angle)));
+				dz = (float) (xz * Math.cos(Math.toRadians(angle)));
+				position.x = point.x - dx;
+				position.z = point.z - dz;
+				rotY = 180 - angle;
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/camera/ICamera.java b/gameEngine/ns/camera/ICamera.java
new file mode 100644
index 0000000..7b4d212
--- /dev/null
+++ b/gameEngine/ns/camera/ICamera.java
@@ -0,0 +1,45 @@
+package ns.camera;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.world.World;
+
+/**
+ * @author Dinu B.
+ * @since 1.0
+ */
+public abstract class ICamera {
+	public static ICamera createdCamera;
+
+	protected Vector3f position;
+	protected float rotX;
+	protected float rotY;
+	protected float rotZ;
+
+	public ICamera() {
+		createdCamera = this;
+		position = new Vector3f(0, 100, 300);
+	}
+
+	public abstract void update(World world);
+
+	public Vector3f getPosition() {
+		return position;
+	}
+
+	public float getRotX() {
+		return rotX;
+	}
+
+	public float getRotY() {
+		return rotY;
+	}
+
+	public float getRotZ() {
+		return rotZ;
+	}
+
+	public void invertPitch() {
+		rotX = -rotX;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/BiomeSpreadComponent.java b/gameEngine/ns/components/BiomeSpreadComponent.java
new file mode 100644
index 0000000..7ef90da
--- /dev/null
+++ b/gameEngine/ns/components/BiomeSpreadComponent.java
@@ -0,0 +1,29 @@
+package ns.components;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import ns.world.Biome;
+
+public class BiomeSpreadComponent implements IComponent {
+	private float minRange, maxRange;
+	private Biome biome;
+	
+	public BiomeSpreadComponent withMinMaxRange(float minRange, float maxRange) {
+		this.minRange = minRange;
+		this.maxRange = maxRange;
+		return this;
+	}
+	
+	public BiomeSpreadComponent withBiome(Biome biome) {
+		this.biome = biome;
+		return this;
+	}
+	
+	public Vector2f getMinMax() {
+		return new Vector2f(minRange, maxRange);
+	}
+	
+	public Biome getBiome() {
+		return biome;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/Blueprint.java b/gameEngine/ns/components/Blueprint.java
new file mode 100644
index 0000000..493e431
--- /dev/null
+++ b/gameEngine/ns/components/Blueprint.java
@@ -0,0 +1,75 @@
+package ns.components;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import ns.entities.Entity;
+import ns.world.World;
+import ns.worldSave.BlueprintData;
+import ns.worldSave.SerializableWorldObject;
+
+public class Blueprint implements SerializableWorldObject {
+
+	protected static final int MODEL = 0;
+	protected static final int BIOME_SPREAD = 1;
+	protected static final int MOVEMENT = 2;
+	protected static final int CUSTOM_COLORS = 3;
+
+	private Map<Integer, IComponent> components = new HashMap<>();
+	private String objectName;
+
+	protected Blueprint(String objectName) {
+		this.objectName = objectName;
+	}
+
+	protected Blueprint withComponent(int id, IComponent c) {
+		components.put(id, c);
+		return this;
+	}
+
+	protected Blueprint withBiomeSpread(BiomeSpreadComponent c) {
+		return withComponent(BIOME_SPREAD, c);
+	}
+
+	public BiomeSpreadComponent getBiomeSpread() {
+		return (BiomeSpreadComponent) components.get(BIOME_SPREAD);
+	}
+
+	protected Blueprint withModel(ModelComponent c) {
+		return withComponent(MODEL, c);
+	}
+
+	public ModelComponent getModel() {
+		return (ModelComponent) components.get(MODEL);
+	}
+
+	protected Blueprint withMovement(MovementComponent c) {
+		return withComponent(MOVEMENT, c);
+	}
+
+	public MovementComponent getMovement() {
+		return (MovementComponent) components.get(MOVEMENT);
+	}
+
+	public void move(Entity e, World w) {
+		MovementComponent moveC = getMovement();
+		if (moveC != null) {
+			moveC.update(e.getPosition(), e, this, w);
+		}
+	}
+
+	protected Blueprint withCuctomColors(CustomColorsComponent c) {
+		return withComponent(CUSTOM_COLORS, c);
+	}
+
+	public CustomColorsComponent getCustomColors() {
+		return (CustomColorsComponent) components.get(CUSTOM_COLORS);
+	}
+
+	@Override
+	public BlueprintData asData() {
+		BlueprintData data = new BlueprintData();
+		data.setObjectName(objectName);
+		return data;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/BlueprintCreator.java b/gameEngine/ns/components/BlueprintCreator.java
new file mode 100644
index 0000000..52b881b
--- /dev/null
+++ b/gameEngine/ns/components/BlueprintCreator.java
@@ -0,0 +1,31 @@
+package ns.components;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.openglWorkers.ModelsLibrary;
+import ns.world.Biome;
+
+public class BlueprintCreator {
+	public static Blueprint createBlueprintFor(String entityFolder) {
+		Blueprint blueprint = new Blueprint(entityFolder);
+		if (entityFolder.equals("1000")) {
+			List<Vector3f> colors = new ArrayList<>();
+			colors.add(new Vector3f(0, 1, 0));
+			blueprint.withModel(new ModelComponent(ModelsLibrary.getModel("res/models/1000/tree.obj")))
+					.withBiomeSpread(new BiomeSpreadComponent().withMinMaxRange(3, 30).withBiome(Biome.FOREST))
+					.withCuctomColors(new CustomColorsComponent(colors));
+		} else if (entityFolder.equals("1001")) {
+			List<Vector3f> colors = new ArrayList<>();
+			colors.add(new Vector3f(0, 1, 0));
+			blueprint.withModel(new ModelComponent(ModelsLibrary.getModel("res/models/1001/tree.obj")))
+					.withBiomeSpread(new BiomeSpreadComponent().withMinMaxRange(10, 60).withBiome(Biome.FOREST))
+					.withCuctomColors(new CustomColorsComponent(colors));
+		} else if (entityFolder.equals("menuDNA")) {
+			blueprint.withModel(new ModelComponent(ModelsLibrary.getModel("res/models/others/menu_DNA.obj")));
+		}
+		return blueprint;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/CustomColorsComponent.java b/gameEngine/ns/components/CustomColorsComponent.java
new file mode 100644
index 0000000..f25220b
--- /dev/null
+++ b/gameEngine/ns/components/CustomColorsComponent.java
@@ -0,0 +1,17 @@
+package ns.components;
+
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector3f;
+
+public class CustomColorsComponent implements IComponent {
+	private List<Vector3f> colors;
+
+	public CustomColorsComponent(List<Vector3f> colors) {
+		this.colors = colors;
+	}
+
+	public List<Vector3f> getColors() {
+		return colors;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/IComponent.java b/gameEngine/ns/components/IComponent.java
new file mode 100644
index 0000000..b71928b
--- /dev/null
+++ b/gameEngine/ns/components/IComponent.java
@@ -0,0 +1,14 @@
+package ns.components;
+
+public abstract interface IComponent {
+	public static final int BIOME_SPREAD = Blueprint.BIOME_SPREAD;
+
+	public static IComponent create(int id) {
+		switch (id) {
+		case BIOME_SPREAD:
+			return new BiomeSpreadComponent();
+		default:
+			return null;
+		}
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/LifeComponent.java b/gameEngine/ns/components/LifeComponent.java
new file mode 100644
index 0000000..9e792ac
--- /dev/null
+++ b/gameEngine/ns/components/LifeComponent.java
@@ -0,0 +1,4 @@
+package ns.components;
+
+public class LifeComponent implements IComponent {
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/ModelComponent.java b/gameEngine/ns/components/ModelComponent.java
new file mode 100644
index 0000000..e799d5b
--- /dev/null
+++ b/gameEngine/ns/components/ModelComponent.java
@@ -0,0 +1,15 @@
+package ns.components;
+
+import ns.openglObjects.VAO;
+
+public class ModelComponent implements IComponent {
+	private final VAO model;
+
+	public ModelComponent(VAO model) {
+		this.model = model;
+	}
+
+	public VAO getModel() {
+		return model;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/MovementComponent.java b/gameEngine/ns/components/MovementComponent.java
new file mode 100644
index 0000000..ae6fa32
--- /dev/null
+++ b/gameEngine/ns/components/MovementComponent.java
@@ -0,0 +1,49 @@
+package ns.components;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.display.DisplayManager;
+import ns.entities.Entity;
+import ns.utils.GU;
+import ns.world.World;
+
+public class MovementComponent implements IComponent {
+
+	public static final int MOVE = 1;// 00000001
+	public static final int JUMP = 2;// 00000010
+	
+	private static final float SPEED = 20f;
+	private static final float JUMP_POWER = 1.2f;
+	private static final float GRAVITY = 5f;
+
+	private int config;
+	private Vector3f vel;
+
+	public MovementComponent(int config) {
+		if(config == 0) {
+			throw new InstantiationError("Config cannot be 0, values accepted are 1, 2 or 3");
+		}
+		this.config = config;
+		this.vel = new Vector3f();
+	}
+
+	public void update(Vector3f position, Entity e, Blueprint blueprint, World world) {
+		if((config & MOVE) != 0) {
+			e.rotate(0, GU.random.genFloat() * 10f - 5f, 0);
+			
+			float radyrot = (float) Math.toRadians(e.getRotY() + 180);
+			vel.x = (float) (SPEED * DisplayManager.getFrameTimeSeconds() * Math.sin(radyrot));
+			vel.z = (float) (SPEED * DisplayManager.getFrameTimeSeconds() * Math.cos(radyrot));
+			e.increasePosition(vel.x, 0, vel.z);
+		}
+		if((config & JUMP) != 0) {
+			float th = world.getTerrain().getHeight(position.x, position.z);
+			if(position.y < th) {
+				position.y = th;
+				vel.y = JUMP_POWER;
+			}
+			position.y += vel.y;
+			vel.y -= GRAVITY * DisplayManager.getFrameTimeSeconds();
+		}
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/components/package-info.java b/gameEngine/ns/components/package-info.java
new file mode 100644
index 0000000..8448fde
--- /dev/null
+++ b/gameEngine/ns/components/package-info.java
@@ -0,0 +1,6 @@
+/**
+ * This package is meant to contain the component architecture and the components' classes
+ * @author dinu
+ *
+ */
+package ns.components;
\ No newline at end of file
diff --git a/gameEngine/ns/configuration/Config.java b/gameEngine/ns/configuration/Config.java
new file mode 100644
index 0000000..a0a1adc
--- /dev/null
+++ b/gameEngine/ns/configuration/Config.java
@@ -0,0 +1,5 @@
+package ns.configuration;
+
+public enum Config {
+	TRUE, FALSE;
+}
\ No newline at end of file
diff --git a/gameEngine/ns/configuration/GameConfig.java b/gameEngine/ns/configuration/GameConfig.java
new file mode 100644
index 0000000..7b8d08d
--- /dev/null
+++ b/gameEngine/ns/configuration/GameConfig.java
@@ -0,0 +1,31 @@
+package ns.configuration;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class GameConfig {
+	public static final int FULLSCREEN = 1;
+	
+	private static final Map<Integer, Config> configuration = new HashMap<>();
+	private static final Map<Integer, Float> configurationf = new HashMap<>();
+	
+	static {
+		configuration.put(FULLSCREEN, Config.FALSE);
+	}
+	
+	public static void setConfig(int key, Config value) {
+		configuration.replace(key, value);
+	}
+	
+	public static void setConfigf(int key, float value) {
+		configurationf.replace(key, value);
+	}
+	
+	public static Config getConfig(int key) {
+		return configuration.get(key);
+	}
+	
+	public static float getConfigurationf(int key) {
+		return configurationf.get(key);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/customFileFormat/AudFile.java b/gameEngine/ns/customFileFormat/AudFile.java
new file mode 100644
index 0000000..26bafe0
--- /dev/null
+++ b/gameEngine/ns/customFileFormat/AudFile.java
@@ -0,0 +1,51 @@
+package ns.customFileFormat;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.openal.AL10;
+
+import ns.exceptions.LoadingException;
+import ns.openALObjects.Buffer;
+import ns.utils.GU;
+import res.Resource;
+
+public class AudFile implements File {
+	private String location;
+	
+	public AudFile(String location) {
+		this.location = location;
+	}
+	
+	@Override
+	public Buffer load() throws LoadingException {
+		int id = AL10.alGenBuffers();
+		BufferedReader reader = GU.open(new Resource(location));
+		String line;
+		try {
+			line = reader.readLine();
+			String[] pts = line.split(" ");
+			int format = Integer.parseInt(pts[0]);
+			int size = Integer.parseInt(pts[1]);
+			ByteBuffer data = BufferUtils.createByteBuffer(size);
+			int freq = Integer.parseInt(pts[2]);
+			line = reader.readLine();
+			pts = line.split(" ");
+			for(int idx = 0; idx < size; idx++)
+				data.put(Byte.parseByte(pts[idx]));
+			data.flip();
+			AL10.alBufferData(id, format, data, freq);
+		} catch (IOException e) {
+			e.printStackTrace();
+			return null;
+		} finally {
+			try {
+				reader.close();
+			} catch (IOException e) {
+			}
+		}
+		return new Buffer(id);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/customFileFormat/File.java b/gameEngine/ns/customFileFormat/File.java
new file mode 100644
index 0000000..52c6e5d
--- /dev/null
+++ b/gameEngine/ns/customFileFormat/File.java
@@ -0,0 +1,8 @@
+package ns.customFileFormat;
+
+import ns.exceptions.LoadingException;
+
+public interface File {
+	
+	public abstract Object load() throws LoadingException;
+}
\ No newline at end of file
diff --git a/gameEngine/ns/customFileFormat/FileFormat.java b/gameEngine/ns/customFileFormat/FileFormat.java
new file mode 100644
index 0000000..be231e8
--- /dev/null
+++ b/gameEngine/ns/customFileFormat/FileFormat.java
@@ -0,0 +1,32 @@
+package ns.customFileFormat;
+
+import java.lang.reflect.InvocationTargetException;
+
+import ns.exceptions.LoadingException;
+
+public enum FileFormat {
+	TEXTURE("tex", TexFile.class);
+
+	private String extension;
+	private Class<? extends File> representingClass;
+
+	private FileFormat(String extension, Class<? extends File> representingClass) {
+		this.extension = extension;
+		this.representingClass = representingClass;
+	}
+
+	public String getExtension() {
+		return extension;
+	}
+
+	public Object load(String location) throws LoadingException {
+		try {
+			File f = representingClass.getConstructor(String.class).newInstance(location);
+			return f.load();
+		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
+				| NoSuchMethodException | SecurityException e) {
+			e.printStackTrace();
+		}
+		return null;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/customFileFormat/TexFile.java b/gameEngine/ns/customFileFormat/TexFile.java
new file mode 100644
index 0000000..9f8656b
--- /dev/null
+++ b/gameEngine/ns/customFileFormat/TexFile.java
@@ -0,0 +1,64 @@
+package ns.customFileFormat;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+
+import ns.exceptions.CorruptFileException;
+import ns.exceptions.LoadingException;
+import ns.openglObjects.Texture;
+import ns.utils.GU;
+import res.Resource;
+
+public class TexFile implements File {
+	private String location;
+
+	public TexFile(String location) {
+		this.location = location;
+	}
+
+	@Override
+	public Texture load() throws LoadingException {
+		BufferedReader reader = GU.open(new Resource(location));
+		int id = 0;
+		try {
+			String line = reader.readLine();
+			String[] pts = line.split(" ");
+			int width = Integer.parseInt(pts[0]);
+			int height = Integer.parseInt(pts[1]);
+			ByteBuffer pixels = BufferUtils.createByteBuffer(width * height * 4);
+			for (int y = height - 1; y >= 0; y--) {
+				line = reader.readLine();
+				pts = line.split(" ");
+				for (int x = 0; x < width; x++) {
+					try {
+						int pixel = Integer.parseInt(pts[x]);
+						pixels.put((byte) ((pixel >> 16) & 0xFF));
+						pixels.put((byte) ((pixel >> 8) & 0xFF));
+						pixels.put((byte) (pixel & 0xFF));
+						pixels.put((byte) ((pixel >> 24) & 0xFF));
+					} catch (NumberFormatException e) {
+						throw new CorruptFileException("File at " + location + " is corrupt(found: " + pts[x] + " while expecting an int)");
+					}
+				}
+			}
+			pixels.flip();
+
+			id = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0, GL11.GL_RGBA,
+					GL11.GL_UNSIGNED_BYTE, pixels);
+
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return (id == 0 ? null : new Texture(id));
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/entities/Entity.java b/gameEngine/ns/entities/Entity.java
new file mode 100644
index 0000000..c284887
--- /dev/null
+++ b/gameEngine/ns/entities/Entity.java
@@ -0,0 +1,90 @@
+package ns.entities;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.components.Blueprint;
+import ns.components.CustomColorsComponent;
+import ns.openglObjects.VAO;
+import ns.world.World;
+import ns.worldSave.EntityData;
+import ns.worldSave.SerializableWorldObject;
+
+public class Entity implements SerializableWorldObject {
+
+	private Blueprint blueprint;
+	
+	private Vector3f position;
+	private float rotX;
+	private float rotY;
+	private float rotZ;
+	private float scale;
+
+	public Entity(Blueprint blueprint, Vector3f position) {
+		this.blueprint = blueprint;
+		this.position = position;
+		this.rotX = 0;
+		this.rotY = 0;
+		this.rotZ = 0;
+		this.scale = 1;
+	}
+
+	public VAO getModel() {
+		return blueprint.getModel().getModel();
+	}
+
+	public Vector3f getPosition() {
+		return position;
+	}
+
+	public float getRotX() {
+		return rotX;
+	}
+
+	public float getRotY() {
+		return rotY;
+	}
+
+	public float getRotZ() {
+		return rotZ;
+	}
+
+	public float getScale() {
+		return scale;
+	}
+	
+	public void increasePosition(float dx, float dy, float dz) {
+		this.position.x += dx;
+		this.position.y += dy;
+		this.position.z += dz;
+	}
+	
+	public void rotate(float dx, float dy, float dz) {
+		this.rotX += dx;
+		this.rotY += dy;
+		this.rotZ += dz;
+	}
+
+	public ns.components.BiomeSpreadComponent getBiomeSpreadComponent() {
+		return blueprint.getBiomeSpread();
+	}
+	
+	public void update(World w) {
+		blueprint.move(this, w);
+	}
+
+	public CustomColorsComponent getCustomColors() {
+		return blueprint.getCustomColors();
+	}
+
+	public void setRotY(float rotY) {
+		this.rotY = rotY;
+	}
+
+	@Override
+	public EntityData asData() {
+		EntityData data = new EntityData();
+		data.setPosition(position);
+		data.setBlueprintData(blueprint.asData());
+		return data;
+	}
+}
diff --git a/gameEngine/ns/entities/Light.java b/gameEngine/ns/entities/Light.java
new file mode 100644
index 0000000..b1ee7d3
--- /dev/null
+++ b/gameEngine/ns/entities/Light.java
@@ -0,0 +1,32 @@
+package ns.entities;
+
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+public class Light {
+	public static Light sun;
+	
+	public Vector3f dir;
+	public Vector3f color;
+	public Vector2f bias;
+
+	public Light(Vector3f dir, Vector3f color, Vector2f bias) {
+		this.dir = dir;
+		this.color = color;
+		this.bias = bias;
+		if(sun == null)
+			sun = this;
+	}
+
+	public Vector3f getDir() {
+		return dir;
+	}
+
+	public Vector3f getColor() {
+		return color;
+	}
+
+	public Vector2f getBias() {
+		return bias;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/exceptions/CorruptFileException.java b/gameEngine/ns/exceptions/CorruptFileException.java
new file mode 100644
index 0000000..1941767
--- /dev/null
+++ b/gameEngine/ns/exceptions/CorruptFileException.java
@@ -0,0 +1,9 @@
+package ns.exceptions;
+
+public class CorruptFileException extends LoadingException {
+	private static final long serialVersionUID = -2524782042036254798L;
+
+	public CorruptFileException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/exceptions/GameException.java b/gameEngine/ns/exceptions/GameException.java
new file mode 100644
index 0000000..51db6c9
--- /dev/null
+++ b/gameEngine/ns/exceptions/GameException.java
@@ -0,0 +1,9 @@
+package ns.exceptions;
+
+public abstract class GameException extends RuntimeException {
+	private static final long serialVersionUID = 2404478978308821651L;
+
+	public GameException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/exceptions/LoadingException.java b/gameEngine/ns/exceptions/LoadingException.java
new file mode 100644
index 0000000..87d5c3f
--- /dev/null
+++ b/gameEngine/ns/exceptions/LoadingException.java
@@ -0,0 +1,9 @@
+package ns.exceptions;
+
+public abstract class LoadingException extends GameException {
+	private static final long serialVersionUID = 1320557239316445228L;
+
+	public LoadingException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/mainMenu/MainMenu.java b/gameEngine/ns/mainMenu/MainMenu.java
new file mode 100644
index 0000000..e4e9ea8
--- /dev/null
+++ b/gameEngine/ns/mainMenu/MainMenu.java
@@ -0,0 +1,38 @@
+package ns.mainMenu;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.input.Mouse;
+
+import ns.entities.Entity;
+
+public class MainMenu {
+	private List<MainMenuButton> buttons = new ArrayList<>();
+	private Entity DNA;
+	
+	public MainMenu(List<MainMenuButton> buttons, Entity DNA) {
+		this.buttons = buttons;
+		this.DNA = DNA;
+	}
+	
+	public void update() {
+		int idx = 0;
+		for(MainMenuButton button : buttons) {
+			if(button.isMouseOver()) {
+				DNA.setRotY(idx * 36f);
+				if(Mouse.isButtonDown(0))
+					button.executeAction();
+			}
+			idx++;
+		}
+	}
+
+	public List<MainMenuButton> getButtons() {
+		return buttons;
+	}
+
+	public Entity getDNA() {
+		return DNA;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/mainMenu/MainMenuButton.java b/gameEngine/ns/mainMenu/MainMenuButton.java
new file mode 100644
index 0000000..c1c8359
--- /dev/null
+++ b/gameEngine/ns/mainMenu/MainMenuButton.java
@@ -0,0 +1,31 @@
+package ns.mainMenu;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import ns.openglObjects.Texture;
+import ns.ui.Action;
+import ns.ui.Button;
+
+public class MainMenuButton extends Button {
+	private Action action;
+	private Texture tex;
+
+	public MainMenuButton(Vector2f center, Vector2f scale, Action action, Texture texture) {
+		super(center, scale);
+		this.action = action;
+		this.tex = texture;
+	}
+	
+	public void update() {
+		if(super.clicked())
+			action.execute();
+	}
+
+	public Texture getTex() {
+		return tex;
+	}
+
+	public void executeAction() {
+		action.execute();
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/parallelComputing/CreateVAORequest.java b/gameEngine/ns/parallelComputing/CreateVAORequest.java
new file mode 100644
index 0000000..af58d96
--- /dev/null
+++ b/gameEngine/ns/parallelComputing/CreateVAORequest.java
@@ -0,0 +1,22 @@
+package ns.parallelComputing;
+
+import ns.openglObjects.VAO;
+import ns.openglWorkers.DataPacking;
+import ns.openglWorkers.VBOData;
+
+public class CreateVAORequest extends Request {
+
+	private VAO vao;
+	private VBOData[] args;
+
+	public CreateVAORequest(String request, VBOData[] args, VAO vao) {
+		super(request, args);
+		this.args = args;
+		this.vao = vao;
+	}
+
+	@Override
+	public void execute() {
+		DataPacking.createVAOAndStore(vao, args);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/parallelComputing/Request.java b/gameEngine/ns/parallelComputing/Request.java
new file mode 100644
index 0000000..af4eeef
--- /dev/null
+++ b/gameEngine/ns/parallelComputing/Request.java
@@ -0,0 +1,12 @@
+package ns.parallelComputing;
+
+public abstract class Request {
+	protected String request;
+	protected Object[] args;
+
+	public Request(String request, Object[] args) {
+		this.request = request;
+	}
+	
+	public abstract void execute();
+}
\ No newline at end of file
diff --git a/gameEngine/ns/parallelComputing/Thread.java b/gameEngine/ns/parallelComputing/Thread.java
new file mode 100644
index 0000000..ecf4550
--- /dev/null
+++ b/gameEngine/ns/parallelComputing/Thread.java
@@ -0,0 +1,36 @@
+package ns.parallelComputing;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Exchanger;
+
+public class Thread extends java.lang.Thread {
+	public List<Request> toCarryOutRequests = new ArrayList<>();
+	public List<CreateVAORequest> vaoCreateRequests = new ArrayList<>();
+
+	public Thread(String name, Runnable runnable) {
+		super(runnable, name);
+	}
+
+	public void setToCarryOutRequest(Request request) {
+		if(request instanceof CreateVAORequest) {
+			vaoCreateRequests.add((CreateVAORequest) request);
+			return;
+		}
+		this.toCarryOutRequests.add(request);
+	}
+
+	public <T> T exchange(T toExchange) {
+		Exchanger<T> exchanger = new Exchanger<>();
+		try {
+			return exchanger.exchange(toExchange);
+		} catch (InterruptedException e) {
+		}
+		return null;
+	}
+
+	public void clearRequests() {
+		this.toCarryOutRequests.clear();
+		this.vaoCreateRequests.clear();
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/parallelComputing/ThreadMaster.java b/gameEngine/ns/parallelComputing/ThreadMaster.java
new file mode 100644
index 0000000..b285fa2
--- /dev/null
+++ b/gameEngine/ns/parallelComputing/ThreadMaster.java
@@ -0,0 +1,22 @@
+package ns.parallelComputing;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ThreadMaster {
+	private static Map<String, Thread> threads = new HashMap<>();
+	
+	public static void addThread(Thread thread) {
+		threads.put(thread.getName(), thread);
+	}
+	
+	public static Thread getThread(String name) {
+		return threads.get(name);
+	}
+	
+	public static Thread createThread(Runnable runnable, String name) {
+		Thread th = new Thread(name, runnable);
+		threads.put(name, th);
+		return th;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/parallelComputing/VAOUpdateRequest.java b/gameEngine/ns/parallelComputing/VAOUpdateRequest.java
new file mode 100644
index 0000000..a309d52
--- /dev/null
+++ b/gameEngine/ns/parallelComputing/VAOUpdateRequest.java
@@ -0,0 +1,21 @@
+package ns.parallelComputing;
+
+import ns.openglObjects.VAO;
+import ns.openglWorkers.VBOUpdateData;
+
+public class VAOUpdateRequest extends Request {
+
+	private VAO vao;
+	private VBOUpdateData data;
+
+	public VAOUpdateRequest(String request, VBOUpdateData arg, VAO vao) {
+		super(request, new Object[] { arg });
+		this.vao = vao;
+		this.data = arg;
+	}
+
+	@Override
+	public void execute() {
+		data.updateWithin(vao);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/terrain/HeightsGenerator.java b/gameEngine/ns/terrain/HeightsGenerator.java
new file mode 100644
index 0000000..274fc99
--- /dev/null
+++ b/gameEngine/ns/terrain/HeightsGenerator.java
@@ -0,0 +1,69 @@
+package ns.terrain;
+
+import java.util.Random;
+
+public class HeightsGenerator {
+	private static final float AMPLITUDE = 300f;
+	private static final int OCTAVES = 6;
+	private static final float ROUGHNESS = 0.25f;
+
+	private Random random = new Random();
+	private int seed;
+
+	public HeightsGenerator() {
+		this.seed = random.nextInt(1000000000);
+	}
+
+	public HeightsGenerator(int seed) {
+		this.seed = seed;
+	}
+
+	public float generateHeight(int x, int z) {
+		float total = 0;
+		float d = (float) Math.pow(2, OCTAVES - 1);
+		for (int i = 0; i < OCTAVES; i++) {
+			float freq = (float) (Math.pow(2, i) / d);
+			float amp = (float) Math.pow(ROUGHNESS, i) * AMPLITUDE;
+			total += getInterpolatedNoise(x * freq, z * freq) * amp;
+		}
+		return total;
+	}
+
+	private float getInterpolatedNoise(float x, float z) {
+		int intX = (int) x;
+		int intZ = (int) z;
+		float fracX = x - intX;
+		float fracZ = z - intZ;
+
+		float v1 = getSmoothNoise(intX, intZ);
+		float v2 = getSmoothNoise(intX + 1, intZ);
+		float v3 = getSmoothNoise(intX, intZ + 1);
+		float v4 = getSmoothNoise(intX + 1, intZ + 1);
+		float i1 = interpolate(v1, v2, fracX);
+		float i2 = interpolate(v3, v4, fracX);
+		return interpolate(i1, i2, fracZ);
+	}
+
+	private float interpolate(float a, float b, float blend) {
+		double theta = blend * Math.PI;
+		float f = (float) (1f - Math.cos(theta)) * 0.5f;
+		return a * (1f - f) + b * f;
+	}
+
+	private float getSmoothNoise(int x, int z) {
+		float corners = (getNoise(x - 1, z - 1) + getNoise(x + 1, z - 1) + getNoise(x - 1, z + 1)
+				+ getNoise(x + 1, z + 1)) / 16f;
+		float sides = (getNoise(x - 1, z) + getNoise(x + 1, z) + getNoise(x, z - 1) + getNoise(x, z + 1)) / 8f;
+		float center = getNoise(x, z) / 4f;
+		return corners + sides + center;
+	}
+
+	private float getNoise(int x, int z) {
+		random.setSeed(x * 49632 + z * 325176 + seed);
+		return random.nextFloat() * 2f - 1f;
+	}
+	
+	public int getSeed() {
+		return seed;
+	}
+}
diff --git a/gameEngine/ns/terrain/Terrain.java b/gameEngine/ns/terrain/Terrain.java
new file mode 100644
index 0000000..3713e53
--- /dev/null
+++ b/gameEngine/ns/terrain/Terrain.java
@@ -0,0 +1,211 @@
+package ns.terrain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.components.BiomeSpreadComponent;
+import ns.entities.Entity;
+import ns.openglObjects.VAO;
+import ns.openglWorkers.DataPacking;
+import ns.openglWorkers.VBOData;
+import ns.utils.Maths;
+import ns.worldSave.SerializableWorldObject;
+import ns.worldSave.TerrainData;
+
+public class Terrain implements SerializableWorldObject{
+	public static final float SIZE = 2400;
+	public static final int VERTEX_COUNT = (int) (256f * (SIZE / 1200f));
+	private VAO model;
+	private float x, z;
+	private HeightsGenerator generator;
+	private float[][] heights;
+	private List<TerrainVertex> vertices;
+
+	public Terrain() {
+		x = -(SIZE / 2f);
+		z = -(SIZE / 2f);
+		vertices = new ArrayList<>();
+		generator = new HeightsGenerator();
+		model = initModel();
+	}
+
+	public Terrain(int seed) {
+		x = -(SIZE / 2f);
+		z = -(SIZE / 2f);
+		vertices = new ArrayList<>();
+		generator = new HeightsGenerator(seed);
+		model = initModel();
+	}
+
+	public void initColors(List<Entity> entities) {
+		for (TerrainVertex vertex : vertices) {
+			for (Entity e : entities) {
+				BiomeSpreadComponent comp = e.getBiomeSpreadComponent();
+				if (comp != null) {
+					Vector3f pos = posRelToTerrain(e.getPosition());
+					float len = Vector3f.sub(pos, vertex.position, null).length();
+					Vector2f minMax = comp.getMinMax();
+					Vector3f cl = new Vector3f();
+					if (len < minMax.x) {
+						cl = comp.getBiome().getColor();
+					} else if (len < minMax.y) {
+						Vector3f bcl = new Vector3f(comp.getBiome().getColor());
+						float fac = (len - minMax.x) / (minMax.y - minMax.x);
+						bcl.scale(1.0f - fac);
+						Vector3f prevC = new Vector3f(vertex.color);
+						prevC.scale(fac);
+						cl = new Vector3f(Vector3f.add(bcl, prevC, null));
+					}
+					if (!(cl.x == 0 && cl.y == 0 && cl.z == 0))
+						vertex.color = cl;
+				}
+			}
+		}
+		float[] cls = new float[VERTEX_COUNT * VERTEX_COUNT * 3];
+		int ptr = 0;
+		for (TerrainVertex vertex : vertices) {
+			cls[ptr++] = vertex.color.x;
+			cls[ptr++] = vertex.color.y;
+			cls[ptr++] = vertex.color.z;
+		}
+		DataPacking.replace(model, 2, cls);
+	}
+
+	private Vector3f posRelToTerrain(Vector3f position) {
+		return new Vector3f(position.x - this.x, position.y, position.z - this.z);
+	}
+
+	private VAO initModel() {
+		heights = new float[VERTEX_COUNT][VERTEX_COUNT];
+		for (int i = 0; i < VERTEX_COUNT; i++)
+			for (int j = 0; j < VERTEX_COUNT; j++)
+				heights[i][j] = -100f;
+		int count = VERTEX_COUNT * VERTEX_COUNT;
+		float[] vao_vertices = new float[3 * count];
+		float[] vao_normals = new float[3 * count];
+		float[] vao_colors = new float[3 * count];
+		int vertexPointer = 0;
+		for (int z = 0; z < VERTEX_COUNT; z++) {
+			for (int x = 0; x < VERTEX_COUNT; x++) {
+				vao_vertices[3 * vertexPointer] = ((float) x / ((float) VERTEX_COUNT - 1)) * SIZE;
+				vao_vertices[3 * vertexPointer + 1] = getHeight(x, z);
+				vao_vertices[3 * vertexPointer + 2] = ((float) z / ((float) VERTEX_COUNT - 1)) * SIZE;
+
+				Vector3f normal = getNormal(x, z);
+				vao_normals[3 * vertexPointer] = normal.x;
+				vao_normals[3 * vertexPointer + 1] = normal.y;
+				vao_normals[3 * vertexPointer + 2] = normal.z;
+
+				vao_colors[3 * vertexPointer] = 1.0f;
+				vao_colors[3 * vertexPointer + 1] = 0.766f;
+				vao_colors[3 * vertexPointer + 2] = 0.061f;
+
+				vertices.add(new TerrainVertex(
+						new Vector3f(vao_vertices[3 * vertexPointer], vao_vertices[3 * vertexPointer + 1],
+								vao_vertices[3 * vertexPointer + 2]),
+						new Vector3f(vao_colors[3 * vertexPointer], vao_colors[3 * vertexPointer + 1],
+								vao_colors[3 * vertexPointer + 2])));
+
+				vertexPointer++;
+			}
+		}
+		int[] indices = new int[6 * (VERTEX_COUNT - 1) * (VERTEX_COUNT - 1)];
+		int pointer = 0;
+		for (int z = 0; z < VERTEX_COUNT - 1; z++) {
+			for (int x = 0; x < VERTEX_COUNT - 1; x++) {
+				int topLeft = z * VERTEX_COUNT + x;
+				int topRight = topLeft + 1;
+				int bottomLeft = (z + 1) * VERTEX_COUNT + x;
+				int bottomRight = bottomLeft + 1;
+				if ((x + z) % 2 == 0) {
+					indices[pointer++] = topLeft;
+					indices[pointer++] = bottomLeft;
+					indices[pointer++] = bottomRight;
+					indices[pointer++] = topRight;
+					indices[pointer++] = topLeft;
+					indices[pointer++] = bottomRight;
+				} else {
+					indices[pointer++] = topLeft;
+					indices[pointer++] = bottomLeft;
+					indices[pointer++] = topRight;
+					indices[pointer++] = topRight;
+					indices[pointer++] = bottomLeft;
+					indices[pointer++] = bottomRight;
+				}
+			}
+		}
+		return DataPacking.storeDataInVAO(new VBOData(vao_vertices).withAttributeNumber(0).withDimensions(3),
+				new VBOData(vao_normals).withAttributeNumber(1).withDimensions(3),
+				new VBOData(vao_colors).withAttributeNumber(2).withDimensions(3).withUsage(GL15.GL_DYNAMIC_DRAW),
+				new VBOData(indices).isIndices(true));
+	}
+
+	public float getHeight(float worldX, float worldZ) {
+		float terrainx = worldX - this.x;
+		float terrainz = worldZ - this.z;
+		float gridSquareSize = SIZE / ((float) heights.length - 1);
+		int gridX = (int) Math.floor(terrainx / gridSquareSize);
+		int gridZ = (int) Math.floor(terrainz / gridSquareSize);
+		if (gridX >= heights.length - 1 || gridZ >= heights.length - 1 || gridX < 0 || gridZ < 0)
+			return 0;
+		float xCoord = (terrainx % gridSquareSize) / gridSquareSize;
+		float zCoord = (terrainz % gridSquareSize) / gridSquareSize;
+		float answer;
+		if (xCoord <= (1 - zCoord)) {
+			answer = Maths.barryCentric(new Vector3f(0, heights[gridX][gridZ], 0),
+					new Vector3f(1, heights[gridX + 1][gridZ], 0), new Vector3f(0, heights[gridX][gridZ + 1], 1),
+					new Vector2f(xCoord, zCoord));
+		} else {
+			answer = Maths.barryCentric(new Vector3f(1, heights[gridX + 1][gridZ], 0),
+					new Vector3f(1, heights[gridX + 1][gridZ + 1], 1), new Vector3f(0, heights[gridX][gridZ + 1], 1),
+					new Vector2f(xCoord, zCoord));
+		}
+		return answer;
+	}
+
+	private float getHeight(int x, int z) {
+		x = (x < 0 ? 0 : x);
+		x = (x > VERTEX_COUNT - 1 ? VERTEX_COUNT - 1 : x);
+		z = (z < 0 ? 0 : z);
+		z = (z > VERTEX_COUNT - 1 ? VERTEX_COUNT - 1 : z);
+		if (heights[x][z] == -100f) {
+			float height = generator.generateHeight(x, z);
+			heights[x][z] = height;
+			return height;
+		} else
+			return heights[x][z];
+	}
+
+	private Vector3f getNormal(int x, int z) {
+		float up = getHeight(x, z + 1);
+		float down = getHeight(x, z - 1);
+		float left = getHeight(x - 1, z);
+		float right = getHeight(x + 1, z);
+		Vector3f normal = new Vector3f(left - right, 2f, down - up);
+		normal.normalise();
+		return normal;
+	}
+
+	public float getX() {
+		return x;
+	}
+
+	public float getZ() {
+		return z;
+	}
+
+	public VAO getModel() {
+		return model;
+	}
+
+	@Override
+	public TerrainData asData() {
+		TerrainData data = new TerrainData();
+		data.setSeed(generator.getSeed());
+		return data;
+	}
+}
diff --git a/gameEngine/ns/terrain/TerrainVertex.java b/gameEngine/ns/terrain/TerrainVertex.java
new file mode 100644
index 0000000..3b90a00
--- /dev/null
+++ b/gameEngine/ns/terrain/TerrainVertex.java
@@ -0,0 +1,13 @@
+package ns.terrain;
+
+import org.lwjgl.util.vector.Vector3f;
+
+public class TerrainVertex {
+	protected Vector3f position;
+	protected Vector3f color;
+	
+	public TerrainVertex(Vector3f position, Vector3f color) {
+		this.position = position;
+		this.color = color;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/ui/Action.java b/gameEngine/ns/ui/Action.java
new file mode 100644
index 0000000..64db0af
--- /dev/null
+++ b/gameEngine/ns/ui/Action.java
@@ -0,0 +1,5 @@
+package ns.ui;
+
+public interface Action {
+	public abstract void execute();
+}
\ No newline at end of file
diff --git a/gameEngine/ns/ui/Button.java b/gameEngine/ns/ui/Button.java
new file mode 100644
index 0000000..f6f724d
--- /dev/null
+++ b/gameEngine/ns/ui/Button.java
@@ -0,0 +1,34 @@
+package ns.ui;
+
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.util.vector.Vector2f;
+
+public class Button {
+	private Vector2f center;
+	private Vector2f scale;
+
+	public Button(Vector2f center, Vector2f scale) {
+		this.center = center;
+		this.scale = scale;
+	}
+	
+	public boolean isMouseOver() {
+		double normalizedX = -1.0 + 2.0 * (double)Mouse.getX() / Display.getWidth(); 
+		double normalizedY = -(1.0 - 2.0 * (double)Mouse.getY() / Display.getHeight());
+		Vector2f relToButtonLocation = Vector2f.sub(center, new Vector2f((float) normalizedX, (float) normalizedY), null);
+		return (Math.abs(relToButtonLocation.x) <= scale.x && Math.abs(relToButtonLocation.y) <= scale.y);
+	}
+	
+	public boolean clicked() {
+		return isMouseOver() && Mouse.isButtonDown(0);
+	}
+
+	public Vector2f getCenter() {
+		return center;
+	}
+
+	public Vector2f getScale() {
+		return scale;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/ui/GUITexture.java b/gameEngine/ns/ui/GUITexture.java
new file mode 100644
index 0000000..4fe1481
--- /dev/null
+++ b/gameEngine/ns/ui/GUITexture.java
@@ -0,0 +1,37 @@
+package ns.ui;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import ns.openglObjects.Texture;
+
+public class GUITexture {
+	private Vector2f center;
+	private Vector2f scale;
+	private Texture texture;
+
+	public GUITexture(Vector2f center, Vector2f scale, Texture texture) {
+		this.center = center;
+		this.scale = scale;
+		this.texture = texture;
+	}
+
+	public Vector2f getCenter() {
+		return center;
+	}
+
+	public void setCenter(Vector2f center) {
+		this.center = center;
+	}
+
+	public Vector2f getScale() {
+		return scale;
+	}
+
+	public void setScale(Vector2f scale) {
+		this.scale = scale;
+	}
+	
+	public Texture getTexture() {
+		return texture;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/utils/GU.java b/gameEngine/ns/utils/GU.java
new file mode 100644
index 0000000..39a3240
--- /dev/null
+++ b/gameEngine/ns/utils/GU.java
@@ -0,0 +1,32 @@
+package ns.utils;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+
+import res.Resource;
+import res.WritingResource;
+
+public class GU {
+	public static final Random random = new Random();
+
+	public static BufferedReader open(Resource resource) {
+		return new BufferedReader(new InputStreamReader(resource.asInputStream()));
+	}
+
+	public static PrintWriter open(WritingResource resource) {
+		return new PrintWriter(resource.asOutputStream());
+	}
+
+	public static class Random {
+		private final java.util.Random random = new java.util.Random();
+
+		public int genInt(int max) {
+			return random.nextInt(max);
+		}
+
+		public float genFloat() {
+			return random.nextFloat();
+		}
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/utils/GameLibrary.java b/gameEngine/ns/utils/GameLibrary.java
new file mode 100644
index 0000000..9cbdb5b
--- /dev/null
+++ b/gameEngine/ns/utils/GameLibrary.java
@@ -0,0 +1,4 @@
+package ns.utils;
+
+public class GameLibrary {
+}
diff --git a/gameEngine/ns/utils/Maths.java b/gameEngine/ns/utils/Maths.java
new file mode 100644
index 0000000..a948f03
--- /dev/null
+++ b/gameEngine/ns/utils/Maths.java
@@ -0,0 +1,54 @@
+package ns.utils;
+
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.camera.ICamera;
+import ns.entities.Entity;
+
+public final class Maths {
+	private Maths() {
+	}
+	
+	public static float barryCentric(Vector3f p1, Vector3f p2, Vector3f p3, Vector2f pos) {
+		float det = (p2.z - p3.z) * (p1.x - p3.x) + (p3.x - p2.x) * (p1.z - p3.z);
+		float l1 = ((p2.z - p3.z) * (pos.x - p3.x) + (p3.x - p2.x) * (pos.y - p3.z)) / det;
+		float l2 = ((p3.z - p1.z) * (pos.x - p3.x) + (p1.x - p3.x) * (pos.y - p3.z)) / det;
+		float l3 = 1.0f - l1 - l2;
+		return l1 * p1.y + l2 * p2.y + l3 * p3.y;
+	}
+	
+	public static Matrix4f createTransformationMatrix(Vector3f position, float rotx, float roty, float rotz, float scale) {
+		Matrix4f matrix = new Matrix4f();
+		matrix.translate(position);
+		matrix.rotate((float) Math.toRadians(rotx), new Vector3f(1, 0, 0));
+		matrix.rotate((float) Math.toRadians(roty), new Vector3f(0, 1, 0));
+		matrix.rotate((float) Math.toRadians(rotz), new Vector3f(0, 0, 1));
+		matrix.scale(new Vector3f(scale, scale, scale));
+		return matrix;
+	}
+	
+	public static Matrix4f createTreansformationMatrix(Entity e) {
+		return createTransformationMatrix(e.getPosition(), e.getRotX(), e.getRotY(), e.getRotZ(), e.getScale());
+	}
+	
+	public static Matrix4f createViewMatrix(ICamera camera) {
+		Matrix4f matrix = new Matrix4f();
+		matrix.setIdentity();
+		matrix.rotate((float) Math.toRadians(camera.getRotX()), new Vector3f(1, 0, 0));
+		matrix.rotate((float) Math.toRadians(camera.getRotY()), new Vector3f(0, 1, 0));
+		matrix.rotate((float) Math.toRadians(camera.getRotZ()), new Vector3f(0, 0, 1));
+		Vector3f camPos = camera.getPosition();
+		Vector3f negCamPos = new Vector3f(-camPos.x, -camPos.y, -camPos.z);
+		matrix.translate(negCamPos);
+		return matrix;
+	}
+
+	public static Matrix4f createTransformationMatrix(Vector2f center, Vector2f scale) {
+		Matrix4f matrix = new Matrix4f();
+		matrix.translate(center);
+		matrix.scale(new Vector3f(scale.x, scale.y, 0.0f));
+		return matrix;
+	}
+}
diff --git a/gameEngine/ns/water/WaterFBOs.java b/gameEngine/ns/water/WaterFBOs.java
new file mode 100644
index 0000000..20a2da5
--- /dev/null
+++ b/gameEngine/ns/water/WaterFBOs.java
@@ -0,0 +1,34 @@
+package ns.water;
+
+import ns.openglObjects.FBO;
+
+public class WaterFBOs {
+	private FBO reflexion;
+	private FBO refraction;
+	
+	public WaterFBOs() {
+		reflexion = new FBO(1200, 800, (FBO.COLOR_TEXTURE | FBO.DEPTH_RENDERBUFFER)).create();
+		refraction = new FBO(1200, 800, (FBO.COLOR_TEXTURE | FBO.DEPTH_TEXTURE)).create();
+	}
+
+	public FBO getReflexion() {
+		return reflexion;
+	}
+
+	public FBO getRefraction() {
+		return refraction;
+	}
+	
+	public void bindReflexion() {
+		reflexion.bind();
+	}
+	
+	public void bindRefraction() {
+		refraction.bind();
+	}
+	
+	public void cleanUp() {
+		reflexion.cleanUp();
+		refraction.cleanUp();
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/water/WaterTile.java b/gameEngine/ns/water/WaterTile.java
new file mode 100644
index 0000000..d1b82a0
--- /dev/null
+++ b/gameEngine/ns/water/WaterTile.java
@@ -0,0 +1,110 @@
+package ns.water;
+
+import ns.openglObjects.VAO;
+import ns.openglWorkers.DataPacking;
+import ns.openglWorkers.VBOData;
+import ns.terrain.Terrain;
+
+public class WaterTile {
+	public static WaterTile tile;
+	
+	private static final float TILE_SIZE = Terrain.SIZE / 2f;
+	private static final int VERTEX_COUNT = (int) (128f * (TILE_SIZE / 600f));
+
+	private float x, y, height;
+	private VAO model;
+
+	public WaterTile(float x, float y) {
+		this.x = x;
+		this.y = y;
+		model = createModel();
+		tile = this;
+	}
+
+	private VAO createModel() {
+		float[] vao_pos = new float[(VERTEX_COUNT - 1) * (VERTEX_COUNT - 1) * 12];
+		byte[] vao_indicators = new byte[vao_pos.length * 2];
+		int vertexPointer = 0;
+		for (int z = 0; z < VERTEX_COUNT - 1; z++) {
+			for (int x = 0; x < VERTEX_COUNT - 1; x++) {
+				vao_pos[vertexPointer * 12] = ((float) x / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 1] = ((float) z / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 2] = ((float) x / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 3] = (((float) z + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 4] = (((float) x + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 5] = ((float) z / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 6] = (((float) x + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 7] = ((float) z / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 8] = ((float) x / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 9] = (((float) z + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 10] = (((float) x + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2
+						* TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 11] = (((float) z + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2
+						* TILE_SIZE;
+
+				vao_indicators[vertexPointer * 24] = 0;
+				vao_indicators[vertexPointer * 24 + 1] = 1;
+				vao_indicators[vertexPointer * 24 + 2] = 1;
+				vao_indicators[vertexPointer * 24 + 3] = 0;
+
+				vao_indicators[vertexPointer * 24 + 4] = 0;
+				vao_indicators[vertexPointer * 24 + 5] = -1;
+				vao_indicators[vertexPointer * 24 + 6] = 1;
+				vao_indicators[vertexPointer * 24 + 7] = -1;
+
+				vao_indicators[vertexPointer * 24 + 8] = -1;
+				vao_indicators[vertexPointer * 24 + 9] = 0;
+				vao_indicators[vertexPointer * 24 + 10] = -1;
+				vao_indicators[vertexPointer * 24 + 11] = 1;
+
+				vao_indicators[vertexPointer * 24 + 12] = -1;
+				vao_indicators[vertexPointer * 24 + 13] = 1;
+				vao_indicators[vertexPointer * 24 + 14] = 0;
+				vao_indicators[vertexPointer * 24 + 15] = 1;
+
+				vao_indicators[vertexPointer * 24 + 16] = 1;
+				vao_indicators[vertexPointer * 24 + 17] = -1;
+				vao_indicators[vertexPointer * 24 + 18] = 1;
+				vao_indicators[vertexPointer * 24 + 19] = 0;
+
+				vao_indicators[vertexPointer * 24 + 20] = 0;
+				vao_indicators[vertexPointer * 24 + 21] = -1;
+				vao_indicators[vertexPointer * 24 + 22] = -1;
+				vao_indicators[vertexPointer * 24 + 23] = 0;
+
+				vertexPointer++;
+			}
+		}
+		return DataPacking.storeDataInVAO(new VBOData(vao_pos).withAttributeNumber(0).withDimensions(2),
+				new VBOData(vao_indicators).withAttributeNumber(1).withDimensions(4));
+	}
+
+	public static float getTileSize() {
+		return TILE_SIZE;
+	}
+
+	public float getX() {
+		return x;
+	}
+
+	public float getY() {
+		return y;
+	}
+
+	public float getHeight() {
+		return height;
+	}
+
+	public VAO getModel() {
+		return model;
+	}
+
+	public static int getVertexCount() {
+		return VERTEX_COUNT;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/world/Biome.java b/gameEngine/ns/world/Biome.java
new file mode 100644
index 0000000..4de813a
--- /dev/null
+++ b/gameEngine/ns/world/Biome.java
@@ -0,0 +1,25 @@
+package ns.world;
+
+import org.lwjgl.util.vector.Vector3f;
+
+public enum Biome {
+	
+	FOREST(1, new Vector3f(0.02f, 0.678f, 0.22f)),
+	;
+	
+	private int biomeId;
+	private Vector3f color;
+	
+	private Biome(int biomeId, Vector3f color) {
+		this.biomeId = biomeId;
+		this.color = color;
+	}
+	
+	public int getId() {
+		return biomeId;
+	}
+
+	public Vector3f getColor() {
+		return color;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/world/World.java b/gameEngine/ns/world/World.java
new file mode 100644
index 0000000..b198be0
--- /dev/null
+++ b/gameEngine/ns/world/World.java
@@ -0,0 +1,29 @@
+package ns.world;
+
+import java.util.List;
+
+import ns.entities.Entity;
+import ns.terrain.Terrain;
+
+public class World {
+	private List<Entity> entities;
+	private Terrain terrain;
+
+	public World(List<Entity> entities, Terrain terrain) {
+		this.entities = entities;
+		this.terrain = terrain;
+	}
+	
+	public void update() {
+		for(Entity e : entities)
+			e.update(this);
+	}
+
+	public List<Entity> getEntities() {
+		return entities;
+	}
+
+	public Terrain getTerrain() {
+		return terrain;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/world/WorldGenerator.java b/gameEngine/ns/world/WorldGenerator.java
new file mode 100644
index 0000000..0e77fd8
--- /dev/null
+++ b/gameEngine/ns/world/WorldGenerator.java
@@ -0,0 +1,52 @@
+package ns.world;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.components.Blueprint;
+import ns.components.BlueprintCreator;
+import ns.entities.Entity;
+import ns.terrain.Terrain;
+import ns.utils.GU;
+import ns.worldSave.LoadWorldMaster;
+import res.Resource;
+
+public class WorldGenerator {
+	public static World generatedWorld = null;
+	private static final float TS = Terrain.SIZE / 2f;
+
+	public static World generateWorld() {
+		Resource resource = new Resource("saveData/save0.sav");
+		if (resource.exists()) {
+			generatedWorld = LoadWorldMaster.loadWorld(resource);
+			generatedWorld.getTerrain().initColors(generatedWorld.getEntities());
+		} else {
+			System.out.println("Save not found, generating new");
+			Terrain terrain = new Terrain();
+			List<Entity> entities = createEntities(terrain);
+			terrain.initColors(entities);
+			generatedWorld = new World(entities, terrain);
+		}
+		return generatedWorld;
+	}
+
+	private static List<Entity> createEntities(Terrain terrain) {
+		List<Entity> entities = new ArrayList<>();
+		Random random = new Random();
+		for (int i = 0; i < 1000; i++) {
+			float x = random.nextFloat() * 2f - 1f;
+			float z = random.nextFloat() * 2f - 1f;
+			x *= TS;
+			z *= TS;
+			float y = terrain.getHeight(x, z);
+			Vector3f pos = new Vector3f(x, y, z);
+			int type = GU.random.genInt(2);
+			Blueprint b = BlueprintCreator.createBlueprintFor(Integer.toString(1000 + type));
+			entities.add(new Entity(b, pos));
+		}
+		return entities;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/BlueprintData.java b/gameEngine/ns/worldSave/BlueprintData.java
new file mode 100644
index 0000000..4172744
--- /dev/null
+++ b/gameEngine/ns/worldSave/BlueprintData.java
@@ -0,0 +1,19 @@
+package ns.worldSave;
+
+import ns.components.Blueprint;
+import ns.components.BlueprintCreator;
+
+public class BlueprintData extends Data {
+	private static final long serialVersionUID = 8067084958250932904L;
+
+	private String objectName;
+
+	public void setObjectName(String objectName) {
+		this.objectName = objectName;
+	}
+
+	@Override
+	public Blueprint asInstance() {
+		return BlueprintCreator.createBlueprintFor(objectName);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/Data.java b/gameEngine/ns/worldSave/Data.java
new file mode 100644
index 0000000..8e4119a
--- /dev/null
+++ b/gameEngine/ns/worldSave/Data.java
@@ -0,0 +1,9 @@
+package ns.worldSave;
+
+import java.io.Serializable;
+
+public abstract class Data implements Serializable {
+	private static final long serialVersionUID = -6430168927862876997L;
+	
+	public abstract Object asInstance();
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/EndObject.java b/gameEngine/ns/worldSave/EndObject.java
new file mode 100644
index 0000000..a1ced0a
--- /dev/null
+++ b/gameEngine/ns/worldSave/EndObject.java
@@ -0,0 +1,7 @@
+package ns.worldSave;
+
+import java.io.Serializable;
+
+class EndObject implements Serializable {
+	private static final long serialVersionUID = 512084690503224131L;
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/EntityData.java b/gameEngine/ns/worldSave/EntityData.java
new file mode 100644
index 0000000..5fe4310
--- /dev/null
+++ b/gameEngine/ns/worldSave/EntityData.java
@@ -0,0 +1,25 @@
+package ns.worldSave;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.entities.Entity;
+
+public class EntityData extends Data {
+	private static final long serialVersionUID = -2117931221477865196L;
+	
+	private BlueprintData blueprintData;
+	private Vector3f position;
+
+	public void setBlueprintData(BlueprintData blueprintData) {
+		this.blueprintData = blueprintData;
+	}
+
+	public void setPosition(Vector3f position) {
+		this.position = position;
+	}
+
+	@Override
+	public Entity asInstance() {
+		return new Entity(blueprintData.asInstance(), position);
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/LoadWorldMaster.java b/gameEngine/ns/worldSave/LoadWorldMaster.java
new file mode 100644
index 0000000..20a0634
--- /dev/null
+++ b/gameEngine/ns/worldSave/LoadWorldMaster.java
@@ -0,0 +1,37 @@
+package ns.worldSave;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import ns.entities.Entity;
+import ns.terrain.Terrain;
+import ns.world.World;
+import res.Resource;
+
+public class LoadWorldMaster {
+	public static  World loadWorld(Resource res) {
+		World world = null;
+		try {
+			ObjectInputStream stream = new ObjectInputStream(res.asInputStream());
+			Object o;
+			List<Entity> entities = new ArrayList<>();
+			Terrain terrain = null;
+			while(true) {
+				o = stream.readObject();
+				System.out.println(o);
+				if(o instanceof EntityData)
+					entities.add(((EntityData) o).asInstance());
+				else if(o instanceof TerrainData)
+					terrain = ((TerrainData) o).asInstance();
+				else if(o instanceof EndObject)
+					break;
+			}
+			world = new World(entities, terrain);
+		} catch (IOException | ClassNotFoundException e) {
+			e.printStackTrace();
+		}
+		return world;
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/SaveWorldMaster.java b/gameEngine/ns/worldSave/SaveWorldMaster.java
new file mode 100644
index 0000000..4afda41
--- /dev/null
+++ b/gameEngine/ns/worldSave/SaveWorldMaster.java
@@ -0,0 +1,24 @@
+package ns.worldSave;
+
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+
+import ns.entities.Entity;
+import ns.world.World;
+import res.WritingResource;
+
+public class SaveWorldMaster {
+	public static void save(World world, WritingResource resource) {
+		ObjectOutputStream stream = null;
+		try {
+			stream = new ObjectOutputStream(resource.asOutputStream());
+			for (Entity entity : world.getEntities())
+				stream.writeObject(entity.asData());
+			stream.writeObject(world.getTerrain().asData());
+			stream.writeObject(new EndObject());
+			stream.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/SerializableWorldObject.java b/gameEngine/ns/worldSave/SerializableWorldObject.java
new file mode 100644
index 0000000..3f36d72
--- /dev/null
+++ b/gameEngine/ns/worldSave/SerializableWorldObject.java
@@ -0,0 +1,5 @@
+package ns.worldSave;
+
+public interface SerializableWorldObject {
+	public abstract Data asData();
+}
\ No newline at end of file
diff --git a/gameEngine/ns/worldSave/TerrainData.java b/gameEngine/ns/worldSave/TerrainData.java
new file mode 100644
index 0000000..0137ab7
--- /dev/null
+++ b/gameEngine/ns/worldSave/TerrainData.java
@@ -0,0 +1,18 @@
+package ns.worldSave;
+
+import ns.terrain.Terrain;
+
+public class TerrainData extends Data {
+	private static final long serialVersionUID = -7194655106968723919L;
+
+	private int seed;
+
+	public void setSeed(int seed) {
+		this.seed = seed;
+	}
+
+	@Override
+	public Terrain asInstance() {
+		return new Terrain(seed);
+	}
+}
\ No newline at end of file
diff --git a/lib/jar/lwjgl.jar b/lib/jar/lwjgl.jar
new file mode 100644
index 0000000..82294e1
--- /dev/null
+++ b/lib/jar/lwjgl.jar
Binary files differ
diff --git a/lib/jar/lwjgl_util.jar b/lib/jar/lwjgl_util.jar
new file mode 100644
index 0000000..97911ab
--- /dev/null
+++ b/lib/jar/lwjgl_util.jar
Binary files differ
diff --git a/lib/native/OpenAL32.dll b/lib/native/OpenAL32.dll
new file mode 100644
index 0000000..1f69e94
--- /dev/null
+++ b/lib/native/OpenAL32.dll
Binary files differ
diff --git a/lib/native/OpenAL64.dll b/lib/native/OpenAL64.dll
new file mode 100644
index 0000000..6f2a2fe
--- /dev/null
+++ b/lib/native/OpenAL64.dll
Binary files differ
diff --git a/lib/native/jinput-dx8.dll b/lib/native/jinput-dx8.dll
new file mode 100644
index 0000000..6d27ad5
--- /dev/null
+++ b/lib/native/jinput-dx8.dll
Binary files differ
diff --git a/lib/native/jinput-dx8_64.dll b/lib/native/jinput-dx8_64.dll
new file mode 100644
index 0000000..6730589
--- /dev/null
+++ b/lib/native/jinput-dx8_64.dll
Binary files differ
diff --git a/lib/native/jinput-raw.dll b/lib/native/jinput-raw.dll
new file mode 100644
index 0000000..ce1d162
--- /dev/null
+++ b/lib/native/jinput-raw.dll
Binary files differ
diff --git a/lib/native/jinput-raw_64.dll b/lib/native/jinput-raw_64.dll
new file mode 100644
index 0000000..3d2b3ad
--- /dev/null
+++ b/lib/native/jinput-raw_64.dll
Binary files differ
diff --git a/lib/native/libjinput-linux.so b/lib/native/libjinput-linux.so
new file mode 100644
index 0000000..3cdc439
--- /dev/null
+++ b/lib/native/libjinput-linux.so
Binary files differ
diff --git a/lib/native/libjinput-linux64.so b/lib/native/libjinput-linux64.so
new file mode 100644
index 0000000..de1ee5f
--- /dev/null
+++ b/lib/native/libjinput-linux64.so
Binary files differ
diff --git a/lib/native/liblwjgl.so b/lib/native/liblwjgl.so
new file mode 100644
index 0000000..ba6e7f6
--- /dev/null
+++ b/lib/native/liblwjgl.so
Binary files differ
diff --git a/lib/native/liblwjgl64.so b/lib/native/liblwjgl64.so
new file mode 100644
index 0000000..8ed0992
--- /dev/null
+++ b/lib/native/liblwjgl64.so
Binary files differ
diff --git a/lib/native/libopenal.so b/lib/native/libopenal.so
new file mode 100644
index 0000000..0a3a619
--- /dev/null
+++ b/lib/native/libopenal.so
Binary files differ
diff --git a/lib/native/libopenal64.so b/lib/native/libopenal64.so
new file mode 100644
index 0000000..e0693c0
--- /dev/null
+++ b/lib/native/libopenal64.so
Binary files differ
diff --git a/lib/native/lwjgl.dll b/lib/native/lwjgl.dll
new file mode 100644
index 0000000..e6c97d9
--- /dev/null
+++ b/lib/native/lwjgl.dll
Binary files differ
diff --git a/lib/native/lwjgl64.dll b/lib/native/lwjgl64.dll
new file mode 100644
index 0000000..2c8b93e
--- /dev/null
+++ b/lib/native/lwjgl64.dll
Binary files differ
diff --git a/renderEngine/ns/display/DisplayManager.java b/renderEngine/ns/display/DisplayManager.java
new file mode 100644
index 0000000..5669f65
--- /dev/null
+++ b/renderEngine/ns/display/DisplayManager.java
@@ -0,0 +1,55 @@
+package ns.display;
+
+import org.lwjgl.LWJGLException;
+import org.lwjgl.Sys;
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.ContextAttribs;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
+import org.lwjgl.opengl.PixelFormat;
+
+import ns.configuration.Config;
+import ns.configuration.GameConfig;
+
+public class DisplayManager {
+
+	private static long lastFrameTime;
+	private static float delta;
+
+	public static void createDisplay() {
+		try {
+			if (GameConfig.getConfig(GameConfig.FULLSCREEN) == Config.TRUE)
+				Display.setFullscreen(true);
+			else
+				Display.setDisplayMode(new DisplayMode(1200, 800));
+			Display.setVSyncEnabled(true);
+			Display.create(new PixelFormat(),
+					new ContextAttribs(4, 3).withForwardCompatible(true).withProfileCore(true));
+			Mouse.create();
+			Keyboard.create();
+		} catch (LWJGLException e) {
+			e.printStackTrace();
+		}
+		lastFrameTime = getCurrentTime();
+	}
+
+	public static void updateDisplay() {
+		Display.update();
+		long currentTime = getCurrentTime();
+		delta = (currentTime - lastFrameTime) / 1000f;
+		lastFrameTime = currentTime;
+	}
+
+	public static void closeDisplay() {
+		Display.destroy();
+	}
+
+	private static long getCurrentTime() {
+		return Sys.getTime() * 1000 / Sys.getTimerResolution();
+	}
+
+	public static float getFrameTimeSeconds() {
+		return delta;
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/exceptions/FBOAttachmentException.java b/renderEngine/ns/exceptions/FBOAttachmentException.java
new file mode 100644
index 0000000..554e313
--- /dev/null
+++ b/renderEngine/ns/exceptions/FBOAttachmentException.java
@@ -0,0 +1,19 @@
+package ns.exceptions;
+
+import ns.openglObjects.FBO;
+
+/**
+ * Thrown when attempting to render an effect from a FBO that doesn't have the right configuration
+ * @author Dinu B.
+ */
+public class FBOAttachmentException extends RenderException {
+	private static final long serialVersionUID = -4759771195837122461L;
+
+	public FBOAttachmentException(String message) {
+		super(message);
+	}
+	
+	public FBOAttachmentException(FBO fbo) {
+		this("The source got wrong configuration:" + fbo + " - configuration:" + fbo.getConfig());
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/exceptions/RenderException.java b/renderEngine/ns/exceptions/RenderException.java
new file mode 100644
index 0000000..f720c41
--- /dev/null
+++ b/renderEngine/ns/exceptions/RenderException.java
@@ -0,0 +1,9 @@
+package ns.exceptions;
+
+public abstract class RenderException extends RuntimeException {
+	private static final long serialVersionUID = -8430216383031558786L;
+
+	public RenderException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/openglObjects/FBO.java b/renderEngine/ns/openglObjects/FBO.java
new file mode 100644
index 0000000..3d75903
--- /dev/null
+++ b/renderEngine/ns/openglObjects/FBO.java
@@ -0,0 +1,140 @@
+package ns.openglObjects;
+
+import java.nio.ByteBuffer;
+
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL14;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL32;
+import org.lwjgl.util.vector.Vector2f;
+
+public class FBO implements IOpenGLObject {
+	public static final int COLOR_TEXTURE = 1; // 00000001
+	public static final int DEPTH_TEXTURE = 2; // 00000010
+	public static final int DEPTH_RENDERBUFFER = 4; // 00000100
+	
+	private final int id;
+	private int width;
+	private int height;
+	private int config;
+	private Texture tex;
+	private Texture depthTex;
+	private int depthRenderBufferId = -1;
+	
+	public FBO(int width, int height, int config) {
+		this.id = GL30.glGenFramebuffers();
+		this.width = width;
+		this.height = height;
+		this.config = config;
+	}
+	
+	public void init(int width, int height, int config) {
+		this.width = width;
+		this.height = height;
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, id);
+		GL11.glDrawBuffer(GL30.GL_COLOR_ATTACHMENT0);
+		if((config & COLOR_TEXTURE) != 0) {
+			int texId = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, texId);
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGB, width, height, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, (ByteBuffer) null);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+			GL32.glFramebufferTexture(GL30.GL_FRAMEBUFFER, GL30.GL_COLOR_ATTACHMENT0, texId, 0);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+			tex = new Texture(texId);
+		}
+		if((config & DEPTH_TEXTURE) != 0) {
+			int depthTexId = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, depthTexId);
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL14.GL_DEPTH_COMPONENT32, width, height, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (ByteBuffer) null);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+			GL32.glFramebufferTexture(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_ATTACHMENT, depthTexId, 0);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+			depthTex = new Texture(depthTexId);
+		}
+		if((config & DEPTH_RENDERBUFFER) != 0) {
+			depthRenderBufferId = GL30.glGenRenderbuffers();
+			GL30.glBindRenderbuffer(GL30.GL_RENDERBUFFER, depthRenderBufferId);
+			GL30.glRenderbufferStorage(GL30.GL_RENDERBUFFER, GL11.GL_DEPTH_COMPONENT, width, height);
+			GL30.glFramebufferRenderbuffer(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_ATTACHMENT, GL30.GL_RENDERBUFFER, depthRenderBufferId);
+			GL30.glBindRenderbuffer(GL30.GL_RENDERBUFFER, 0);
+		}
+		unbind();
+		this.config = config;
+	}
+	
+	public void bind() {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, id);
+		GL11.glViewport(0, 0, width, height);
+	}
+	
+	public static void unbind() {
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, 0);
+		GL11.glViewport(0, 0, Display.getWidth(), Display.getHeight());
+	}
+	
+	public Texture getTex() {
+		return tex;
+	}
+	
+	public Texture getDepthTex() {
+		return depthTex;
+	}
+	
+	public int getConfig() {
+		return config;
+	}
+	
+	public void cleanUp() {
+		if(tex != null)
+			tex.delete();
+		if(depthTex != null)
+			depthTex.delete();
+		if(depthRenderBufferId != -1)
+			GL30.glDeleteRenderbuffers(depthRenderBufferId);
+		GL30.glDeleteFramebuffers(id);
+	}
+
+	public Vector2f getSize() {
+		return new Vector2f(width, height);
+	}
+	
+	public void blitToScreen() {
+		GL30.glBindFramebuffer(GL30.GL_DRAW_FRAMEBUFFER, 0);
+		GL11.glDrawBuffer(GL11.GL_BACK);
+		GL30.glBindFramebuffer(GL30.GL_READ_FRAMEBUFFER, id);
+		GL11.glReadBuffer(GL30.GL_COLOR_ATTACHMENT0);
+		GL30.glBlitFramebuffer(0, 0, width, height, 0, 0, Display.getWidth(), Display.getHeight(),
+				GL11.GL_COLOR_BUFFER_BIT, GL11.GL_NEAREST);
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, 0);
+	}
+
+	public void clear(int mask) {
+		GL11.glClear(mask);
+	}
+
+	@Override
+	public FBO create() {
+		this.init(width, height, config);
+		return this;
+	}
+
+	@Override
+	public void delete() {
+		if(tex != null)
+			tex.delete();
+		if(depthTex != null)
+			depthTex.delete();
+		if(depthRenderBufferId != -1)
+			GL30.glDeleteRenderbuffers(depthRenderBufferId);
+		GL30.glDeleteFramebuffers(id);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/openglObjects/IOpenGLObject.java b/renderEngine/ns/openglObjects/IOpenGLObject.java
new file mode 100644
index 0000000..60e9dab
--- /dev/null
+++ b/renderEngine/ns/openglObjects/IOpenGLObject.java
@@ -0,0 +1,9 @@
+package ns.openglObjects;
+
+public interface IOpenGLObject {
+	public abstract IOpenGLObject create();
+
+	public abstract void delete();
+
+	public abstract int getID();
+}
\ No newline at end of file
diff --git a/renderEngine/ns/openglObjects/IRenderable.java b/renderEngine/ns/openglObjects/IRenderable.java
new file mode 100644
index 0000000..6fb0541
--- /dev/null
+++ b/renderEngine/ns/openglObjects/IRenderable.java
@@ -0,0 +1,7 @@
+package ns.openglObjects;
+
+public interface IRenderable {
+	public abstract void render();
+	
+	public abstract void batchRenderCall();
+}
\ No newline at end of file
diff --git a/renderEngine/ns/openglObjects/Texture.java b/renderEngine/ns/openglObjects/Texture.java
new file mode 100644
index 0000000..ff8c05b
--- /dev/null
+++ b/renderEngine/ns/openglObjects/Texture.java
@@ -0,0 +1,92 @@
+package ns.openglObjects;
+
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.imageio.ImageIO;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL13;
+
+import res.Resource;
+
+public class Texture implements IOpenGLObject {
+	private static List<Texture> textures = new ArrayList<>();
+
+	private Resource resource;
+	private int id;
+
+	public Texture(String location) {
+		this(new Resource(location));
+	}
+
+	public Texture(Resource resource) {
+		this.resource = resource;
+	}
+
+	public Texture(int id) {
+		this.id = id;
+	}
+
+	public Texture create() {
+		BufferedImage asImage = null;
+		if (resource.exists()) {
+			try {
+				asImage = ImageIO.read(resource.asInputStream());
+			} catch (IOException e) {
+				e.printStackTrace();
+				return null;
+			}
+			int width = asImage.getWidth();
+			int height = asImage.getHeight();
+			int[] pixels_raw = asImage.getRGB(0, 0, width, height, null, 0, height);
+			ByteBuffer pixels = BufferUtils.createByteBuffer(width * height * 4);
+			for (int y = height - 1; y >= 0; y--)
+				for (int x = 0; x < width; x++) {
+					int pixel = pixels_raw[y * width + x];
+					pixels.put((byte) ((pixel >> 16) & 0xFF));
+					pixels.put((byte) ((pixel >> 8) & 0xFF));
+					pixels.put((byte) (pixel & 0xFF));
+					pixels.put((byte) ((pixel >> 24) & 0xFF));
+				}
+			pixels.flip();
+
+			id = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0, GL11.GL_RGBA,
+					GL11.GL_UNSIGNED_BYTE, pixels);
+			
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+
+			return this;
+		} else
+			return null;
+	}
+
+	public void bindToTextureUnit(int texUnit) {
+		GL13.glActiveTexture(GL13.GL_TEXTURE0 + texUnit);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+	}
+	
+	@Override
+	public void delete() {
+		GL11.glDeleteTextures(id);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+	
+	public static void cleanUp() {
+		for(Texture tex : textures)
+			tex.delete();
+	}
+}
diff --git a/renderEngine/ns/openglObjects/TexturedVAO.java b/renderEngine/ns/openglObjects/TexturedVAO.java
new file mode 100644
index 0000000..78a81da
--- /dev/null
+++ b/renderEngine/ns/openglObjects/TexturedVAO.java
@@ -0,0 +1,28 @@
+package ns.openglObjects;
+
+public class TexturedVAO extends VAO {
+
+	private Texture texture;
+
+	public TexturedVAO(Texture texture, VAO vao) {
+		super(vao.getId(), vao.getVertexCount(), vao.getBuffers(), vao.hasIndices());
+		this.texture = texture;
+	}
+
+	public Texture getTexture() {
+		return texture;
+	}
+	
+	@Override
+	public void render() {
+		bind();
+		batchRenderCall();
+		unbind();
+	}
+	
+	@Override
+	public void bind() {
+		super.bind();
+		texture.bindToTextureUnit(0);
+	}
+}
diff --git a/renderEngine/ns/openglObjects/VAO.java b/renderEngine/ns/openglObjects/VAO.java
new file mode 100644
index 0000000..2a7f2b7
--- /dev/null
+++ b/renderEngine/ns/openglObjects/VAO.java
@@ -0,0 +1,118 @@
+package ns.openglObjects;
+
+import java.util.Map;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL30;
+
+public class VAO implements IOpenGLObject, IRenderable {
+	private static int nextId = 1;
+	
+	private int id;
+	private int vertexCount;
+	private Map<Integer, Integer> vbos;
+
+	private boolean hasIndices;
+
+	public VAO(int id, int vertexCount, Map<Integer, Integer> current, boolean hasIndices) {
+		this.id = id;
+		this.vertexCount = vertexCount;
+		this.vbos = current;
+		this.hasIndices = hasIndices;
+	}
+
+	public VAO() {
+	}
+
+	public int getId() {
+		return id;
+	}
+
+	public int getVertexCount() {
+		return vertexCount;
+	}
+
+	public void setId(int id) {
+		this.id = id;
+	}
+
+	public void setVertexCount(int vertexCount) {
+		this.vertexCount = vertexCount;
+	}
+
+	public void setVbos(Map<Integer, Integer> vbos) {
+		this.vbos = vbos;
+	}
+	
+	public void setHasIndices(boolean hasIndices) {
+		this.hasIndices = hasIndices;
+	}
+
+	public void cleanUp() {
+		GL30.glDeleteVertexArrays(id);
+		for (int buffer : vbos.values())
+			GL15.glDeleteBuffers(buffer);
+	}
+
+	public Map<Integer, Integer> getBuffers() {
+		return vbos;
+	}
+
+	public void bind() {
+		GL30.glBindVertexArray(id);
+		for (int attn : vbos.keySet())
+			GL20.glEnableVertexAttribArray(attn);
+	}
+
+	public void unbind() {
+		for (int attn : vbos.keySet())
+			GL20.glDisableVertexAttribArray(attn);
+		GL30.glBindVertexArray(0);
+	}
+
+	public static int getNext() {
+		return nextId;
+	}
+
+	public static void addOneToNext() {
+		nextId = nextId + 1;
+	}
+
+	@Override
+	public VAO create() {
+		return this;
+	}
+
+	@Override
+	public void delete() {
+		GL30.glDeleteVertexArrays(id);
+		for (int buffer : vbos.values())
+			GL15.glDeleteBuffers(buffer);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+
+	@Override
+	public void render() {
+		bind();
+		batchRenderCall();
+		unbind();
+	}
+
+	@Override
+	public void batchRenderCall() {
+		if(hasIndices)
+			GL11.glDrawElements(GL11.GL_TRIANGLES, vertexCount, GL11.GL_UNSIGNED_INT, 0);
+		else
+			GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, vertexCount);
+	}
+
+	public boolean hasIndices() {
+		return hasIndices;
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/openglObjects/VBO.java b/renderEngine/ns/openglObjects/VBO.java
new file mode 100644
index 0000000..69ce099
--- /dev/null
+++ b/renderEngine/ns/openglObjects/VBO.java
@@ -0,0 +1,30 @@
+package ns.openglObjects;
+
+import org.lwjgl.opengl.GL15;
+
+public class VBO implements IOpenGLObject {
+	private final int id;
+
+	public VBO(int id) {
+		this.id = id;
+	}
+
+	public int getId() {
+		return id;
+	}
+
+	@Override
+	public IOpenGLObject create() {
+		return this;
+	}
+
+	@Override
+	public void delete() {
+		GL15.glDeleteBuffers(id);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+}
diff --git a/renderEngine/ns/openglWorkers/DataPacking.java b/renderEngine/ns/openglWorkers/DataPacking.java
new file mode 100644
index 0000000..881b962
--- /dev/null
+++ b/renderEngine/ns/openglWorkers/DataPacking.java
@@ -0,0 +1,136 @@
+package ns.openglWorkers;
+
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL30;
+
+import ns.openglObjects.VAO;
+import ns.openglObjects.VBO;
+import ns.parallelComputing.CreateVAORequest;
+import ns.parallelComputing.ThreadMaster;
+import ns.parallelComputing.VAOUpdateRequest;
+
+public class DataPacking {
+	private static final Map<Integer, Map<Integer, Integer>> vaos = new HashMap<>();
+	private static final List<Integer> vbos = new ArrayList<>();
+
+	public static VAO storeDataInVAO(VBOData... data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			int vaoId = GL30.glGenVertexArrays(), vertexCount = -1;
+			boolean hasIndices = false;
+			Map<Integer, Integer> current = new HashMap<>();
+			vaos.put(vaoId, current);
+			GL30.glBindVertexArray(vaoId);
+			for (VBOData d : data) {
+				int vboId = GL15.glGenBuffers();
+				current.put(d.getAttributeNumber(), vboId);
+				VBO vbo = new VBO(vboId);
+				d.store(vbo);
+				if (d.isIndices()) {
+					hasIndices = true;
+					vertexCount = d.getLength();
+				}
+			}
+			if (vertexCount == -1)
+				vertexCount = data[0].getLength() / data[0].getDimensions();
+			GL30.glBindVertexArray(0);
+			return new VAO(vaoId, vertexCount, current, hasIndices);
+		} else {
+			VAO target = new VAO();
+			ThreadMaster.getThread("main thread")
+					.setToCarryOutRequest(new CreateVAORequest("create vao", data, target));
+			return target;
+		}
+	}
+
+	public static void cleanUp() {
+		for (int vao : vaos.keySet()) {
+			GL30.glDeleteVertexArrays(vao);
+			for (int vbo : vaos.get(vao).values())
+				GL15.glDeleteBuffers(vbo);
+		}
+		for (int vbo : vbos)
+			GL15.glDeleteBuffers(vbo);
+	}
+
+	public static void replace(VAO model, int attn, float[] data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vaos.get(model.getId()).get(attn));
+			FloatBuffer dt = storeDataInFloatBuffer(data);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, 0, dt);
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+		} else {
+			ThreadMaster.getThread("main thread").setToCarryOutRequest(
+					new VAOUpdateRequest("update vao", new VBOUpdateData(data).withAttToWriteTo(attn), model));
+		}
+	}
+
+	public static void replace(VAO model, int attn, int[] data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vaos.get(model.getId()).get(attn));
+			IntBuffer dt = storeDataInIntBuffer(data);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, 0, dt);
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+		} else {
+			ThreadMaster.getThread("main thread").setToCarryOutRequest(
+					new VAOUpdateRequest("update vao", new VBOUpdateData(data).withAttToWriteTo(attn), model));
+		}
+	}
+
+	public static void replace(VAO model, int attn, byte[] data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vaos.get(model.getId()).get(attn));
+			ByteBuffer dt = storeDataInByteBuffer(data);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, 0, dt);
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+		} else {
+			ThreadMaster.getThread("main thread").setToCarryOutRequest(
+					new VAOUpdateRequest("update vao", new VBOUpdateData(data).withAttToWriteTo(attn), model));
+		}
+	}
+
+	public static void createVAOAndStore(VAO vao, VBOData... data) {
+		int vaoId = GL30.glGenVertexArrays(), vertexCount = -1;
+		boolean hasIndices = false;
+		Map<Integer, Integer> current = new HashMap<>();
+		vaos.put(vaoId, current);
+		GL30.glBindVertexArray(vaoId);
+		for (VBOData d : data) {
+			int vboId = GL15.glGenBuffers();
+			current.put(d.getAttributeNumber(), vboId);
+			VBO vbo = new VBO(vboId);
+			d.store(vbo);
+			if (d.isIndices()) {
+				vertexCount = d.getLength();
+				hasIndices = true;
+			}
+		}
+		if (vertexCount == -1)
+			vertexCount = data[0].getLength() / data[0].getDimensions();
+		GL30.glBindVertexArray(0);
+		vao.setId(vaoId);
+		vao.setVertexCount(vertexCount);
+		vao.setVbos(current);
+		vao.setHasIndices(hasIndices);
+	}
+
+	private static FloatBuffer storeDataInFloatBuffer(float[] data) {
+		return (FloatBuffer) BufferUtils.createFloatBuffer(data.length).put(data).flip();
+	}
+
+	private static IntBuffer storeDataInIntBuffer(int[] data) {
+		return (IntBuffer) BufferUtils.createIntBuffer(data.length).put(data).flip();
+	}
+
+	private static ByteBuffer storeDataInByteBuffer(byte[] data) {
+		return (ByteBuffer) BufferUtils.createByteBuffer(data.length).put(data).flip();
+	}
+}
diff --git a/renderEngine/ns/openglWorkers/ModelsLibrary.java b/renderEngine/ns/openglWorkers/ModelsLibrary.java
new file mode 100644
index 0000000..6598911
--- /dev/null
+++ b/renderEngine/ns/openglWorkers/ModelsLibrary.java
@@ -0,0 +1,30 @@
+package ns.openglWorkers;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import ns.openglObjects.VAO;
+import obj.OBJLoader;
+
+public class ModelsLibrary {
+	private static Map<String, VAO> models = new HashMap<>();
+	
+	public static VAO createEmptyVAO(String objFile) {
+		return getModel(objFile);
+	}
+	
+	public static void cleanUp() {
+		for(VAO vao : models.values()) {
+			vao.cleanUp();
+		}
+	}
+
+	public static VAO getModel(String name) {
+		VAO model = models.get(name);
+		if(model == null) {
+			model = OBJLoader.loadObj(name);
+			models.put(name, model);
+		}
+		return model;
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/openglWorkers/VBOData.java b/renderEngine/ns/openglWorkers/VBOData.java
new file mode 100644
index 0000000..6461cc6
--- /dev/null
+++ b/renderEngine/ns/openglWorkers/VBOData.java
@@ -0,0 +1,121 @@
+package ns.openglWorkers;
+
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20;
+
+import ns.openglObjects.VBO;
+
+public class VBOData {
+	private final float[] dataf;
+	private final int[] datai;
+	private final byte[] datab;
+	
+	private final int type;
+	private int attNumber = -1;
+	private boolean isIndices;
+	private int gl_type;
+	private int dimensions;
+	private int usage = GL15.GL_STATIC_DRAW;
+	
+	public VBOData(float[] data) {
+		dataf = data;
+		datai = null;
+		datab = null;
+		type = 0;
+		gl_type = GL11.GL_FLOAT;
+	}
+	
+	public VBOData(int[] data) {
+		dataf = null;
+		datai = data;
+		datab = null;
+		type = 1;
+		gl_type = GL11.GL_INT;
+	}
+	
+	public VBOData(byte[] data) {
+		dataf = null;
+		datai = null;
+		datab = data;
+		type = 2;
+		gl_type = GL11.GL_BYTE;
+	}
+	
+	public VBOData withUsage(int usage) {
+		this.usage = usage;
+		return this;
+	}
+	
+	public VBOData withDimensions(int dimensions) {
+		this.dimensions = dimensions;
+		return this;
+	}
+	
+	public VBOData isIndices(boolean isIndices) {
+		this.isIndices = isIndices;
+		return this;
+	}
+	
+	public VBOData withAttributeNumber(int attributeNumber) {
+		this.attNumber = attributeNumber;
+		return this;
+	}
+	
+	public void store(VBO vbo) {
+		int type = (isIndices ? GL15.GL_ELEMENT_ARRAY_BUFFER : GL15.GL_ARRAY_BUFFER);
+		GL15.glBindBuffer(type, vbo.getId());
+		if(this.type == 0) {
+			FloatBuffer data = storeDataInFloatBuffer(dataf);
+			GL15.glBufferData(type, data, usage);
+			data.clear();
+		}
+		else if(this.type == 1) {
+			IntBuffer data = storeDataInIntBuffer(datai);
+			GL15.glBufferData(type, data, usage);
+			data.clear();
+		}
+		else if(this.type == 2) {
+			ByteBuffer data = storeDataInByteBuffer(datab);
+			GL15.glBufferData(type, data, usage);
+			data.clear();
+		}
+		if(attNumber != -1) {
+			GL20.glVertexAttribPointer(attNumber, dimensions, this.gl_type, false, 0, 0);
+			GL15.glBindBuffer(type, 0);
+		}
+	}
+
+	private FloatBuffer storeDataInFloatBuffer(float[] data) {
+		return (FloatBuffer) BufferUtils.createFloatBuffer(data.length).put(data).flip();
+	}
+
+	private IntBuffer storeDataInIntBuffer(int[] data) {
+		return (IntBuffer) BufferUtils.createIntBuffer(data.length).put(data).flip();
+	}
+
+	private ByteBuffer storeDataInByteBuffer(byte[] data) {
+		return (ByteBuffer) BufferUtils.createByteBuffer(data.length).put(data).flip();
+	}
+
+	public boolean isIndices() {
+		return isIndices;
+	}
+
+	public int getLength() {
+		return (dataf != null ? dataf.length : (datab != null ? datab.length : datai.length));
+	}
+
+	public int getDimensions() {
+		return dimensions;
+	}
+
+	public int getAttributeNumber() {
+		return attNumber;
+	}
+}
diff --git a/renderEngine/ns/openglWorkers/VBOUpdateData.java b/renderEngine/ns/openglWorkers/VBOUpdateData.java
new file mode 100644
index 0000000..2ddc011
--- /dev/null
+++ b/renderEngine/ns/openglWorkers/VBOUpdateData.java
@@ -0,0 +1,78 @@
+package ns.openglWorkers;
+
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL15;
+
+import ns.openglObjects.VAO;
+
+public class VBOUpdateData {
+	private final float[] dataf;
+	private final int[] datai;
+	private final byte[] datab;
+	private final int type;
+	
+	private int attToWriteTo;
+	private long begin;
+
+	public VBOUpdateData(float[] data) {
+		this.dataf = data;
+		this.datai = null;
+		this.datab = null;
+		type = 0;
+	}
+
+	public VBOUpdateData(int[] data) {
+		this.dataf = null;
+		this.datai = data;
+		this.datab = null;
+		type = 1;
+	}
+
+	public VBOUpdateData(byte[] data) {
+		this.dataf = null;
+		this.datai = null;
+		this.datab = data;
+		type = 2;
+	}
+	
+	public VBOUpdateData withAttToWriteTo(int attToWriteTo) {
+		this.attToWriteTo = attToWriteTo;
+		return this;
+	}
+	
+	public void updateWithin(VAO vao) {
+		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vao.getBuffers().get(attToWriteTo));
+		if(type == 0) {
+			FloatBuffer buffer = storeDataInFloatBuffer(dataf);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, begin, buffer);
+			buffer.clear();
+		}
+		if(type == 1) {
+			IntBuffer buffer = storeDataInIntBuffer(datai);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, begin, buffer);
+			buffer.clear();
+		}
+		if(type == 2) {
+			ByteBuffer buffer = storeDataInByteBuffer(datab);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, begin, buffer);
+			buffer.clear();
+		}
+		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+	}
+
+	private static FloatBuffer storeDataInFloatBuffer(float[] data) {
+		return (FloatBuffer) BufferUtils.createFloatBuffer(data.length).put(data).flip();
+	}
+
+	private static IntBuffer storeDataInIntBuffer(int[] data) {
+		return (IntBuffer) BufferUtils.createIntBuffer(data.length).put(data).flip();
+	}
+
+	private static ByteBuffer storeDataInByteBuffer(byte[] data) {
+		return (ByteBuffer) BufferUtils.createByteBuffer(data.length).put(data).flip();
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/renderers/Blurer.java b/renderEngine/ns/renderers/Blurer.java
new file mode 100644
index 0000000..3083977
--- /dev/null
+++ b/renderEngine/ns/renderers/Blurer.java
@@ -0,0 +1,108 @@
+package ns.renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL30;
+
+import ns.exceptions.FBOAttachmentException;
+import ns.openglObjects.FBO;
+import ns.openglObjects.VAO;
+import ns.shaders.HBlurShader;
+import ns.shaders.VBlurShader;
+
+public class Blurer extends EffectRenderer {
+
+	private FBO helper;
+	private VBlurer vblurer;
+	private HBlurer hblurer;
+
+	public Blurer(VAO quad) {
+		super(null, quad);
+		helper = new FBO(1200, 800, (FBO.COLOR_TEXTURE)).create();
+		vblurer = new VBlurer(new VBlurShader(), quad);
+		hblurer = new HBlurer(new HBlurShader(), quad);
+	}
+
+	@Override
+	public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+		if ((source.getConfig() & 1) != 1)
+			throw new FBOAttachmentException(source);
+		hblurer.apply(source, helper);
+		vblurer.apply(helper, destination);
+	}
+
+	@Override
+	public void cleanUp() {
+		helper.cleanUp();
+		vblurer.cleanUp();
+		hblurer.cleanUp();
+	}
+
+	private class VBlurer extends EffectRenderer {
+		private VBlurShader shader;
+
+		VBlurer(VBlurShader shader, VAO quad) {
+			super(shader, quad);
+			this.shader = shader;
+		}
+
+		@Override
+		public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+			if (destination != null) {
+				destination.bind();
+			} else {
+				FBO.unbind();
+			}
+			MasterRenderer.prepare();
+
+			shader.start();
+			shader.size.load(source.getSize());
+
+			GL30.glBindVertexArray(quad.getId());
+			GL20.glEnableVertexAttribArray(0);
+
+			source.getTex().bindToTextureUnit(0);
+
+			GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+
+			GL20.glDisableVertexAttribArray(0);
+			GL30.glBindVertexArray(0);
+
+			shader.stop();
+
+			if (destination != null)
+				FBO.unbind();
+		}
+	}
+
+	private class HBlurer extends EffectRenderer {
+		private HBlurShader shader;
+
+		HBlurer(HBlurShader shader, VAO quad) {
+			super(shader, quad);
+			this.shader = shader;
+		}
+
+		@Override
+		public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+			destination.bind();
+			MasterRenderer.prepare();
+
+			shader.start();
+			shader.size.load(source.getSize());
+
+			GL30.glBindVertexArray(quad.getId());
+			GL20.glEnableVertexAttribArray(0);
+
+			source.getTex().bindToTextureUnit(0);
+
+			GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+			GL20.glDisableVertexAttribArray(0);
+			GL30.glBindVertexArray(0);
+
+			shader.stop();
+
+			FBO.unbind();
+		}
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/renderers/DepthFieldBlurRenderer.java b/renderEngine/ns/renderers/DepthFieldBlurRenderer.java
new file mode 100644
index 0000000..a24efb7
--- /dev/null
+++ b/renderEngine/ns/renderers/DepthFieldBlurRenderer.java
@@ -0,0 +1,55 @@
+package ns.renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Vector2f;
+
+import ns.exceptions.FBOAttachmentException;
+import ns.openglObjects.FBO;
+import ns.openglObjects.Texture;
+import ns.openglObjects.VAO;
+import ns.shaders.DepthFieldBlurShader;
+
+public class DepthFieldBlurRenderer extends EffectRenderer {
+	private DepthFieldBlurShader shader;
+	private Texture bluredTexture;
+
+	public DepthFieldBlurRenderer(DepthFieldBlurShader shader, VAO quad) {
+		super(shader, quad);
+		this.shader = shader;
+		shader.start();
+		shader.connectTextureUnits();
+		shader.nearFarPlanes.load(new Vector2f(MasterRenderer.NEAR_PLANE, MasterRenderer.FAR_PLANE));
+		shader.stop();
+	}
+
+	public void setBluredTexture(Texture bluredTexture) {
+		this.bluredTexture = bluredTexture;
+	}
+
+	@Override
+	public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+		if (destination != null) {
+			destination.bind();
+		} else
+			FBO.unbind();
+		MasterRenderer.prepare();
+		if ((source.getConfig() & 3) != 3)
+			throw new FBOAttachmentException(
+					"The source got wrong configuration:" + source + " - configuration:" + source.getConfig());
+
+		shader.start();
+		
+		source.getTex().bindToTextureUnit(0);
+		source.getDepthTex().bindToTextureUnit(1);
+		bluredTexture.bindToTextureUnit(2);
+		
+		quad.bind();
+		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+		quad.unbind();
+
+		shader.stop();
+
+		if (destination != null)
+			FBO.unbind();
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/renderers/EffectRenderer.java b/renderEngine/ns/renderers/EffectRenderer.java
new file mode 100644
index 0000000..664c9ab
--- /dev/null
+++ b/renderEngine/ns/renderers/EffectRenderer.java
@@ -0,0 +1,22 @@
+package ns.renderers;
+
+import ns.exceptions.FBOAttachmentException;
+import ns.openglObjects.FBO;
+import ns.openglObjects.VAO;
+import ns.shaders.ShaderProgram;
+
+public abstract class EffectRenderer {
+	protected ShaderProgram shader;
+	protected VAO quad;
+	
+	public EffectRenderer(ShaderProgram shader, VAO quad) {
+		this.shader = shader;
+		this.quad = quad;
+	}
+	
+	public void cleanUp() {
+		shader.cleanUp();
+	}
+	
+	public abstract void apply(FBO source, FBO destination) throws FBOAttachmentException;
+}
\ No newline at end of file
diff --git a/renderEngine/ns/renderers/GUIRenderer.java b/renderEngine/ns/renderers/GUIRenderer.java
new file mode 100644
index 0000000..936b505
--- /dev/null
+++ b/renderEngine/ns/renderers/GUIRenderer.java
@@ -0,0 +1,52 @@
+package ns.renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.openglObjects.Texture;
+import ns.openglObjects.VAO;
+import ns.shaders.GUIShader;
+import ns.ui.GUITexture;
+import ns.utils.Maths;
+
+public class GUIRenderer {
+	public static final Vector3f TRANSPARENCY = new Vector3f(1.0f, 0.016f, 0.839f);
+	private GUIShader shader;
+	private VAO quad;
+	
+	public GUIRenderer(GUIShader shader, VAO quad) {
+		this.shader = shader;
+		this.quad = quad;
+	}
+	
+	public void render(GUITexture texture) {
+		bind();
+		batchRenderCall(texture);
+		unbind();
+	}
+	
+	protected void batchRenderCall(GUITexture texture) {
+		texture.getTexture().bindToTextureUnit(0);
+		shader.transformationMatrix.load(Maths.createTransformationMatrix(texture.getCenter(), texture.getScale()));
+		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+	}
+	
+	protected void batchRenderCall(Vector2f center, Vector2f scale, Texture tex) {
+		tex.bindToTextureUnit(0);
+		shader.transformationMatrix.load(Maths.createTransformationMatrix(center, scale));
+		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+	}
+	
+	protected void bind() {
+		GL11.glDisable(GL11.GL_DEPTH_TEST);
+		shader.start();
+		quad.bind();
+	}
+	
+	protected void unbind() {
+		quad.unbind();
+		shader.stop();
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/renderers/MainMenuRenderer.java b/renderEngine/ns/renderers/MainMenuRenderer.java
new file mode 100644
index 0000000..b436da5
--- /dev/null
+++ b/renderEngine/ns/renderers/MainMenuRenderer.java
@@ -0,0 +1,49 @@
+package ns.renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Vector2f;
+
+import ns.entities.Entity;
+import ns.mainMenu.MainMenu;
+import ns.mainMenu.MainMenuButton;
+import ns.openglObjects.FBO;
+import ns.shaders.MenuDNAShader;
+import ns.utils.Maths;
+
+public class MainMenuRenderer {
+	private GUIRenderer guiRenderer;
+	private FBO DNAFBO;
+	private MenuDNAShader shader;
+
+	public MainMenuRenderer(GUIRenderer guiRenderer) {
+		this.guiRenderer = guiRenderer;
+		DNAFBO = new FBO(600, 800, FBO.COLOR_TEXTURE | FBO.DEPTH_RENDERBUFFER).create();
+		shader = new MenuDNAShader();
+		shader.start();
+		shader.projectionMatrix.load(MasterRenderer.instance.getProjectionMatrix());
+		shader.stop();
+	}
+
+	public void render(MainMenu menu) {
+		DNAFBO.bind();
+		GL11.glClearColor(GUIRenderer.TRANSPARENCY.x, GUIRenderer.TRANSPARENCY.y, GUIRenderer.TRANSPARENCY.z, 0f);
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+		shader.start();
+		Entity DNA = menu.getDNA();
+		DNA.getModel().bind();
+		shader.transformationMatrix.load(Maths.createTreansformationMatrix(DNA));
+		DNA.getModel().batchRenderCall();
+		DNA.getModel().unbind();
+		shader.stop();
+		FBO.unbind();
+		guiRenderer.bind();
+		guiRenderer.batchRenderCall(new Vector2f(-0.8f, 0.0f), new Vector2f(0.4f, 1f), DNAFBO.getTex());
+		for (MainMenuButton button : menu.getButtons())
+			guiRenderer.batchRenderCall(button.getCenter(), button.getScale(), button.getTex());
+		guiRenderer.unbind();
+	}
+
+	public void cleanUp() {
+		shader.cleanUp();
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/renderers/MasterRenderer.java b/renderEngine/ns/renderers/MasterRenderer.java
new file mode 100644
index 0000000..99f9c32
--- /dev/null
+++ b/renderEngine/ns/renderers/MasterRenderer.java
@@ -0,0 +1,173 @@
+package ns.renderers;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import ns.camera.ICamera;
+import ns.display.DisplayManager;
+import ns.entities.Entity;
+import ns.entities.Light;
+import ns.openglObjects.VAO;
+import ns.openglWorkers.DataPacking;
+import ns.openglWorkers.VBOData;
+import ns.shaders.StaticShader;
+import ns.shaders.TerrainShader;
+import ns.terrain.Terrain;
+import ns.utils.Maths;
+import ns.world.World;
+
+public class MasterRenderer {
+	private static final float FOV = 70;
+	protected static final float NEAR_PLANE = 0.1f, FAR_PLANE = 1000f;
+	protected static final float RED = 0.435f, GREEN = 0.812f, BLUE = 1.0f;
+	protected static final Vector2f FOG_VALUES = new Vector2f(0.0015f, 5.0f);
+	
+	private static final float TIME_SPEED = 1f;
+	private static final float INCREASE_LIMIT = 1f;
+
+	public static final List<VAO> standardModels = new ArrayList<>();
+	public static MasterRenderer instance;
+
+	public static void initStandardModels() {
+		VAO vao = DataPacking.storeDataInVAO(
+				new VBOData(new float[] { -1, 1, -1, -1, 1, 1, 1, -1, }).withAttributeNumber(0).withDimensions(2));
+		standardModels.add(vao);
+	}
+
+	private StaticShader shader = new StaticShader();
+	private Renderer renderer;
+
+	private TerrainShader terrainShader = new TerrainShader();
+	private TerrainRenderer terrainRenderer;
+
+	private Matrix4f projectionMatrix;
+
+	private Map<VAO, List<Entity>> entities = new HashMap<>();
+
+	private Terrain terrain;
+	
+	private float time;
+	private boolean inc;
+
+	public MasterRenderer() {
+		instance = this;
+		createProjectionMatrix();
+		renderer = new Renderer(shader, projectionMatrix);
+		terrainRenderer = new TerrainRenderer(terrainShader, projectionMatrix);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+	}
+
+	public static void prepare() {
+		GL11.glClearColor(RED, GREEN, BLUE, 1.0f);
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+	}
+
+	public void renderScene(World world, ICamera camera, Light light, Vector4f clipPlane, boolean updateTime) {
+		prepare();
+		for (Entity e : world.getEntities())
+			process(e);
+		process(world.getTerrain());
+		render(camera, light, clipPlane, updateTime);
+	}
+
+	public void process(Entity e) {
+		VAO model = e.getModel();
+		List<Entity> bash = entities.get(model);
+		if (bash == null) {
+			bash = new ArrayList<>();
+			entities.put(model, bash);
+		}
+		bash.add(e);
+	}
+
+	public void process(Terrain terrain) {
+		this.terrain = terrain;
+	}
+
+	public void render(ICamera camera, Light sun, Vector4f clipPlane, boolean updateTime) {
+		Matrix4f viewMatrix = Maths.createViewMatrix(camera);
+		shader.start();
+		if(updateTime) {
+			time += TIME_SPEED * DisplayManager.getFrameTimeSeconds() * (inc ? 1f : -1f);
+			time = time(time);
+			shader.time.load(time);
+		}
+		shader.skyColor.load(new Vector3f(RED, GREEN, BLUE));
+		shader.fogValues.load(FOG_VALUES);
+		shader.light.load(sun);
+		shader.viewMatrix.load(viewMatrix);
+		shader.clipPlane.load(clipPlane);
+		renderer.render(entities);
+		shader.stop();
+		entities.clear();
+
+		terrainShader.start();
+		terrainShader.skyColor.load(new Vector3f(RED, GREEN, BLUE));
+		terrainShader.fogValues.load(FOG_VALUES);
+		terrainShader.light.load(sun);
+		terrainShader.viewMatrix.load(viewMatrix);
+		terrainShader.clipPlane.load(clipPlane);
+		terrainRenderer.render(terrain);
+		terrainShader.stop();
+		terrain = null;
+	}
+
+	private float time(float time) {
+		if(time > INCREASE_LIMIT) {
+			time = INCREASE_LIMIT;
+			inc = false;
+		}
+		else if(time < 0) {
+			time = 0;
+			inc = true;
+		}
+		return time;
+	}
+
+	private void createProjectionMatrix() {
+		projectionMatrix = new Matrix4f();
+		float aspectRatio = (float) Display.getWidth() / (float) Display.getHeight();
+
+		float y_scale = 1f / (float) Math.tan(FOV / 2f);
+		float x_scale = y_scale / aspectRatio;
+		float frustum_length = FAR_PLANE - NEAR_PLANE;
+
+		projectionMatrix.m00 = x_scale;
+		projectionMatrix.m11 = y_scale;
+		projectionMatrix.m22 = -((FAR_PLANE + NEAR_PLANE) / frustum_length);
+		projectionMatrix.m23 = -1;
+		projectionMatrix.m32 = -((2 * NEAR_PLANE * FAR_PLANE) / frustum_length);
+		projectionMatrix.m33 = 0;
+	}
+
+	public void cleanUp() {
+		shader.cleanUp();
+		terrainShader.cleanUp();
+	}
+
+	public Matrix4f getProjectionMatrix() {
+		return projectionMatrix;
+	}
+
+	public void prepareAndProcess(World world) {
+		prepare();
+		for(Entity e : world.getEntities())
+			process(e);
+		process(world.getTerrain());
+	}
+
+	public void process(World world) {
+		for(Entity e : world.getEntities())
+			process(e);
+		process(world.getTerrain());
+	}
+}
diff --git a/renderEngine/ns/renderers/Renderer.java b/renderEngine/ns/renderers/Renderer.java
new file mode 100644
index 0000000..7aee1c1
--- /dev/null
+++ b/renderEngine/ns/renderers/Renderer.java
@@ -0,0 +1,40 @@
+package ns.renderers;
+
+import java.util.List;
+import java.util.Map;
+
+import org.lwjgl.util.vector.Matrix4f;
+
+import ns.components.CustomColorsComponent;
+import ns.entities.Entity;
+import ns.openglObjects.VAO;
+import ns.shaders.StaticShader;
+import ns.utils.Maths;
+
+public class Renderer {
+
+	private StaticShader shader;
+
+	public Renderer(StaticShader shader, Matrix4f projectionMatrix) {
+		this.shader = shader;
+		shader.start();
+		shader.projectionMatrix.load(projectionMatrix);
+		shader.stop();
+	}
+
+	public void render(Map<VAO, List<Entity>> entities) {
+		for (VAO vao : entities.keySet()) {
+			vao.bind();
+			for (Entity e : entities.get(vao)) {
+				shader.transformationMatrix.load(Maths.createTreansformationMatrix(e));
+				CustomColorsComponent customColors = e.getCustomColors();
+				if(customColors != null)
+					for(int i = 0; i < customColors.getColors().size(); i++) {
+						shader.customColors[i].load(customColors.getColors().get(i));
+					}
+				vao.batchRenderCall();
+			}
+			vao.unbind();
+		}
+	}
+}
diff --git a/renderEngine/ns/renderers/TerrainRenderer.java b/renderEngine/ns/renderers/TerrainRenderer.java
new file mode 100644
index 0000000..c3a77c2
--- /dev/null
+++ b/renderEngine/ns/renderers/TerrainRenderer.java
@@ -0,0 +1,29 @@
+package ns.renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.openglObjects.VAO;
+import ns.shaders.TerrainShader;
+import ns.terrain.Terrain;
+import ns.utils.Maths;
+
+public class TerrainRenderer {
+	private TerrainShader shader;
+
+	public TerrainRenderer(TerrainShader shader, Matrix4f projectionMatrix) {
+		this.shader = shader;
+		shader.start();
+		this.shader.projectionMatrix.load(projectionMatrix);
+		shader.stop();
+	}
+	
+	public void render(Terrain terrain) {
+		VAO vao = terrain.getModel();
+		vao.bind();
+		shader.transformationMatrix.load(Maths.createTransformationMatrix(new Vector3f(terrain.getX(), 0, terrain.getZ()), 0, 0, 0, 1));
+		GL11.glDrawElements(GL11.GL_TRIANGLES, vao.getVertexCount(), GL11.GL_UNSIGNED_INT, 0);
+		vao.unbind();
+	}
+}
diff --git a/renderEngine/ns/renderers/WaterRenderer.java b/renderEngine/ns/renderers/WaterRenderer.java
new file mode 100644
index 0000000..38d189d
--- /dev/null
+++ b/renderEngine/ns/renderers/WaterRenderer.java
@@ -0,0 +1,57 @@
+package ns.renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.camera.ICamera;
+import ns.entities.Light;
+import ns.openglObjects.VAO;
+import ns.shaders.WaterShader;
+import ns.utils.Maths;
+import ns.water.WaterFBOs;
+import ns.water.WaterTile;
+
+public class WaterRenderer {
+	private static final float WAVE_SPEED = 0.003f;
+
+	private WaterShader shader;
+	private float waveTime;
+
+	public WaterRenderer(WaterShader shader, Matrix4f projectionMatrix) {
+		this.shader = shader;
+		shader.start();
+		shader.projectionMatrix.load(projectionMatrix);
+		shader.connectTextureUnits();
+		shader.one.load(WaterTile.getTileSize() / (float) WaterTile.getVertexCount());
+		shader.nearFarPlanes.load(new Vector2f(MasterRenderer.NEAR_PLANE, MasterRenderer.FAR_PLANE));
+		shader.stop();
+	}
+
+	public void render(WaterTile water, ICamera camera, WaterFBOs fbos, Light sun) {
+		shader.start();
+
+		waveTime += WAVE_SPEED;
+		shader.waveTime.load(waveTime);
+
+		shader.skyColor.load(new Vector3f(MasterRenderer.RED, MasterRenderer.GREEN, MasterRenderer.BLUE));
+		shader.fogValues.load(MasterRenderer.FOG_VALUES);
+
+		shader.light.load(sun);
+
+		shader.viewMatrix.load(Maths.createViewMatrix(camera));
+		shader.cameraPosition.load(camera.getPosition());
+
+		fbos.getReflexion().getTex().bindToTextureUnit(0);
+		fbos.getRefraction().getTex().bindToTextureUnit(1);
+		fbos.getRefraction().getDepthTex().bindToTextureUnit(2);
+
+		VAO model = water.getModel();
+		model.bind();
+		GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, model.getVertexCount());
+		model.unbind();
+
+		shader.stop();
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/DepthFieldBlurShader.java b/renderEngine/ns/shaders/DepthFieldBlurShader.java
new file mode 100644
index 0000000..3511a9d
--- /dev/null
+++ b/renderEngine/ns/shaders/DepthFieldBlurShader.java
@@ -0,0 +1,23 @@
+package ns.shaders;
+
+public class DepthFieldBlurShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/depthFieldBlur/vertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/depthFieldBlur/fragment.glsl";
+	
+	private UniformSampler2D colorTexture = locator.locateUniformSampler2D("colorTexture");
+	private UniformSampler2D depthTexture = locator.locateUniformSampler2D("depthTexture");
+	private UniformSampler2D bluredTexture = locator.locateUniformSampler2D("bluredTexture");
+	
+	public UniformVec2 nearFarPlanes = locator.locateUniformVec2("nearFarPlanes");
+
+	public DepthFieldBlurShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+	
+	public void connectTextureUnits() {
+		colorTexture.load(0);
+		depthTexture.load(1);
+		bluredTexture.load(2);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/GUIShader.java b/renderEngine/ns/shaders/GUIShader.java
new file mode 100644
index 0000000..525f311
--- /dev/null
+++ b/renderEngine/ns/shaders/GUIShader.java
@@ -0,0 +1,14 @@
+package ns.shaders;
+
+public class GUIShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/guis/guiVertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/guis/guiFragment.glsl";
+	
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+
+	public GUIShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+
+}
diff --git a/renderEngine/ns/shaders/HBlurShader.java b/renderEngine/ns/shaders/HBlurShader.java
new file mode 100644
index 0000000..3f433e6
--- /dev/null
+++ b/renderEngine/ns/shaders/HBlurShader.java
@@ -0,0 +1,13 @@
+package ns.shaders;
+
+public class HBlurShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/blur/vhshader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/blur/fshader.glsl";
+	
+	public UniformVec2 size = locator.locateUniformVec2("size");
+
+	public HBlurShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/MenuDNAShader.java b/renderEngine/ns/shaders/MenuDNAShader.java
new file mode 100644
index 0000000..566d3e3
--- /dev/null
+++ b/renderEngine/ns/shaders/MenuDNAShader.java
@@ -0,0 +1,14 @@
+package ns.shaders;
+
+public class MenuDNAShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/menuDNA/vertexShader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/menuDNA/fragmentShader.glsl";
+
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+	
+	public MenuDNAShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/ShaderLib.java b/renderEngine/ns/shaders/ShaderLib.java
new file mode 100644
index 0000000..046ad67
--- /dev/null
+++ b/renderEngine/ns/shaders/ShaderLib.java
@@ -0,0 +1,41 @@
+package ns.shaders;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import ns.utils.GU;
+import res.Resource;
+
+public class ShaderLib {
+	private static final Map<String, String> sources = new HashMap<>();	
+	
+	public static void loadAll() {
+		File shadersPackage = new File("resources/res/shaders");
+		for(File shaderPackage : shadersPackage.listFiles()) {
+			for(File shaderFile : shaderPackage.listFiles()) {
+				Resource resource = new Resource(shaderFile.getPath().replace("resources/", ""));
+				BufferedReader reader = GU.open(resource);
+				String line, source = "";
+				try {
+					while((line = reader.readLine()) != null) {
+						if (line.startsWith("#Struct_Lib.")) {
+							line = StructLib.get(line.replace("#Struct_Lib.", ""));
+						}
+						source += line + "\n";
+					}
+					reader.close();
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
+				sources.put(resource.getLocation(), source);
+			}
+		}
+	}
+	
+	public static String getSource(String shaderName) {
+		return sources.get(shaderName);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/ShaderProgram.java b/renderEngine/ns/shaders/ShaderProgram.java
new file mode 100644
index 0000000..e13288a
--- /dev/null
+++ b/renderEngine/ns/shaders/ShaderProgram.java
@@ -0,0 +1,118 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20;
+
+import ns.openglObjects.IOpenGLObject;
+
+public abstract class ShaderProgram implements IOpenGLObject {
+	private final int programId;
+	private final int vertexShaderId;
+	private final int fragmentShaderId;
+	protected StringBuffer src;
+	protected UniformLocator locator = new UniformLocator(this);
+
+	public ShaderProgram(String VERTEX_SHADER, String FRAGMENT_SHADER) {
+		programId = GL20.glCreateProgram();
+		src = new StringBuffer();
+		vertexShaderId = createShader(VERTEX_SHADER, GL20.GL_VERTEX_SHADER);
+		fragmentShaderId = createShader(FRAGMENT_SHADER, GL20.GL_FRAGMENT_SHADER);
+		GL20.glAttachShader(programId, vertexShaderId);
+		GL20.glAttachShader(programId, fragmentShaderId);
+		preLink();
+		GL20.glLinkProgram(programId);
+		GL20.glValidateProgram(programId);
+		postLink();
+	}
+
+	protected void preLink() {
+	}
+
+	protected void postLink() {
+	}
+
+	protected int variableType(String name) {
+		String[] src = this.src.toString().split("\n");
+		String declarationLine = null;
+		for (String s : src) {
+			String[] lineParts = s.split(" ");
+			if (lineParts[lineParts.length - 1].equals(name + ";")) {
+				declarationLine = s;
+			}
+		}
+		if (declarationLine == null)
+			return -1;
+		String type = declarationLine.split(" ")[declarationLine.split(" ").length - 2];
+		switch (type) {
+		case "float":
+			return UniformVar.TYPE_FLOAT;
+		case "vec2":
+			return UniformVar.TYPE_VEC2;
+		case "vec3":
+			return UniformVar.TYPE_VEC3;
+		case "vec4":
+			return UniformVar.TYPE_VEC4;
+		case "mat4":
+			return UniformVar.TYPE_MAT4;
+		case "int":
+			return UniformVar.TYPE_INT;
+		case "bool":
+			return UniformVar.TYPE_BOOL;
+		case "sampler2D":
+			return UniformVar.TYPE_SAMPLER_2D;
+		case "Light":
+			return UniformVar.TYPE_LIGHT;
+		default:
+			return -1;
+		}
+	}
+
+	protected int getLocation(String name) {
+		return GL20.glGetUniformLocation(programId, name);
+	}
+
+	private int createShader(String shader, int shaderType) {
+		String source = "";
+		String shaderSource = ShaderLib.getSource(shader);
+		source += shaderSource;
+		src.append(shaderSource);
+		int shaderId = GL20.glCreateShader(shaderType);
+		GL20.glShaderSource(shaderId, source);
+		GL20.glCompileShader(shaderId);
+		if (GL20.glGetShaderi(shaderId, GL20.GL_COMPILE_STATUS) == GL11.GL_FALSE) {
+			System.err.println("Error compiling shader :" + shader + ", log:");
+			System.err.print(GL20.glGetShaderInfoLog(shaderId, 500));
+			System.exit(-1);
+		}
+		return shaderId;
+	}
+
+	public void start() {
+		GL20.glUseProgram(programId);
+	}
+
+	public void stop() {
+		GL20.glUseProgram(0);
+	}
+
+	public void cleanUp() {
+		stop();
+		GL20.glDetachShader(programId, vertexShaderId);
+		GL20.glDetachShader(programId, fragmentShaderId);
+		GL20.glDeleteShader(vertexShaderId);
+		GL20.glDeleteShader(fragmentShaderId);
+		GL20.glDeleteProgram(programId);
+	}
+	
+	public ShaderProgram create() {
+		return this;
+	}
+	
+	public void delete() {
+		cleanUp();
+	}
+	
+	public int getID() {
+		return programId;
+	}
+}
diff --git a/renderEngine/ns/shaders/StaticShader.java b/renderEngine/ns/shaders/StaticShader.java
new file mode 100644
index 0000000..f827a2f
--- /dev/null
+++ b/renderEngine/ns/shaders/StaticShader.java
@@ -0,0 +1,30 @@
+package ns.shaders;
+
+import ns.shaders.uniformStructs.UniformFogValues;
+import ns.shaders.uniformStructs.UniformLight;
+
+public class StaticShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/standard/vertexShader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/standard/fragmentShader.glsl";
+
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 viewMatrix = locator.locateUniformMat4("viewMatrix");
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+
+	public UniformLight light = new UniformLight("light", locator);
+
+	public UniformVec4 clipPlane = locator.locateUniformVec4("clipPlane");
+	public UniformVec3[] customColors = { locator.locateUniformVec3("customColors[0]", false),
+			locator.locateUniformVec3("customColors[1]", false), locator.locateUniformVec3("customColors[2]", false) };
+	
+	public UniformVec3 skyColor = locator.locateUniformVec3("skyColor");
+
+	public UniformFogValues fogValues = new UniformFogValues("fogValues", locator);
+	
+	public UniformFloat time = locator.locateUniformFloat("time");
+	
+	public StaticShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
diff --git a/renderEngine/ns/shaders/StructLib.java b/renderEngine/ns/shaders/StructLib.java
new file mode 100644
index 0000000..5fa8e4a
--- /dev/null
+++ b/renderEngine/ns/shaders/StructLib.java
@@ -0,0 +1,43 @@
+package ns.shaders;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import ns.utils.GU;
+import res.Resource;
+
+public class StructLib {
+	private static Map<String, String> structs = new HashMap<>();
+
+	public static void load(Resource resource) {
+		BufferedReader reader = GU.open(resource);
+		try {
+			String line;
+			String currentStructName = null, structBody = null;
+			while((line = reader.readLine()) != null) {
+				if(line.startsWith("}")) {
+					structBody += "};";
+					structs.put(currentStructName, structBody);
+				}
+				else if(line.startsWith("struct ")) {
+					currentStructName = line.split(" ")[1];
+					if(currentStructName.contains("{")) {
+						currentStructName = currentStructName.replace("{", "");
+					}
+					structBody = line + "\n";
+				}
+				else if(!line.equals(""))
+					structBody += line + "\n";
+			}
+			reader.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	static String get(String name) {
+		return structs.get(name);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/TerrainShader.java b/renderEngine/ns/shaders/TerrainShader.java
new file mode 100644
index 0000000..92722e1
--- /dev/null
+++ b/renderEngine/ns/shaders/TerrainShader.java
@@ -0,0 +1,48 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL43;
+
+import ns.shaders.uniformStructs.UniformFogValues;
+import ns.shaders.uniformStructs.UniformLight;
+import ns.terrain.Terrain;
+
+public class TerrainShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/terrain/terrainVertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/terrain/terrainFragment.glsl";
+	
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+	public UniformMat4 viewMatrix = locator.locateUniformMat4("viewMatrix");
+	
+	public UniformLight light = new UniformLight("light", locator);
+	
+	public UniformVec4 clipPlane = locator.locateUniformVec4("clipPlane");
+	
+	public UniformVec3 skyColor = locator.locateUniformVec3("skyColor");
+
+	public UniformFogValues fogValues = new UniformFogValues("fogValues", locator);
+	
+	private int colors_buffer;
+	
+	public TerrainShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+	
+	@Override
+	protected void postLink() {
+		colors_buffer = GL15.glGenBuffers();
+		GL15.glBindBuffer(GL43.GL_SHADER_STORAGE_BUFFER, colors_buffer);
+		GL15.glBufferData(GL43.GL_SHADER_STORAGE_BUFFER, Terrain.VERTEX_COUNT * Terrain.VERTEX_COUNT * 12, GL15.GL_STATIC_DRAW);
+		GL30.glBindBufferBase(GL43.GL_SHADER_STORAGE_BUFFER, 0, colors_buffer);
+		GL15.glBindBuffer(GL43.GL_SHADER_STORAGE_BUFFER, 0);
+	}
+	
+	@Override
+	public void cleanUp() {
+		super.cleanUp();
+		GL15.glDeleteBuffers(colors_buffer);
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformBool.java b/renderEngine/ns/shaders/UniformBool.java
new file mode 100644
index 0000000..3311ea5
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformBool.java
@@ -0,0 +1,14 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformBool extends UniformVar {
+
+	public UniformBool(int location) {
+		super(location);
+	}
+	
+	public void load(boolean value) {
+		GL20.glUniform1i(location, (value ? 1 : 0));
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformFloat.java b/renderEngine/ns/shaders/UniformFloat.java
new file mode 100644
index 0000000..58efbcb
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformFloat.java
@@ -0,0 +1,14 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformFloat extends UniformVar {
+
+	public UniformFloat(int location) {
+		super(location);
+	}
+	
+	public void load(float value) {
+		GL20.glUniform1f(location, value);
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformInt.java b/renderEngine/ns/shaders/UniformInt.java
new file mode 100644
index 0000000..1a51ded
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformInt.java
@@ -0,0 +1,14 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformInt extends UniformVar {
+
+	public UniformInt(int location) {
+		super(location);
+	}
+	
+	public void load(int value) {
+		GL20.glUniform1i(location, value);
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformLocator.java b/renderEngine/ns/shaders/UniformLocator.java
new file mode 100644
index 0000000..102c6fb
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformLocator.java
@@ -0,0 +1,73 @@
+package ns.shaders;
+
+public final class UniformLocator {
+	private ShaderProgram program;
+
+	public UniformLocator(ShaderProgram program) {
+		this.program = program;
+	}
+	
+	public UniformFloat locateUniformFloat(String name) {
+		return (UniformFloat) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformVec2 locateUniformVec2(String name) {
+		return (UniformVec2) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformVec3 locateUniformVec3(String name) {
+		return (UniformVec3) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformVec4 locateUniformVec4(String name) {
+		return (UniformVec4) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformMat4 locateUniformMat4(String name) {
+		return (UniformMat4) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformInt locateUniformInt(String name) {
+		return (UniformInt) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformBool locateUniformBool(String name) {
+		return (UniformBool) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+
+	public UniformSampler2D locateUniformSampler2D(String name) {
+		return (UniformSampler2D) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformFloat locateUniformFloat(String name, boolean typeCheck) {
+		return (UniformFloat) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_FLOAT), program.getLocation(name));
+	}
+	
+	public UniformVec2 locateUniformVec2(String name, boolean typeCheck) {
+		return (UniformVec2) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_VEC2), program.getLocation(name));
+	}
+	
+	public UniformVec3 locateUniformVec3(String name, boolean typeCheck) {
+		return (UniformVec3) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_VEC3), program.getLocation(name));
+	}
+	
+	public UniformVec4 locateUniformVec4(String name, boolean typeCheck) {
+		return (UniformVec4) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_VEC4), program.getLocation(name));
+	}
+	
+	public UniformMat4 locateUniformMat4(String name, boolean typeCheck) {
+		return (UniformMat4) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_MAT4), program.getLocation(name));
+	}
+	
+	public UniformInt locateUniformInt(String name, boolean typeCheck) {
+		return (UniformInt) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_INT), program.getLocation(name));
+	}
+	
+	public UniformBool locateUniformBool(String name, boolean typeCheck) {
+		return (UniformBool) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_BOOL), program.getLocation(name));
+	}
+
+	public UniformSampler2D locateUniformSampler2D(String name, boolean typeCheck) {
+		return (UniformSampler2D) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_SAMPLER_2D), program.getLocation(name));
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformMat4.java b/renderEngine/ns/shaders/UniformMat4.java
new file mode 100644
index 0000000..d5f493d
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformMat4.java
@@ -0,0 +1,22 @@
+package ns.shaders;
+
+import java.nio.FloatBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Matrix4f;
+
+public class UniformMat4 extends UniformVar {
+	
+	private static final FloatBuffer matrix = BufferUtils.createFloatBuffer(16);
+	
+	public UniformMat4(int location) {
+		super(location);
+	}
+	
+	public void load(Matrix4f value) {
+		value.store(matrix);
+		matrix.flip();
+		GL20.glUniformMatrix4(location, false, matrix);
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformSampler2D.java b/renderEngine/ns/shaders/UniformSampler2D.java
new file mode 100644
index 0000000..02d0b5b
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformSampler2D.java
@@ -0,0 +1,14 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformSampler2D extends UniformVar {
+
+	public UniformSampler2D(int location) {
+		super(location);
+	}
+	
+	public void load(int value) {
+		GL20.glUniform1i(location, value);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/UniformVar.java b/renderEngine/ns/shaders/UniformVar.java
new file mode 100644
index 0000000..0447a8c
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformVar.java
@@ -0,0 +1,40 @@
+package ns.shaders;
+
+public abstract class UniformVar {
+	protected static final int TYPE_FLOAT = 1;
+	protected static final int TYPE_VEC2 = 2;
+	protected static final int TYPE_VEC3 = 3;
+	protected static final int TYPE_VEC4 = 4;
+	protected static final int TYPE_MAT4 = 5;
+	protected static final int TYPE_INT = 6;
+	protected static final int TYPE_BOOL = 7;
+	protected static final int TYPE_SAMPLER_2D = 8;
+	protected static final int TYPE_LIGHT = 9;
+
+	protected int location;
+
+	public UniformVar(int location) {
+		this.location = location;
+	}
+
+	public static UniformVar createVar(int type, int location) {
+		if (type == TYPE_FLOAT)
+			return new UniformFloat(location);
+		else if (type == TYPE_VEC2)
+			return new UniformVec2(location);
+		else if (type == TYPE_VEC3)
+			return new UniformVec3(location);
+		else if (type == TYPE_VEC4)
+			return new UniformVec4(location);
+		else if (type == TYPE_MAT4)
+			return new UniformMat4(location);
+		else if (type == TYPE_INT)
+			return new UniformInt(location);
+		else if (type == TYPE_BOOL)
+			return new UniformBool(location);
+		else if (type == TYPE_SAMPLER_2D)
+			return new UniformSampler2D(location);
+		else
+			return null;
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformVec2.java b/renderEngine/ns/shaders/UniformVec2.java
new file mode 100644
index 0000000..453db6f
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformVec2.java
@@ -0,0 +1,15 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Vector2f;
+
+public class UniformVec2 extends UniformVar {
+
+	public UniformVec2(int location) {
+		super(location);
+	}
+	
+	public void load(Vector2f value) {
+		GL20.glUniform2f(location, value.x, value.y);
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformVec3.java b/renderEngine/ns/shaders/UniformVec3.java
new file mode 100644
index 0000000..5f38b99
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformVec3.java
@@ -0,0 +1,15 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Vector3f;
+
+public class UniformVec3 extends UniformVar {
+
+	public UniformVec3(int location) {
+		super(location);
+	}
+	
+	public void load(Vector3f value) {
+		GL20.glUniform3f(location, value.x, value.y, value.z);
+	}
+}
diff --git a/renderEngine/ns/shaders/UniformVec4.java b/renderEngine/ns/shaders/UniformVec4.java
new file mode 100644
index 0000000..3a899da
--- /dev/null
+++ b/renderEngine/ns/shaders/UniformVec4.java
@@ -0,0 +1,15 @@
+package ns.shaders;
+
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Vector4f;
+
+public class UniformVec4 extends UniformVar {
+
+	public UniformVec4(int location) {
+		super(location);
+	}
+	
+	public void load(Vector4f value) {
+		GL20.glUniform4f(location, value.x, value.y, value.z, value.w);
+	}
+}
diff --git a/renderEngine/ns/shaders/VBlurShader.java b/renderEngine/ns/shaders/VBlurShader.java
new file mode 100644
index 0000000..475cc2c
--- /dev/null
+++ b/renderEngine/ns/shaders/VBlurShader.java
@@ -0,0 +1,13 @@
+package ns.shaders;
+
+public class VBlurShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/blur/vvshader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/blur/fshader.glsl";
+
+	public UniformVec2 size = locator.locateUniformVec2("size");
+	
+	public VBlurShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/WaterShader.java b/renderEngine/ns/shaders/WaterShader.java
new file mode 100644
index 0000000..a94283a
--- /dev/null
+++ b/renderEngine/ns/shaders/WaterShader.java
@@ -0,0 +1,37 @@
+package ns.shaders;
+
+import ns.shaders.uniformStructs.UniformFogValues;
+import ns.shaders.uniformStructs.UniformLight;
+
+public class WaterShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/water/vertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/water/fragment.glsl";
+
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 viewMatrix = locator.locateUniformMat4("viewMatrix");
+	public UniformFloat waveTime = locator.locateUniformFloat("waveTime");
+	public UniformFloat one = locator.locateUniformFloat("one");
+
+	private UniformSampler2D reflectionTexture = locator.locateUniformSampler2D("reflectionTexture");
+	private UniformSampler2D refractionTexture = locator.locateUniformSampler2D("refractionTexture");
+	private UniformSampler2D depthTexture = locator.locateUniformSampler2D("depthTexture");
+	
+	public UniformVec3 cameraPosition = locator.locateUniformVec3("cameraPos");
+	public UniformVec2 nearFarPlanes = locator.locateUniformVec2("nearFarPlanes");
+	public UniformVec3 skyColor = locator.locateUniformVec3("skyColor");
+
+	public UniformLight light = new UniformLight("light", locator);
+	
+	public UniformFogValues fogValues = new UniformFogValues("fogValues", locator);
+	
+	public WaterShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+
+	public void connectTextureUnits() {
+		reflectionTexture.load(0);
+		refractionTexture.load(1);
+		depthTexture.load(2);
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/uniformStructs/UniformFogValues.java b/renderEngine/ns/shaders/uniformStructs/UniformFogValues.java
new file mode 100644
index 0000000..28cdbdd
--- /dev/null
+++ b/renderEngine/ns/shaders/uniformStructs/UniformFogValues.java
@@ -0,0 +1,27 @@
+package ns.shaders.uniformStructs;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import ns.shaders.UniformLocator;
+import ns.shaders.UniformVar;
+
+public class UniformFogValues extends UniformStruct {
+
+	public UniformFogValues(String name, UniformLocator locator) {
+		super(name, getAttributes(name, locator));
+	}
+
+	private static List<UniformVar> getAttributes(String name, UniformLocator locator) {
+		List<UniformVar> attributes = new ArrayList<>();
+		attributes.add(locator.locateUniformFloat(name + ".density", false));
+		attributes.add(locator.locateUniformFloat(name + ".gradient", false));
+		return attributes;
+	}
+	
+	public void load(Vector2f values) {
+		super.load(new UniformValue(values.x), new UniformValue(values.y));
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/uniformStructs/UniformLight.java b/renderEngine/ns/shaders/uniformStructs/UniformLight.java
new file mode 100644
index 0000000..afd3a5a
--- /dev/null
+++ b/renderEngine/ns/shaders/uniformStructs/UniformLight.java
@@ -0,0 +1,27 @@
+package ns.shaders.uniformStructs;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ns.entities.Light;
+import ns.shaders.UniformLocator;
+import ns.shaders.UniformVar;
+
+public class UniformLight extends UniformStruct {
+
+	public UniformLight(String name, UniformLocator locator) {
+		super(name, getAttributes(name, locator));
+	}
+
+	public void load(Light light) {
+		super.load(new UniformValue(light.dir), new UniformValue(light.color), new UniformValue(light.bias));
+	}
+
+	private static List<UniformVar> getAttributes(String name, UniformLocator locator) {
+		List<UniformVar> attributes = new ArrayList<>();
+		attributes.add(locator.locateUniformVec3(name + ".direction", false));
+		attributes.add(locator.locateUniformVec3(name + ".color", false));
+		attributes.add(locator.locateUniformVec2(name + ".bias", false));
+		return attributes;
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/uniformStructs/UniformStruct.java b/renderEngine/ns/shaders/uniformStructs/UniformStruct.java
new file mode 100644
index 0000000..8d001cd
--- /dev/null
+++ b/renderEngine/ns/shaders/uniformStructs/UniformStruct.java
@@ -0,0 +1,34 @@
+package ns.shaders.uniformStructs;
+
+import java.util.List;
+
+import ns.shaders.UniformVar;
+
+public abstract class UniformStruct {
+
+	private String name;
+	private List<UniformVar> attributes;
+
+	public UniformStruct(String name, List<UniformVar> attributes) {
+		this.name = name;
+		this.attributes = attributes;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	protected void load(List<UniformValue> values) {
+		int itn = Math.min(attributes.size(), values.size());
+		for (int i = 0; i < itn; i++) {
+			values.get(i).loadTo(attributes.get(i));
+		}
+	}
+
+	protected void load(UniformValue... values) {
+		int itn = Math.min(attributes.size(), values.length);
+		for (int i = 0; i < itn; i++) {
+			values[i].loadTo(attributes.get(i));
+		}
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/uniformStructs/UniformValue.java b/renderEngine/ns/shaders/uniformStructs/UniformValue.java
new file mode 100644
index 0000000..e8bcf2c
--- /dev/null
+++ b/renderEngine/ns/shaders/uniformStructs/UniformValue.java
@@ -0,0 +1,101 @@
+package ns.shaders.uniformStructs;
+
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import ns.shaders.UniformBool;
+import ns.shaders.UniformFloat;
+import ns.shaders.UniformInt;
+import ns.shaders.UniformMat4;
+import ns.shaders.UniformSampler2D;
+import ns.shaders.UniformVar;
+import ns.shaders.UniformVec2;
+import ns.shaders.UniformVec3;
+import ns.shaders.UniformVec4;
+
+public class UniformValue {
+
+	protected static final int INT = 1;
+	protected static final int FLOAT = 2;
+	protected static final int BOOLEAN = 3;
+	protected static final int VEC2 = 4;
+	protected static final int VEC3 = 5;
+	protected static final int VEC4 = 6;
+	protected static final int MAT4 = 7;
+
+	protected int int_value;
+	protected float float_value;
+	protected boolean boolean_value;
+	protected Vector2f vec2_value;
+	protected Vector3f vec3_value;
+	protected Vector4f vec4_value;
+	protected Matrix4f mat4_value;
+
+	protected final int type;
+
+	public UniformValue(int value) {
+		this.int_value = value;
+		this.type = INT;
+	}
+
+	public UniformValue(float value) {
+		this.float_value = value;
+		this.type = FLOAT;
+	}
+
+	public UniformValue(boolean value) {
+		this.boolean_value = value;
+		this.type = BOOLEAN;
+	}
+
+	public UniformValue(Vector2f value) {
+		this.vec2_value = value;
+		this.type = VEC2;
+	}
+
+	public UniformValue(Vector3f value) {
+		this.vec3_value = value;
+		this.type = VEC3;
+	}
+
+	public UniformValue(Vector4f value) {
+		this.vec4_value = value;
+		this.type = VEC4;
+	}
+
+	public UniformValue(Matrix4f value) {
+		this.mat4_value = value;
+		this.type = MAT4;
+	}
+
+	public void loadTo(UniformVar var) {
+		switch (type) {
+		case INT:
+			if (var instanceof UniformInt)
+				((UniformInt) var).load(int_value);
+			if (var instanceof UniformSampler2D)
+				((UniformSampler2D) var).load(int_value);
+			break;
+		case FLOAT:
+			((UniformFloat) var).load(float_value);
+			break;
+		case BOOLEAN:
+			((UniformBool) var).load(boolean_value);
+			break;
+		case VEC2:
+			((UniformVec2) var).load(vec2_value);
+			break;
+		case VEC3:
+			((UniformVec3) var).load(vec3_value);
+			break;
+		case VEC4:
+			((UniformVec4) var).load(vec4_value);
+			break;
+		case MAT4:
+			((UniformMat4) var).load(mat4_value);
+			break;
+		}
+	}
+}
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/uniformStructs/package-info.java b/renderEngine/ns/shaders/uniformStructs/package-info.java
new file mode 100644
index 0000000..3b426f6
--- /dev/null
+++ b/renderEngine/ns/shaders/uniformStructs/package-info.java
@@ -0,0 +1,9 @@
+/**
+ * 
+ */
+/**
+ * This package is for dealing with uniform structures from the predefined structures in structlib.glsl
+ * @author Dinu B.
+ *
+ */
+package ns.shaders.uniformStructs;
\ No newline at end of file
diff --git a/renderEngine/ns/shaders/uniformStructs/structlib.glsl b/renderEngine/ns/shaders/uniformStructs/structlib.glsl
new file mode 100644
index 0000000..55d1ce7
--- /dev/null
+++ b/renderEngine/ns/shaders/uniformStructs/structlib.glsl
@@ -0,0 +1,10 @@
+struct Light {
+	vec3 direction;
+	vec3 color;
+	vec2 bias;
+}
+
+struct FogValues {
+	float density;
+	float gradient;
+}
diff --git a/resources/obj/Material.java b/resources/obj/Material.java
new file mode 100644
index 0000000..66873e3
--- /dev/null
+++ b/resources/obj/Material.java
@@ -0,0 +1,46 @@
+package obj;
+
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+public class Material {
+	private Vector3f color;
+	private Vector3f indicators;
+	private String name;
+	private Vector4f data;
+	
+	protected Material() {
+	}
+	
+	public void setColor(Vector3f color) {
+		this.color = color;
+	}
+	
+	public void setIndicators(Vector3f indicators) {
+		this.indicators = indicators;
+	}
+
+	public Vector3f getColor() {
+		return color;
+	}
+
+	public Vector3f getIndicators() {
+		return indicators;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public void setData(Vector4f data) {
+		this.data = data;
+	}
+
+	public Vector4f getData() {
+		return data;
+	}
+}
diff --git a/resources/obj/Materials.java b/resources/obj/Materials.java
new file mode 100644
index 0000000..7151e43
--- /dev/null
+++ b/resources/obj/Materials.java
@@ -0,0 +1,54 @@
+package obj;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import ns.utils.GU;
+import res.Resource;
+
+public class Materials extends ArrayList<Material> {
+	private static final long serialVersionUID = -4711987157168197781L;
+
+	public Materials(Resource resource) {
+		BufferedReader reader = GU.open(resource);
+		String line;
+		Material current = null;
+		try {
+			while ((line = reader.readLine()) != null) {
+				if (line.startsWith("newmtl")) {
+					if (current != null) {
+						super.add(current);
+					}
+					current = new Material();
+					current.setName(line.split(" ")[1]);
+				} else if (line.startsWith("Kd")) {
+					String[] pcs = line.split(" ");
+					current.setColor(
+							new Vector3f(Float.parseFloat(pcs[1]), Float.parseFloat(pcs[2]), Float.parseFloat(pcs[3])));
+				} else if (line.startsWith("Ka")) {
+					String[] pcs = line.split(" ");
+					current.setIndicators(
+							new Vector3f(Float.parseFloat(pcs[1]), Float.parseFloat(pcs[2]), Float.parseFloat(pcs[3])));
+				} else if (line.startsWith("d")) {
+					String[] pcs = line.split(" ");
+					current.setData(new Vector4f(Float.valueOf(pcs[1]), 0, 0, 0));
+				}
+			}
+			super.add(current);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public Material get(String name) {
+		for (Material m : this) {
+			if (m.getName().compareTo(name) == 0)
+				return m;
+		}
+		return null;
+	}
+}
diff --git a/resources/obj/OBJLoader.java b/resources/obj/OBJLoader.java
new file mode 100644
index 0000000..5cceb87
--- /dev/null
+++ b/resources/obj/OBJLoader.java
@@ -0,0 +1,160 @@
+package obj;
+
+import java.io.BufferedReader;
+import java.util.ArrayList;
+
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import ns.openglObjects.VAO;
+import ns.openglWorkers.DataPacking;
+import ns.openglWorkers.VBOData;
+import ns.utils.GU;
+import res.Resource;
+
+public class OBJLoader {
+
+	public static VAO loadObj(String file) {
+		Resource asResource = new Resource(file);
+		if (!asResource.exists())
+			return null;
+		BufferedReader reader = GU.open(asResource);
+		Materials materials = null;
+		{
+			Resource materialsResource = new Resource(file.replace(".obj", ".mtl"));
+			if (materialsResource.exists())
+				materials = new Materials(materialsResource);
+		}
+		String line;
+		ArrayList<Vector3f> vertices = new ArrayList<Vector3f>();
+		ArrayList<Vector2f> textures = new ArrayList<Vector2f>();
+		ArrayList<Vector3f> normals = new ArrayList<Vector3f>();
+		ArrayList<Integer> indices = new ArrayList<Integer>();
+		float[] verticesArray = null;
+		float[] texturesArray = null;
+		float[] colorsArray = null;
+		float[] colorsIndicators = null;
+		float[] normalsArray = null;
+		float[] materialsArray = null;
+		int[] indicesArray = null;
+
+		try {
+			Material current = null;
+			while (true) {
+				line = reader.readLine();
+				String[] currentLine = line.split(" ");
+				if (line.startsWith("mtllib") && materials == null) {
+					String[] filepcs = file.split("/");
+					String mtlFile = file.replace(filepcs[filepcs.length - 1], currentLine[1]);
+					Resource materialsResource = new Resource(mtlFile);
+					if (materialsResource.exists())
+						materials = new Materials(materialsResource);
+				}
+				if (line.startsWith("v ")) {
+					Vector3f vertex = new Vector3f(Float.parseFloat(currentLine[1]), Float.parseFloat(currentLine[2]),
+							Float.parseFloat(currentLine[3]));
+					vertices.add(vertex);
+				} else if (line.startsWith("vt ")) {
+					Vector2f texture = new Vector2f(Float.parseFloat(currentLine[1]), Float.parseFloat(currentLine[2]));
+					textures.add(texture);
+				} else if (line.startsWith("vn ")) {
+					Vector3f normal = new Vector3f(Float.parseFloat(currentLine[1]), Float.parseFloat(currentLine[2]),
+							Float.parseFloat(currentLine[3]));
+					normals.add(normal);
+				} else if (line.startsWith("usemtl ")) {
+					current = materials.get(line.split(" ")[1]);
+				} else if (line.startsWith("f ")) {
+					texturesArray = new float[vertices.size() * 2];
+					normalsArray = new float[vertices.size() * 3];
+					colorsArray = new float[vertices.size() * 3];
+					colorsIndicators = new float[vertices.size() * 3];
+					materialsArray = new float[vertices.size() * 4];
+					break;
+				}
+
+			}
+			while (line != null) {
+				if (line.startsWith("usemtl ")) {
+					current = materials.get(line.split(" ")[1]);
+				}
+				if (!line.startsWith("f ")) {
+					line = reader.readLine();
+					continue;
+				}
+				String[] currentLine = line.split(" ");
+				String[] vertex1 = currentLine[1].split("/");
+				String[] vertex2 = currentLine[2].split("/");
+				String[] vertex3 = currentLine[3].split("/");
+
+				processVertex(vertex1, indices, textures, normals, texturesArray, normalsArray, current, colorsArray,
+						colorsIndicators, materialsArray);
+				processVertex(vertex2, indices, textures, normals, texturesArray, normalsArray, current, colorsArray,
+						colorsIndicators, materialsArray);
+				processVertex(vertex3, indices, textures, normals, texturesArray, normalsArray, current, colorsArray,
+						colorsIndicators, materialsArray);
+				line = reader.readLine();
+			}
+			reader.close();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		verticesArray = new float[vertices.size() * 3];
+		indicesArray = new int[indices.size()];
+
+		int vertexPointer = 0;
+		for (Vector3f vertex : vertices) {
+			verticesArray[vertexPointer++] = vertex.x;
+			verticesArray[vertexPointer++] = vertex.y;
+			verticesArray[vertexPointer++] = vertex.z;
+		}
+
+		for (int i = 0; i < indices.size(); i++) {
+			indicesArray[i] = indices.get(i);
+		}
+
+		return DataPacking.storeDataInVAO(new VBOData(verticesArray).withAttributeNumber(0).withDimensions(3),
+				new VBOData(normalsArray).withAttributeNumber(1).withDimensions(3),
+				new VBOData(texturesArray).withAttributeNumber(2).withDimensions(2),
+				new VBOData(colorsArray).withAttributeNumber(3).withDimensions(3),
+				new VBOData(colorsIndicators).withAttributeNumber(4).withDimensions(3),
+				new VBOData(materialsArray).withAttributeNumber(5).withDimensions(4),
+				new VBOData(indicesArray).isIndices(true));
+	}
+
+	private static void processVertex(String[] vertexData, ArrayList<Integer> indices, ArrayList<Vector2f> textures,
+			ArrayList<Vector3f> normals, float[] texturesArray, float[] normalsArray, Material material, float[] colors,
+			float[] colorsIndicators, float[] materialsArray) {
+		int currentVertexPointer = Integer.parseInt(vertexData[0]) - 1;
+		indices.add(currentVertexPointer);
+		if (!normals.isEmpty()) {
+			Vector3f currentNorm = normals.get(Integer.parseInt(vertexData[2]) - 1);
+			normalsArray[currentVertexPointer * 3] = currentNorm.x;
+			normalsArray[currentVertexPointer * 3 + 1] = currentNorm.y;
+			normalsArray[currentVertexPointer * 3 + 2] = currentNorm.z;
+		}
+		if (!textures.isEmpty()) {
+			Vector2f currentTex = textures.get(Integer.parseInt(vertexData[1]) - 1);
+			texturesArray[currentVertexPointer * 2] = currentTex.x;
+			texturesArray[currentVertexPointer * 2 + 1] = 1 - currentTex.y;
+		} else if (material != null) {
+			Vector3f materialColor = material.getColor();
+			colors[currentVertexPointer * 3] = materialColor.x;
+			colors[currentVertexPointer * 3 + 1] = materialColor.y;
+			colors[currentVertexPointer * 3 + 2] = materialColor.z;
+
+			Vector3f matColorsIndicators = material.getIndicators();
+			colorsIndicators[currentVertexPointer * 3] = matColorsIndicators.x;
+			colorsIndicators[currentVertexPointer * 3 + 1] = matColorsIndicators.y;
+			colorsIndicators[currentVertexPointer * 3 + 2] = matColorsIndicators.z;
+
+			Vector4f matData = material.getData();
+			materialsArray[currentVertexPointer * 4] = matData.x;
+			materialsArray[currentVertexPointer * 4 + 1] = matData.y;
+			materialsArray[currentVertexPointer * 4 + 2] = matData.z;
+			materialsArray[currentVertexPointer * 4 + 3] = matData.w;
+		}
+	}
+
+}
diff --git a/resources/res/Resource.java b/resources/res/Resource.java
new file mode 100644
index 0000000..5bfbe01
--- /dev/null
+++ b/resources/res/Resource.java
@@ -0,0 +1,35 @@
+package res;
+
+import java.io.DataInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+
+public class Resource {
+	private String location;
+	private InputStream asInputStream;
+	private final boolean exists;
+
+	public Resource(String location) {
+		this.location = location;
+		try {
+			this.asInputStream = new DataInputStream(new FileInputStream(new File(location)));
+		} catch (FileNotFoundException e) {
+			this.asInputStream = ClassLoader.getSystemResourceAsStream(this.location);
+		}
+		this.exists = this.asInputStream != null;
+	}
+
+	public String getLocation() {
+		return location;
+	}
+
+	public InputStream asInputStream() {
+		return asInputStream;
+	}
+
+	public boolean exists() {
+		return exists;
+	}
+}
diff --git a/resources/res/WritingResource.java b/resources/res/WritingResource.java
new file mode 100644
index 0000000..a42912f
--- /dev/null
+++ b/resources/res/WritingResource.java
@@ -0,0 +1,38 @@
+package res;
+
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+public class WritingResource {
+	private String location;
+	private DataOutputStream outputStream;
+
+	public WritingResource(String location) {
+		this.location = location;
+		File f = new File(location);
+		if(!f.exists())
+			try {
+				if(!f.getParentFile().exists())
+					f.getParentFile().mkdirs();
+				f.createNewFile();
+			} catch (IOException e) {
+				throw new InstantiationError("Could not create non-existent file at " + location + ", " + e.getLocalizedMessage());
+			}
+		try {
+			this.outputStream = new DataOutputStream(new FileOutputStream(f));
+		} catch (FileNotFoundException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	public DataOutputStream asOutputStream() {
+		return outputStream;
+	}
+	
+	public String getLocation() {
+		return location;
+	}
+}
\ No newline at end of file
diff --git a/resources/res/models/1000/tree.mtl b/resources/res/models/1000/tree.mtl
new file mode 100644
index 0000000..ffc1a8f
--- /dev/null
+++ b/resources/res/models/1000/tree.mtl
@@ -0,0 +1,42 @@
+# Blender MTL File: 'None'
+# Material Count: 4
+
+newmtl Material.005
+Ns 96.078431
+Ka 1.000000 1.000000 0.000000
+Kd 0.000000 0.800000 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 1.000000
+illum 2
+
+newmtl Material.006
+Ns 96.078431
+Ka 1.000000 1.000000 0.000000
+Kd 0.000000 0.800000 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 1.000000
+illum 2
+
+newmtl Material.007
+Ns 96.078431
+Ka 1.000000 1.000000 0.000000
+Kd 0.000000 0.800000 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 1.000000
+illum 2
+
+newmtl Material.008
+Ns 96.078431
+Ka 0.000000 1.000000 1.000000
+Kd 0.224807 0.079389 0.024406
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
diff --git a/resources/res/models/1000/tree.obj b/resources/res/models/1000/tree.obj
new file mode 100644
index 0000000..0a21df2
--- /dev/null
+++ b/resources/res/models/1000/tree.obj
@@ -0,0 +1,1653 @@
+# Blender v2.79 (sub 0) OBJ File: ''
+# www.blender.org
+mtllib tree.mtl
+o Cylinder.001_Cylinder.002
+v -0.062740 0.003766 -1.000000
+v -0.062739 2.790437 -0.540269
+v 0.132351 0.003766 -0.980785
+v 0.042662 2.790437 -0.529888
+v 0.319944 0.003766 -0.923880
+v 0.144013 2.790437 -0.499144
+v 0.492831 0.003766 -0.831470
+v 0.237418 2.790437 -0.449218
+v 0.644367 0.003766 -0.707107
+v 0.319289 2.790437 -0.382028
+v 0.768730 0.003766 -0.555570
+v 0.386478 2.790437 -0.300158
+v 0.861140 0.003766 -0.382683
+v 0.436404 2.790437 -0.206752
+v 0.918046 0.003766 -0.195090
+v 0.467149 2.790437 -0.105401
+v 0.937260 0.003766 -0.000000
+v 0.477530 2.790437 -0.000000
+v 0.918046 0.003766 0.195090
+v 0.467149 2.790437 0.105401
+v 0.861140 0.003766 0.382683
+v 0.436404 2.790437 0.206752
+v 0.768730 0.003766 0.555570
+v 0.386478 2.790437 0.300157
+v 0.644367 0.003766 0.707107
+v 0.319289 2.790437 0.382028
+v 0.492831 0.003766 0.831470
+v 0.237418 2.790437 0.449217
+v 0.319944 0.003766 0.923880
+v 0.144013 2.790437 0.499144
+v 0.132351 0.003766 0.980785
+v 0.042662 2.790437 0.529888
+v -0.062740 0.003766 1.000000
+v -0.062740 2.790437 0.540269
+v -0.257830 0.003766 0.980785
+v -0.168141 2.790437 0.529888
+v -0.445423 0.003766 0.923879
+v -0.269492 2.790437 0.499143
+v -0.618310 0.003766 0.831469
+v -0.362897 2.790437 0.449217
+v -0.769847 0.003766 0.707106
+v -0.444768 2.790437 0.382028
+v -0.894210 0.003766 0.555570
+v -0.511957 2.790437 0.300157
+v -0.986619 0.003766 0.382683
+v -0.561883 2.790437 0.206752
+v -1.043525 0.003766 0.195089
+v -0.592628 2.790437 0.105401
+v -1.062740 0.003766 -0.000001
+v -0.603009 2.790437 -0.000001
+v -1.043525 0.003766 -0.195091
+v -0.592628 2.790437 -0.105402
+v -0.986619 0.003766 -0.382684
+v -0.561883 2.790437 -0.206753
+v -0.894208 0.003766 -0.555571
+v -0.511957 2.790437 -0.300158
+v -0.769845 0.003766 -0.707108
+v -0.444767 2.790437 -0.382029
+v -0.618309 0.003766 -0.831470
+v -0.362896 2.790437 -0.449218
+v -0.445422 0.003766 -0.923880
+v -0.269491 2.790437 -0.499144
+v -0.257828 0.003766 -0.980786
+v -0.168140 2.790437 -0.529888
+v -0.062739 4.456726 -0.377298
+v 0.010868 4.456726 -0.370048
+v 0.081646 4.456726 -0.348578
+v 0.146876 4.456726 -0.313712
+v 0.204051 4.456726 -0.266790
+v 0.250972 4.456726 -0.209616
+v 0.285838 4.456726 -0.144386
+v 0.307309 4.456726 -0.073607
+v 0.314559 4.456726 -0.000000
+v 0.307309 4.456726 0.073607
+v 0.285838 4.456726 0.144385
+v 0.250972 4.456726 0.209615
+v 0.204051 4.456726 0.266790
+v 0.146876 4.456726 0.313712
+v 0.081646 4.456726 0.348578
+v 0.010868 4.456726 0.370048
+v -0.062740 4.456726 0.377298
+v -0.136347 4.456726 0.370048
+v -0.207125 4.456726 0.348578
+v -0.272355 4.456726 0.313711
+v -0.329530 4.456726 0.266790
+v -0.376451 4.456726 0.209615
+v -0.411317 4.456726 0.144385
+v -0.432788 4.456726 0.073607
+v -0.440037 4.456726 -0.000001
+v -0.432788 4.456726 -0.073608
+v -0.411317 4.456726 -0.144386
+v -0.376451 4.456726 -0.209616
+v -0.329529 4.456726 -0.266790
+v -0.272354 4.456726 -0.313712
+v -0.207125 4.456726 -0.348578
+v -0.136346 4.456726 -0.370049
+v -0.755418 5.462753 -0.393171
+v -0.705829 5.521272 -0.385616
+v -0.658145 5.577541 -0.363242
+v -0.614200 5.629399 -0.326909
+v -0.575681 5.674853 -0.278014
+v -0.544070 5.712156 -0.218434
+v -0.520581 5.739875 -0.150460
+v -0.506116 5.756944 -0.076704
+v -0.501232 5.762708 -0.000000
+v -0.506116 5.756944 0.076704
+v -0.520581 5.739875 0.150460
+v -0.544070 5.712156 0.218434
+v -0.575681 5.674853 0.278013
+v -0.614200 5.629399 0.326909
+v -0.658145 5.577541 0.363242
+v -0.705829 5.521272 0.385616
+v -0.755418 5.462753 0.393170
+v -0.805007 5.404235 0.385616
+v -0.852691 5.347966 0.363242
+v -0.896636 5.296108 0.326909
+v -0.935154 5.250653 0.278013
+v -0.966766 5.213350 0.218433
+v -0.990255 5.185632 0.150459
+v -1.004719 5.168563 0.076703
+v -1.009604 5.162799 -0.000001
+v -1.004719 5.168563 -0.076704
+v -0.990255 5.185632 -0.150460
+v -0.966765 5.213351 -0.218434
+v -0.935154 5.250654 -0.278014
+v -0.896636 5.296108 -0.326910
+v -0.852690 5.347966 -0.363243
+v -0.805007 5.404236 -0.385616
+v 0.465234 5.408925 -0.285378
+v 0.502117 5.362142 -0.279511
+v 0.537583 5.317157 -0.262134
+v 0.570268 5.275698 -0.233915
+v 0.598917 5.239360 -0.195939
+v 0.622428 5.209537 -0.149666
+v 0.639899 5.187377 -0.096872
+v 0.650657 5.173731 -0.039588
+v 0.654290 5.169124 0.019985
+v 0.650657 5.173731 0.079558
+v 0.639899 5.187377 0.136842
+v 0.622428 5.209537 0.189636
+v 0.598917 5.239360 0.235909
+v 0.570268 5.275698 0.273885
+v 0.537583 5.317157 0.302104
+v 0.502117 5.362142 0.319481
+v 0.465234 5.408925 0.325348
+v 0.428351 5.455708 0.319481
+v 0.392886 5.500693 0.302104
+v 0.360201 5.542151 0.273885
+v 0.331552 5.578490 0.235909
+v 0.308040 5.608312 0.189635
+v 0.290570 5.630472 0.136842
+v 0.279811 5.644118 0.079558
+v 0.276179 5.648726 0.019985
+v 0.279811 5.644118 -0.039589
+v 0.290570 5.630472 -0.096873
+v 0.308040 5.608312 -0.149666
+v 0.331552 5.578489 -0.195940
+v 0.360201 5.542151 -0.233915
+v 0.392886 5.500692 -0.262134
+v 0.428352 5.455708 -0.279511
+v 1.320493 6.083199 -0.169417
+v 1.343370 6.054182 -0.165778
+v 1.365368 6.026279 -0.155000
+v 1.385641 6.000565 -0.137497
+v 1.403410 5.978025 -0.113943
+v 1.417993 5.959528 -0.085241
+v 1.428829 5.945784 -0.052496
+v 1.435502 5.937320 -0.016966
+v 1.437755 5.934462 0.019984
+v 1.435502 5.937320 0.056935
+v 1.428829 5.945784 0.092465
+v 1.417993 5.959528 0.125210
+v 1.403410 5.978025 0.153912
+v 1.385641 6.000565 0.177466
+v 1.365368 6.026279 0.194969
+v 1.343370 6.054182 0.205747
+v 1.320493 6.083199 0.209386
+v 1.297617 6.112215 0.205747
+v 1.275619 6.140118 0.194969
+v 1.255346 6.165832 0.177466
+v 1.237577 6.188371 0.153911
+v 1.222994 6.206868 0.125210
+v 1.212158 6.220613 0.092465
+v 1.205485 6.229077 0.056935
+v 1.203232 6.231935 0.019984
+v 1.205485 6.229077 -0.016966
+v 1.212158 6.220613 -0.052496
+v 1.222994 6.206868 -0.085241
+v 1.237577 6.188371 -0.113943
+v 1.255347 6.165832 -0.137497
+v 1.275620 6.140117 -0.155000
+v 1.297617 6.112215 -0.165778
+v -1.618443 6.036334 0.068311
+v -1.579340 6.082478 0.074268
+v -1.541739 6.126849 0.091911
+v -1.507086 6.167741 0.120561
+v -1.476712 6.203584 0.159118
+v -1.451786 6.232999 0.206099
+v -1.433263 6.254857 0.259700
+v -1.421857 6.268316 0.317860
+v -1.418006 6.272861 0.378344
+v -1.421857 6.268316 0.438829
+v -1.433263 6.254857 0.496989
+v -1.451786 6.232999 0.550589
+v -1.476712 6.203584 0.597571
+v -1.507086 6.167741 0.636127
+v -1.541739 6.126849 0.664778
+v -1.579340 6.082478 0.682420
+v -1.618443 6.036334 0.688377
+v -1.657547 5.990189 0.682420
+v -1.695147 5.945818 0.664777
+v -1.729800 5.904926 0.636127
+v -1.760174 5.869083 0.597571
+v -1.785101 5.839668 0.550589
+v -1.803623 5.817811 0.496989
+v -1.815029 5.804351 0.438828
+v -1.818881 5.799806 0.378344
+v -1.815029 5.804351 0.317860
+v -1.803623 5.817811 0.259699
+v -1.785100 5.839668 0.206099
+v -1.760174 5.869083 0.159118
+v -1.729800 5.904926 0.120561
+v -1.695147 5.945819 0.091911
+v -1.657546 5.990190 0.074268
+v -1.509721 5.840158 -0.848684
+v -1.475471 5.855923 -0.837983
+v -1.445446 5.877899 -0.825667
+v -1.420800 5.905240 -0.812207
+v -1.402481 5.936897 -0.798123
+v -1.391191 5.971653 -0.783955
+v -1.387366 6.008171 -0.770247
+v -1.391152 6.045049 -0.757527
+v -1.402403 6.080870 -0.746283
+v -1.420688 6.114256 -0.736947
+v -1.445303 6.143926 -0.729878
+v -1.475302 6.168737 -0.725348
+v -1.509534 6.187738 -0.723531
+v -1.546681 6.200199 -0.724497
+v -1.585318 6.205639 -0.728208
+v -1.623958 6.203850 -0.734522
+v -1.661117 6.194901 -0.743196
+v -1.695368 6.179136 -0.753897
+v -1.725393 6.157160 -0.766214
+v -1.750038 6.129818 -0.779673
+v -1.768358 6.098162 -0.793758
+v -1.779647 6.063406 -0.807926
+v -1.783473 6.026887 -0.821634
+v -1.779687 5.990009 -0.834354
+v -1.768436 5.954189 -0.845598
+v -1.750151 5.920802 -0.854934
+v -1.725536 5.891133 -0.862002
+v -1.695536 5.866321 -0.866532
+v -1.661305 5.847320 -0.868349
+v -1.624157 5.834860 -0.867384
+v -1.585521 5.829420 -0.863673
+v -1.546880 5.831209 -0.857359
+v -1.780704 5.852440 -1.303352
+v -1.746454 5.868206 -1.292651
+v -1.716429 5.890181 -1.280334
+v -1.691783 5.917522 -1.266875
+v -1.673463 5.949180 -1.252790
+v -1.662174 5.983935 -1.238622
+v -1.658349 6.020453 -1.224914
+v -1.662134 6.057332 -1.212194
+v -1.673386 6.093153 -1.200950
+v -1.691670 6.126539 -1.191614
+v -1.716285 6.156208 -1.184546
+v -1.746285 6.181020 -1.180016
+v -1.780516 6.200021 -1.178199
+v -1.817664 6.212481 -1.179164
+v -1.856301 6.217921 -1.182875
+v -1.894941 6.216132 -1.189189
+v -1.932100 6.207183 -1.197863
+v -1.966350 6.191418 -1.208565
+v -1.996375 6.169442 -1.220881
+v -2.021021 6.142101 -1.234341
+v -2.039341 6.110444 -1.248425
+v -2.050630 6.075688 -1.262593
+v -2.054455 6.039170 -1.276301
+v -2.050669 6.002292 -1.289021
+v -2.039418 5.966471 -1.300265
+v -2.021134 5.933084 -1.309601
+v -1.996518 5.903415 -1.316669
+v -1.966519 5.878603 -1.321199
+v -1.932287 5.859602 -1.323017
+v -1.895139 5.847142 -1.322051
+v -1.856503 5.841702 -1.318340
+v -1.817863 5.843491 -1.312026
+v -2.238812 5.001561 -2.145206
+v -1.427169 5.621594 -1.555521
+v -2.548826 5.621593 -1.191066
+v -3.242055 5.621598 -2.145206
+v -2.548826 5.621593 -3.099347
+v -1.427169 5.621594 -2.734892
+v -1.928798 6.624852 -1.191066
+v -3.050454 6.624852 -1.555521
+v -3.050454 6.624852 -2.734892
+v -1.928798 6.624852 -3.099347
+v -1.235568 6.624847 -2.145206
+v -2.238812 7.244884 -2.145206
+v -2.421032 5.169076 -1.584381
+v -1.761744 5.169076 -1.798600
+v -1.943962 5.533523 -1.237769
+v -1.284672 5.533525 -2.145206
+v -1.761744 5.169076 -2.491813
+v -2.828503 5.169079 -2.145206
+v -3.010727 5.533525 -1.584379
+v -2.421032 5.169076 -2.706032
+v -3.010727 5.533525 -2.706034
+v -1.943962 5.533523 -3.052644
+v -1.172046 6.123223 -1.798599
+v -1.172046 6.123223 -2.491814
+v -2.238812 6.123223 -1.023545
+v -1.579515 6.123223 -1.237763
+v -3.305577 6.123223 -1.798599
+v -2.898108 6.123223 -1.237763
+v -2.898108 6.123223 -3.052649
+v -3.305577 6.123223 -2.491814
+v -1.579515 6.123223 -3.052649
+v -2.238812 6.123223 -3.266868
+v -1.466896 6.712921 -1.584379
+v -2.533662 6.712923 -1.237769
+v -3.192951 6.712921 -2.145206
+v -2.533662 6.712923 -3.052644
+v -1.466896 6.712921 -2.706034
+v -2.056592 7.077369 -1.584381
+v -1.649121 7.077366 -2.145206
+v -2.715880 7.077369 -1.798600
+v -2.715880 7.077369 -2.491813
+v -2.056592 7.077369 -2.706032
+v -2.726032 4.875581 0.588612
+v -1.563722 5.763496 1.433070
+v -3.169986 5.763496 1.954986
+v -4.162723 5.763503 0.588612
+v -3.169986 5.763496 -0.777761
+v -1.563722 5.763496 -0.255845
+v -2.282077 7.200209 1.954986
+v -3.888341 7.200209 1.433070
+v -3.888341 7.200209 -0.255845
+v -2.282077 7.200209 -0.777761
+v -1.289340 7.200202 0.588612
+v -2.726032 8.088123 0.588612
+v -2.986979 5.115471 1.391740
+v -2.042848 5.115471 1.084968
+v -2.303793 5.637375 1.888104
+v -1.359660 5.637378 0.588612
+v -2.042848 5.115471 0.092256
+v -3.570496 5.115475 0.588612
+v -3.831450 5.637378 1.391743
+v -2.986979 5.115471 -0.214516
+v -3.831450 5.637378 -0.214519
+v -2.303793 5.637375 -0.710880
+v -1.198375 6.481853 1.084970
+v -1.198375 6.481853 0.092254
+v -2.726032 6.481853 2.194883
+v -1.781888 6.481853 1.888113
+v -4.253688 6.481853 1.084970
+v -3.670175 6.481853 1.888113
+v -3.670175 6.481853 -0.710888
+v -4.253688 6.481853 0.092254
+v -1.781888 6.481853 -0.710888
+v -2.726032 6.481853 -1.017659
+v -1.620613 7.326327 1.391743
+v -3.148270 7.326330 1.888104
+v -4.092402 7.326327 0.588612
+v -3.148270 7.326330 -0.710880
+v -1.620613 7.326327 -0.214519
+v -2.465084 7.848234 1.391740
+v -1.881567 7.848230 0.588612
+v -3.409215 7.848234 1.084968
+v -3.409215 7.848234 0.092256
+v -2.465084 7.848234 -0.214516
+v 1.913359 5.144813 0.246645
+v 2.830800 5.845667 0.913197
+v 1.562935 5.845667 1.325159
+v 0.779342 5.845672 0.246645
+v 1.562935 5.845667 -0.831868
+v 2.830800 5.845667 -0.419907
+v 2.263784 6.979701 1.325159
+v 0.995919 6.979701 0.913197
+v 0.995919 6.979701 -0.419907
+v 2.263784 6.979701 -0.831868
+v 3.047377 6.979696 0.246645
+v 1.913359 7.680555 0.246645
+v 1.707387 5.334164 0.880575
+v 2.452614 5.334164 0.638432
+v 2.246643 5.746116 1.272368
+v 2.991871 5.746119 0.246645
+v 2.452614 5.334164 -0.145141
+v 1.246802 5.334167 0.246645
+v 1.040824 5.746118 0.880577
+v 1.707387 5.334164 -0.387284
+v 1.040824 5.746118 -0.387286
+v 2.246643 5.746116 -0.779077
+v 3.119178 6.412684 0.638434
+v 3.119178 6.412684 -0.145143
+v 1.913359 6.412684 1.514516
+v 2.658596 6.412684 1.272374
+v 0.707541 6.412684 0.638434
+v 1.168123 6.412684 1.272374
+v 1.168123 6.412684 -0.779084
+v 0.707541 6.412684 -0.145143
+v 2.658596 6.412684 -0.779084
+v 1.913359 6.412684 -1.021226
+v 2.785895 7.079250 0.880577
+v 1.580076 7.079252 1.272368
+v 0.834848 7.079249 0.246645
+v 1.580076 7.079252 -0.779077
+v 2.785895 7.079250 -0.387286
+v 2.119332 7.491204 0.880575
+v 2.579917 7.491201 0.246645
+v 1.374105 7.491204 0.638432
+v 1.374105 7.491204 -0.145141
+v 2.119332 7.491204 -0.387284
+vn 0.0967 0.1620 -0.9820
+vn 0.2864 0.1620 -0.9443
+vn 0.4652 0.1620 -0.8703
+vn 0.6260 0.1620 -0.7628
+vn 0.7628 0.1620 -0.6260
+vn 0.8703 0.1620 -0.4652
+vn 0.9443 0.1620 -0.2864
+vn 0.9820 0.1620 -0.0967
+vn 0.9820 0.1620 0.0967
+vn 0.9443 0.1620 0.2864
+vn 0.8703 0.1620 0.4652
+vn 0.7628 0.1620 0.6260
+vn 0.6260 0.1620 0.7628
+vn 0.4652 0.1620 0.8703
+vn 0.2864 0.1620 0.9443
+vn 0.0967 0.1620 0.9820
+vn -0.0967 0.1620 0.9820
+vn -0.2865 0.1620 0.9443
+vn -0.4652 0.1620 0.8703
+vn -0.6260 0.1620 0.7628
+vn -0.7628 0.1620 0.6260
+vn -0.8703 0.1620 0.4652
+vn -0.9443 0.1620 0.2864
+vn -0.9820 0.1620 0.0967
+vn -0.9820 0.1620 -0.0967
+vn -0.9443 0.1620 -0.2865
+vn -0.8703 0.1620 -0.4652
+vn -0.7628 0.1620 -0.6260
+vn -0.6260 0.1620 -0.7628
+vn -0.4652 0.1620 -0.8703
+vn 0.7694 0.0969 -0.6314
+vn -0.2864 0.1620 -0.9443
+vn -0.0967 0.1620 -0.9820
+vn 0.0000 -1.0000 0.0000
+vn -0.7610 -0.6063 -0.2308
+vn 0.4692 0.0969 0.8778
+vn -0.9524 0.0969 0.2889
+vn 0.0976 0.0969 -0.9905
+vn -0.0976 0.0969 -0.9905
+vn 0.9524 0.0969 0.2889
+vn -0.4692 0.0969 0.8778
+vn -0.7694 0.0969 -0.6314
+vn 0.8778 0.0969 -0.4692
+vn 0.2889 0.0969 0.9524
+vn -0.9905 0.0969 0.0976
+vn 0.2889 0.0969 -0.9524
+vn 0.8778 0.0969 0.4692
+vn -0.6314 0.0969 0.7694
+vn -0.6314 0.0969 -0.7694
+vn 0.9524 0.0969 -0.2889
+vn 0.0976 0.0969 0.9905
+vn -0.9905 0.0969 -0.0976
+vn 0.4692 0.0969 -0.8778
+vn 0.7694 0.0969 0.6314
+vn -0.7694 0.0969 0.6314
+vn -0.4692 0.0969 -0.8778
+vn 0.9905 0.0969 -0.0976
+vn -0.0976 0.0969 0.9905
+vn -0.9524 0.0969 -0.2889
+vn 0.6314 0.0969 -0.7694
+vn 0.6314 0.0969 0.7694
+vn -0.8778 0.0969 0.4692
+vn -0.2889 0.0969 -0.9524
+vn 0.9905 0.0969 0.0976
+vn -0.2889 0.0969 0.9524
+vn -0.8778 0.0969 -0.4692
+vn 0.5623 0.6794 0.4714
+vn 0.5508 0.3489 0.7582
+vn -0.7247 -0.5699 -0.3874
+vn 0.4131 0.2612 0.8724
+vn 0.0979 0.0514 -0.9939
+vn -0.6633 -0.5136 -0.5443
+vn 0.2583 0.1600 0.9527
+vn 0.2857 0.1763 -0.9420
+vn -0.5710 -0.4356 -0.6958
+vn 0.0938 0.0489 0.9944
+vn 0.4520 0.2838 -0.8456
+vn -0.4441 -0.3353 -0.8309
+vn -0.0722 -0.0673 0.9951
+vn 0.5892 0.3706 -0.7180
+vn -0.2835 -0.2154 -0.9345
+vn -0.2317 -0.1835 0.9553
+vn 0.6955 0.4364 -0.5708
+vn -0.0977 -0.0829 -0.9918
+vn -0.3778 -0.2948 0.8777
+vn 0.7721 0.4833 -0.4127
+vn -0.5053 -0.3963 0.7665
+vn 0.8213 0.5132 -0.2491
+vn -0.6107 -0.4838 0.6269
+vn 0.8452 0.5280 -0.0832
+vn -0.6915 -0.5531 0.4645
+vn 0.8442 0.5279 0.0934
+vn -0.7465 -0.6010 0.2855
+vn 0.8140 0.5102 0.2777
+vn -0.7747 -0.6249 0.0963
+vn 0.7542 0.4744 0.4541
+vn -0.7771 -0.6247 -0.0765
+vn 0.6657 0.4205 0.6165
+vn 0.8213 -0.5007 0.2735
+vn -0.6166 0.2821 -0.7350
+vn 0.7739 -0.4795 0.4137
+vn -0.4773 0.2052 -0.8544
+vn -0.0979 -0.0417 0.9943
+vn 0.6935 -0.4418 0.5691
+vn -0.3147 0.1158 -0.9421
+vn -0.2897 0.0617 0.9551
+vn 0.5843 -0.3893 0.7120
+vn -0.1349 0.0179 -0.9907
+vn -0.4654 0.1591 0.8707
+vn 0.4464 -0.3215 0.8351
+vn 0.0525 -0.0834 -0.9951
+vn -0.6151 0.2450 0.7495
+vn 0.2819 -0.2389 0.9292
+vn 0.2367 -0.1821 -0.9544
+vn -0.7335 0.3156 0.6020
+vn 0.0970 -0.1441 0.9848
+vn 0.4069 -0.2727 -0.8718
+vn -0.8195 0.3695 0.4380
+vn 0.5548 -0.3510 -0.7544
+vn -0.8743 0.4064 0.2652
+vn 0.6751 -0.4146 -0.6102
+vn -0.9000 0.4268 0.0886
+vn 0.7653 -0.4627 -0.4475
+vn -0.8981 0.4308 -0.0885
+vn 0.8249 -0.4950 -0.2728
+vn -0.8693 0.4185 -0.2630
+vn 0.8540 -0.5121 -0.0917
+vn -0.8131 0.3895 -0.4326
+vn 0.8529 -0.5140 0.0918
+vn -0.7289 0.3439 -0.5920
+vn 0.5064 -0.8125 0.2887
+vn -0.5587 0.5384 -0.6309
+vn 0.5300 -0.8424 0.0975
+vn -0.6257 0.6235 -0.4688
+vn 0.5300 -0.8424 -0.0975
+vn -0.6719 0.6821 -0.2887
+vn 0.5064 -0.8125 -0.2886
+vn -0.6955 0.7119 -0.0975
+vn 0.4602 -0.7540 -0.4688
+vn -0.6955 0.7119 0.0975
+vn 0.3932 -0.6689 -0.6309
+vn -0.6719 0.6821 0.2887
+vn 0.3078 -0.5607 -0.7687
+vn -0.6257 0.6235 0.4688
+vn 0.2075 -0.4334 -0.8770
+vn -0.0224 -0.1418 0.9896
+vn -0.5587 0.5384 0.6309
+vn 0.0960 -0.2919 -0.9516
+vn 0.0960 -0.2919 0.9516
+vn -0.4733 0.4302 0.7687
+vn -0.0224 -0.1418 -0.9896
+vn 0.2075 -0.4334 0.8770
+vn -0.3730 0.3029 0.8770
+vn -0.1431 0.0113 -0.9896
+vn 0.3078 -0.5607 0.7687
+vn -0.2615 0.1615 0.9516
+vn -0.2615 0.1614 -0.9516
+vn 0.3932 -0.6689 0.6309
+vn -0.1431 0.0113 0.9896
+vn -0.3730 0.3029 -0.8770
+vn -0.4733 0.4302 -0.7687
+vn 0.4602 -0.7540 0.4688
+vn -0.6434 -0.7592 -0.0980
+vn 0.5463 0.5483 0.6332
+vn -0.6741 -0.6795 -0.2895
+vn 0.5048 0.3969 0.7666
+vn -0.6774 -0.5691 -0.4662
+vn 0.4409 0.2335 0.8666
+vn -0.2599 0.3370 -0.9049
+vn -0.6539 -0.4347 -0.6192
+vn 0.3588 0.0661 0.9311
+vn -0.1522 0.4739 -0.8674
+vn -0.6066 -0.2845 -0.7423
+vn 0.2627 -0.0987 0.9598
+vn -0.0418 0.5968 -0.8013
+vn -0.5394 -0.1262 -0.8325
+vn 0.1564 -0.2557 0.9540
+vn 0.0691 0.7030 -0.7079
+vn -0.4566 0.0334 -0.8890
+vn 0.0433 -0.4006 0.9152
+vn 0.1776 0.7890 -0.5882
+vn -0.3623 0.1892 -0.9127
+vn -0.0735 -0.5297 0.8450
+vn 0.2806 0.8510 -0.4440
+vn -0.1908 -0.6394 0.7448
+vn 0.3742 0.8847 -0.2781
+vn -0.3053 -0.7258 0.6164
+vn 0.4537 0.8860 -0.0955
+vn -0.4128 -0.7846 0.4626
+vn 0.5142 0.8522 0.0968
+vn -0.5084 -0.8117 0.2875
+vn 0.5514 0.7825 0.2892
+vn -0.5869 -0.8037 0.0978
+vn -0.0338 -0.9213 -0.3874
+vn 0.8182 0.5179 -0.2496
+vn 0.0810 -0.8636 -0.4977
+vn 0.7548 0.6490 -0.0956
+vn 0.1916 -0.7895 -0.5830
+vn 0.6428 0.7607 0.0900
+vn 0.2969 -0.7038 -0.6454
+vn -0.3971 0.2665 0.8783
+vn 0.4752 0.8274 0.2993
+vn 0.3963 -0.6090 -0.6871
+vn -0.4583 0.1337 0.8787
+vn 0.2622 0.8209 0.5073
+vn 0.4895 -0.5065 -0.7098
+vn -0.4995 0.0240 0.8660
+vn 0.0379 0.7328 0.6794
+vn 0.5764 -0.3962 -0.7147
+vn -0.5314 -0.0682 0.8444
+vn -0.1570 0.5868 0.7944
+vn 0.6565 -0.2773 -0.7015
+vn -0.5601 -0.1502 0.8147
+vn -0.3012 0.4216 0.8553
+vn 0.7283 -0.1484 -0.6690
+vn -0.5881 -0.2295 0.7756
+vn 0.7890 -0.0078 -0.6143
+vn -0.6146 -0.3129 0.7241
+vn 0.8335 0.1452 -0.5331
+vn -0.6366 -0.4058 0.6558
+vn 0.8533 0.3082 -0.4206
+vn -0.6478 -0.5124 0.5638
+vn 0.8373 0.4732 -0.2737
+vn -0.1505 -0.9563 -0.2508
+vn 0.7751 0.6245 -0.0963
+vn 0.8561 -0.0693 -0.5121
+vn -0.7940 -0.3946 0.4625
+vn 0.8558 0.1008 -0.5073
+vn -0.7381 -0.5233 0.4258
+vn 0.8337 0.2546 -0.4900
+vn -0.6657 -0.6426 0.3794
+vn 0.7940 0.3946 -0.4625
+vn -0.5741 -0.7529 0.3218
+vn 0.7381 0.5233 -0.4258
+vn -0.4596 -0.8520 0.2509
+vn 0.6656 0.6426 -0.3794
+vn -0.3175 -0.9340 0.1640
+vn 0.5741 0.7529 -0.3218
+vn -0.1448 -0.9877 0.0596
+vn -0.4753 0.8251 0.3055
+vn 0.4596 0.8520 -0.2509
+vn 0.0560 -0.9966 -0.0603
+vn -0.6425 0.6533 0.4006
+vn 0.3175 0.9340 -0.1640
+vn 0.2711 -0.9442 -0.1871
+vn -0.7592 0.4556 0.4648
+vn 0.1448 0.9877 -0.0596
+vn 0.4752 -0.8251 -0.3055
+vn -0.8273 0.2563 0.5000
+vn -0.0560 0.9966 0.0603
+vn 0.6425 -0.6533 -0.4006
+vn -0.8561 0.0693 0.5121
+vn -0.2711 0.9442 0.1871
+vn 0.7592 -0.4556 -0.4648
+vn -0.8558 -0.1008 0.5074
+vn 0.8272 -0.2563 -0.5000
+vn -0.8337 -0.2546 0.4900
+vn 0.2865 0.1620 -0.9443
+vn -0.7465 -0.6010 -0.2855
+vn 0.5892 0.3706 0.7180
+vn -0.6916 -0.5531 -0.4645
+vn 0.4520 0.2838 0.8457
+vn 0.0938 0.0489 -0.9944
+vn -0.6107 -0.4838 -0.6269
+vn 0.2857 0.1763 0.9420
+vn 0.2583 0.1600 -0.9527
+vn -0.5053 -0.3963 -0.7665
+vn 0.0979 0.0514 0.9939
+vn 0.4131 0.2612 -0.8724
+vn -0.3778 -0.2948 -0.8777
+vn -0.0977 -0.0829 0.9918
+vn 0.5508 0.3489 -0.7582
+vn -0.2317 -0.1835 -0.9553
+vn -0.2835 -0.2154 0.9345
+vn 0.6657 0.4205 -0.6165
+vn -0.0722 -0.0673 -0.9951
+vn -0.4441 -0.3354 0.8309
+vn 0.7542 0.4744 -0.4541
+vn -0.5710 -0.4356 0.6958
+vn 0.8140 0.5102 -0.2777
+vn -0.6633 -0.5136 0.5443
+vn 0.8442 0.5279 -0.0934
+vn -0.7247 -0.5699 0.3874
+vn 0.8452 0.5280 0.0832
+vn -0.7610 -0.6063 0.2308
+vn 0.8213 0.5132 0.2491
+vn -0.7771 -0.6247 0.0765
+vn 0.7721 0.4833 0.4127
+vn -0.7747 -0.6249 -0.0963
+vn 0.6955 0.4364 0.5708
+vn 0.8263 -0.5043 0.2507
+vn -0.6092 0.2789 -0.7423
+vn 0.7574 -0.4736 0.4495
+vn -0.4621 0.1981 -0.8644
+vn -0.1670 -0.0080 0.9859
+vn 0.6628 -0.4294 0.6135
+vn -0.2887 0.1035 -0.9518
+vn -0.3450 0.0889 0.9344
+vn 0.5374 -0.3689 0.7584
+vn -0.0980 0.0001 -0.9952
+vn -0.5038 0.1781 0.8452
+vn 0.3840 -0.2932 0.8755
+vn 0.0975 -0.1052 -0.9897
+vn -0.6379 0.2561 0.7263
+vn 0.2089 -0.2047 0.9563
+vn 0.2841 -0.2050 -0.9366
+vn -0.7447 0.3209 0.5852
+vn 0.0214 -0.1078 0.9939
+vn 0.4506 -0.2935 -0.8431
+vn -0.8237 0.3713 0.4285
+vn 0.5900 -0.3675 -0.7189
+vn -0.8754 0.4068 0.2613
+vn 0.6995 -0.4257 -0.5740
+vn -0.9001 0.4268 0.0879
+vn 0.7791 -0.4686 -0.4164
+vn -0.8981 0.4308 -0.0881
+vn 0.8304 -0.4971 -0.2519
+vn -0.8691 0.4184 -0.2636
+vn 0.8548 -0.5122 -0.0842
+vn -0.8123 0.3893 -0.4342
+vn 0.8533 -0.5145 0.0840
+vn -0.7262 0.3429 -0.5959
+vn 0.5064 -0.8125 -0.2887
+vn -0.6719 0.6821 0.2886
+vn -0.2615 0.1615 -0.9516
+vn -0.6774 -0.5691 -0.4661
+vn -0.6066 -0.2845 -0.7424
+vn -0.5394 -0.1262 -0.8326
+vn 0.0691 0.7029 -0.7079
+vn -0.5084 -0.8117 0.2876
+vn -0.6013 -0.7676 0.2220
+vn 0.6543 0.7498 0.0980
+vn -0.4851 -0.8744 0.0046
+vn 0.5037 0.8147 0.2873
+vn -0.3039 -0.9240 -0.2321
+vn 0.3368 0.8255 0.4530
+vn -0.0831 -0.8926 -0.4431
+vn -0.4136 0.2370 0.8791
+vn 0.1728 0.7910 0.5869
+vn 0.1337 -0.7938 -0.5933
+vn -0.4865 0.0659 0.8712
+vn 0.0228 0.7232 0.6902
+vn 0.3179 -0.6613 -0.6794
+vn -0.5422 -0.1229 0.8312
+vn -0.1098 0.6311 0.7679
+vn 0.4637 -0.5210 -0.7166
+vn -0.5751 -0.3217 0.7521
+vn -0.2256 0.5190 0.8245
+vn 0.5768 -0.3841 -0.7209
+vn -0.5792 -0.5165 0.6307
+vn -0.3264 0.3879 0.8620
+vn 0.6646 -0.2529 -0.7031
+vn -0.5503 -0.6893 0.4712
+vn 0.7324 -0.1261 -0.6691
+vn -0.4887 -0.8241 0.2865
+vn 0.7835 -0.0011 -0.6215
+vn -0.3997 -0.9118 0.0940
+vn 0.8188 0.1246 -0.5604
+vn -0.2918 -0.9522 -0.0901
+vn 0.8375 0.2530 -0.4843
+vn -0.6577 -0.6402 0.3970
+vn 0.8364 0.3851 -0.3901
+vn 0.8558 0.1008 -0.5074
+vn -0.6656 -0.6426 0.3794
+vn -0.4753 0.8251 0.3056
+vn 0.2711 -0.9442 -0.1870
+vn 0.4753 -0.8251 -0.3055
+vn 0.8273 -0.2563 -0.5000
+vn 0.1024 -0.9435 0.3151
+vn 0.7002 -0.6617 0.2680
+vn -0.2680 -0.9435 0.1947
+vn -0.2680 -0.9435 -0.1947
+vn 0.1024 -0.9435 -0.3151
+vn 0.9050 -0.3304 0.2680
+vn 0.0247 -0.3304 0.9435
+vn -0.8897 -0.3304 0.3151
+vn -0.5746 -0.3304 -0.7488
+vn 0.5346 -0.3304 -0.7779
+vn 0.8026 -0.1256 0.5831
+vn -0.3066 -0.1256 0.9435
+vn -0.9921 -0.1256 0.0000
+vn -0.3066 -0.1256 -0.9435
+vn 0.8026 -0.1256 -0.5831
+vn 0.4089 0.6617 0.6284
+vn -0.4713 0.6617 0.5831
+vn -0.7002 0.6617 -0.2680
+vn 0.0385 0.6617 -0.7488
+vn 0.7240 0.6617 -0.1947
+vn 0.2680 0.9435 -0.1947
+vn 0.4911 0.7947 -0.3568
+vn 0.4089 0.6617 -0.6284
+vn -0.1024 0.9435 -0.3151
+vn -0.1876 0.7947 -0.5773
+vn -0.4713 0.6617 -0.5831
+vn -0.3313 0.9435 0.0000
+vn -0.6071 0.7947 0.0000
+vn -0.7002 0.6617 0.2680
+vn -0.1024 0.9435 0.3151
+vn -0.1876 0.7947 0.5773
+vn 0.0385 0.6617 0.7488
+vn 0.2680 0.9435 0.1947
+vn 0.4911 0.7947 0.3568
+vn 0.7240 0.6617 0.1947
+vn 0.8897 0.3304 -0.3151
+vn 0.7947 0.1876 -0.5773
+vn 0.5746 0.3304 -0.7488
+vn -0.0247 0.3304 -0.9435
+vn -0.3035 0.1876 -0.9342
+vn -0.5346 0.3304 -0.7779
+vn -0.9050 0.3304 -0.2680
+vn -0.9822 0.1876 0.0000
+vn -0.9050 0.3304 0.2680
+vn -0.5346 0.3304 0.7779
+vn -0.3035 0.1876 0.9342
+vn -0.0247 0.3304 0.9435
+vn 0.5746 0.3304 0.7488
+vn 0.7947 0.1876 0.5773
+vn 0.8897 0.3304 0.3151
+vn 0.3066 0.1256 -0.9435
+vn 0.3035 -0.1876 -0.9342
+vn 0.0247 -0.3304 -0.9435
+vn -0.8026 0.1256 -0.5831
+vn -0.7947 -0.1876 -0.5773
+vn -0.8897 -0.3304 -0.3151
+vn -0.8026 0.1256 0.5831
+vn -0.7947 -0.1876 0.5773
+vn -0.5746 -0.3304 0.7488
+vn 0.3066 0.1256 0.9435
+vn 0.3035 -0.1876 0.9342
+vn 0.5346 -0.3304 0.7779
+vn 0.9921 0.1256 0.0000
+vn 0.9822 -0.1876 0.0000
+vn 0.9050 -0.3304 -0.2680
+vn 0.4713 -0.6617 -0.5831
+vn 0.1876 -0.7947 -0.5773
+vn -0.0385 -0.6617 -0.7488
+vn -0.4089 -0.6617 -0.6284
+vn -0.4911 -0.7947 -0.3568
+vn -0.7240 -0.6617 -0.1947
+vn -0.7240 -0.6617 0.1947
+vn -0.4911 -0.7947 0.3568
+vn -0.4089 -0.6617 0.6284
+vn 0.7002 -0.6617 -0.2680
+vn 0.6071 -0.7947 0.0000
+vn 0.3313 -0.9435 0.0000
+vn -0.0385 -0.6617 0.7488
+vn 0.1876 -0.7947 0.5773
+vn 0.4713 -0.6617 0.5831
+usemtl Material.008
+s off
+f 2//1 3//1 1//1
+f 4//2 5//2 3//2
+f 6//3 7//3 5//3
+f 8//4 9//4 7//4
+f 10//5 11//5 9//5
+f 12//6 13//6 11//6
+f 14//7 15//7 13//7
+f 16//8 17//8 15//8
+f 18//9 19//9 17//9
+f 20//10 21//10 19//10
+f 22//11 23//11 21//11
+f 24//12 25//12 23//12
+f 26//13 27//13 25//13
+f 28//14 29//14 27//14
+f 30//15 31//15 29//15
+f 32//16 33//16 31//16
+f 34//17 35//17 33//17
+f 36//18 37//18 35//18
+f 38//19 39//19 37//19
+f 40//20 41//20 39//20
+f 42//21 43//21 41//21
+f 44//22 45//22 43//22
+f 46//23 47//23 45//23
+f 48//24 49//24 47//24
+f 50//25 51//25 49//25
+f 52//26 53//26 51//26
+f 54//27 55//27 53//27
+f 56//28 57//28 55//28
+f 58//29 59//29 57//29
+f 60//30 61//30 59//30
+f 10//31 70//31 12//31
+f 61//32 64//32 63//32
+f 64//33 1//33 63//33
+f 15//34 31//34 47//34
+f 90//35 123//35 91//35
+f 28//36 79//36 30//36
+f 46//37 88//37 48//37
+f 4//38 65//38 66//38
+f 64//39 65//39 2//39
+f 20//40 75//40 22//40
+f 38//41 84//41 40//41
+f 56//42 93//42 58//42
+f 12//43 71//43 14//43
+f 30//44 80//44 32//44
+f 48//45 89//45 50//45
+f 4//46 67//46 6//46
+f 22//47 76//47 24//47
+f 40//48 85//48 42//48
+f 58//49 94//49 60//49
+f 14//50 72//50 16//50
+f 32//51 81//51 34//51
+f 52//52 89//52 90//52
+f 6//53 68//53 8//53
+f 24//54 77//54 26//54
+f 42//55 86//55 44//55
+f 60//56 95//56 62//56
+f 16//57 73//57 18//57
+f 36//58 81//58 82//58
+f 52//59 91//59 54//59
+f 8//60 69//60 10//60
+f 26//61 78//61 28//61
+f 44//62 87//62 46//62
+f 64//63 95//63 96//63
+f 18//64 74//64 20//64
+f 36//65 83//65 38//65
+f 54//66 92//66 56//66
+f 108//67 203//67 204//67
+f 78//68 109//68 110//68
+f 91//69 124//69 92//69
+f 79//70 110//70 111//70
+f 65//71 98//71 66//71
+f 92//72 125//72 93//72
+f 80//73 111//73 112//73
+f 66//74 99//74 67//74
+f 93//75 126//75 94//75
+f 81//76 112//76 113//76
+f 67//77 100//77 68//77
+f 94//78 127//78 95//78
+f 82//79 113//79 114//79
+f 68//80 101//80 69//80
+f 95//81 128//81 96//81
+f 83//82 114//82 115//82
+f 69//83 102//83 70//83
+f 96//84 97//84 65//84
+f 84//85 115//85 116//85
+f 70//86 103//86 71//86
+f 85//87 116//87 117//87
+f 71//88 104//88 72//88
+f 86//89 117//89 118//89
+f 72//90 105//90 73//90
+f 87//91 118//91 119//91
+f 74//92 105//92 106//92
+f 88//93 119//93 120//93
+f 75//94 106//94 107//94
+f 89//95 120//95 121//95
+f 76//96 107//96 108//96
+f 89//97 122//97 90//97
+f 77//98 108//98 109//98
+f 90//99 155//99 154//99
+f 77//100 142//100 141//100
+f 92//101 155//101 91//101
+f 78//102 143//102 142//102
+f 66//103 129//103 65//103
+f 93//104 156//104 92//104
+f 79//105 144//105 143//105
+f 67//106 130//106 66//106
+f 94//107 157//107 93//107
+f 80//108 145//108 144//108
+f 68//109 131//109 67//109
+f 95//110 158//110 94//110
+f 81//111 146//111 145//111
+f 69//112 132//112 68//112
+f 96//113 159//113 95//113
+f 82//114 147//114 146//114
+f 70//115 133//115 69//115
+f 65//116 160//116 96//116
+f 83//117 148//117 147//117
+f 71//118 134//118 70//118
+f 84//119 149//119 148//119
+f 72//120 135//120 71//120
+f 85//121 150//121 149//121
+f 73//122 136//122 72//122
+f 86//123 151//123 150//123
+f 74//124 137//124 73//124
+f 87//125 152//125 151//125
+f 74//126 139//126 138//126
+f 88//127 153//127 152//127
+f 75//128 140//128 139//128
+f 89//129 154//129 153//129
+f 76//130 141//130 140//130
+f 154//131 187//131 186//131
+f 141//132 172//132 140//132
+f 154//133 185//133 153//133
+f 139//134 172//134 171//134
+f 153//135 184//135 152//135
+f 138//136 171//136 170//136
+f 151//137 184//137 183//137
+f 137//138 170//138 169//138
+f 151//139 182//139 150//139
+f 136//140 169//140 168//140
+f 149//141 182//141 181//141
+f 136//142 167//142 135//142
+f 148//143 181//143 180//143
+f 135//144 166//144 134//144
+f 147//145 180//145 179//145
+f 129//146 192//146 160//146
+f 133//147 166//147 165//147
+f 147//148 178//148 146//148
+f 159//149 192//149 191//149
+f 133//150 164//150 132//150
+f 145//151 178//151 177//151
+f 158//152 191//152 190//152
+f 131//153 164//153 163//153
+f 144//154 177//154 176//154
+f 158//155 189//155 157//155
+f 131//156 162//156 130//156
+f 144//157 175//157 143//157
+f 157//158 188//158 156//158
+f 130//159 161//159 129//159
+f 142//160 175//160 174//160
+f 141//161 174//161 173//161
+f 155//162 188//162 187//162
+f 121//163 218//163 122//163
+f 109//164 204//164 205//164
+f 122//165 219//165 123//165
+f 110//166 205//166 206//166
+f 123//167 220//167 124//167
+f 111//168 206//168 207//168
+f 97//169 194//169 98//169
+f 124//170 221//170 125//170
+f 112//171 207//171 208//171
+f 98//172 195//172 99//172
+f 125//173 222//173 126//173
+f 113//174 208//174 209//174
+f 100//175 195//175 196//175
+f 126//176 223//176 127//176
+f 114//177 209//177 210//177
+f 101//178 196//178 197//178
+f 127//179 224//179 128//179
+f 115//180 210//180 211//180
+f 102//181 197//181 198//181
+f 128//182 193//182 97//182
+f 115//183 212//183 116//183
+f 103//184 198//184 199//184
+f 116//185 213//185 117//185
+f 104//186 199//186 200//186
+f 117//187 214//187 118//187
+f 105//188 200//188 201//188
+f 118//189 215//189 119//189
+f 106//190 201//190 202//190
+f 119//191 216//191 120//191
+f 107//192 202//192 203//192
+f 120//193 217//193 121//193
+f 108//194 235//194 107//194
+f 121//195 250//195 249//195
+f 109//196 236//196 108//196
+f 122//197 251//197 250//197
+f 110//198 237//198 109//198
+f 123//199 252//199 251//199
+f 111//200 238//200 110//200
+f 97//201 226//201 225//201
+f 124//202 253//202 252//202
+f 112//203 239//203 111//203
+f 98//204 227//204 226//204
+f 125//205 254//205 253//205
+f 113//206 240//206 112//206
+f 99//207 228//207 227//207
+f 126//208 255//208 254//208
+f 114//209 241//209 113//209
+f 100//210 229//210 228//210
+f 127//211 256//211 255//211
+f 115//212 242//212 114//212
+f 101//213 230//213 229//213
+f 128//214 225//214 256//214
+f 116//215 243//215 115//215
+f 102//216 231//216 230//216
+f 117//217 244//217 116//217
+f 103//218 232//218 231//218
+f 118//219 245//219 117//219
+f 104//220 233//220 232//220
+f 119//221 246//221 118//221
+f 105//222 234//222 233//222
+f 120//223 247//223 119//223
+f 107//224 234//224 106//224
+f 121//225 248//225 120//225
+f 246//226 277//226 245//226
+f 232//227 265//227 264//227
+f 247//228 278//228 246//228
+f 234//229 265//229 233//229
+f 248//230 279//230 247//230
+f 235//231 266//231 234//231
+f 249//232 280//232 248//232
+f 236//233 267//233 235//233
+f 249//234 282//234 281//234
+f 237//235 268//235 236//235
+f 250//236 283//236 282//236
+f 238//237 269//237 237//237
+f 251//238 284//238 283//238
+f 239//239 270//239 238//239
+f 225//240 258//240 257//240
+f 252//241 285//241 284//241
+f 240//242 271//242 239//242
+f 226//243 259//243 258//243
+f 253//244 286//244 285//244
+f 241//245 272//245 240//245
+f 227//246 260//246 259//246
+f 254//247 287//247 286//247
+f 242//248 273//248 241//248
+f 228//249 261//249 260//249
+f 255//250 288//250 287//250
+f 243//251 274//251 242//251
+f 229//252 262//252 261//252
+f 256//253 257//253 288//253
+f 244//254 275//254 243//254
+f 230//255 263//255 262//255
+f 245//256 276//256 244//256
+f 231//257 264//257 263//257
+f 2//1 4//1 3//1
+f 4//258 6//258 5//258
+f 6//3 8//3 7//3
+f 8//4 10//4 9//4
+f 10//5 12//5 11//5
+f 12//6 14//6 13//6
+f 14//7 16//7 15//7
+f 16//8 18//8 17//8
+f 18//9 20//9 19//9
+f 20//10 22//10 21//10
+f 22//11 24//11 23//11
+f 24//12 26//12 25//12
+f 26//13 28//13 27//13
+f 28//14 30//14 29//14
+f 30//15 32//15 31//15
+f 32//16 34//16 33//16
+f 34//17 36//17 35//17
+f 36//18 38//18 37//18
+f 38//19 40//19 39//19
+f 40//20 42//20 41//20
+f 42//21 44//21 43//21
+f 44//22 46//22 45//22
+f 46//23 48//23 47//23
+f 48//24 50//24 49//24
+f 50//25 52//25 51//25
+f 52//26 54//26 53//26
+f 54//27 56//27 55//27
+f 56//28 58//28 57//28
+f 58//29 60//29 59//29
+f 60//30 62//30 61//30
+f 10//31 69//31 70//31
+f 61//32 62//32 64//32
+f 64//33 2//33 1//33
+f 63//34 1//34 3//34
+f 3//34 5//34 7//34
+f 7//34 9//34 11//34
+f 11//34 13//34 7//34
+f 13//34 15//34 7//34
+f 15//34 17//34 19//34
+f 19//34 21//34 15//34
+f 21//34 23//34 15//34
+f 23//34 25//34 31//34
+f 25//34 27//34 31//34
+f 27//34 29//34 31//34
+f 31//34 33//34 35//34
+f 35//34 37//34 39//34
+f 39//34 41//34 43//34
+f 43//34 45//34 47//34
+f 47//34 49//34 51//34
+f 51//34 53//34 55//34
+f 55//34 57//34 63//34
+f 57//34 59//34 63//34
+f 59//34 61//34 63//34
+f 63//34 3//34 7//34
+f 31//34 35//34 47//34
+f 35//34 39//34 47//34
+f 39//34 43//34 47//34
+f 47//34 51//34 63//34
+f 51//34 55//34 63//34
+f 63//34 7//34 15//34
+f 15//34 23//34 31//34
+f 63//34 15//34 47//34
+f 90//259 122//259 123//259
+f 28//36 78//36 79//36
+f 46//37 87//37 88//37
+f 4//38 2//38 65//38
+f 64//39 96//39 65//39
+f 20//40 74//40 75//40
+f 38//41 83//41 84//41
+f 56//42 92//42 93//42
+f 12//43 70//43 71//43
+f 30//44 79//44 80//44
+f 48//45 88//45 89//45
+f 4//46 66//46 67//46
+f 22//47 75//47 76//47
+f 40//48 84//48 85//48
+f 58//49 93//49 94//49
+f 14//50 71//50 72//50
+f 32//51 80//51 81//51
+f 52//52 50//52 89//52
+f 6//53 67//53 68//53
+f 24//54 76//54 77//54
+f 42//55 85//55 86//55
+f 60//56 94//56 95//56
+f 16//57 72//57 73//57
+f 36//58 34//58 81//58
+f 52//59 90//59 91//59
+f 8//60 68//60 69//60
+f 26//61 77//61 78//61
+f 44//62 86//62 87//62
+f 64//63 62//63 95//63
+f 18//64 73//64 74//64
+f 36//65 82//65 83//65
+f 54//66 91//66 92//66
+f 108//67 107//67 203//67
+f 78//260 77//260 109//260
+f 91//261 123//261 124//261
+f 79//262 78//262 110//262
+f 65//263 97//263 98//263
+f 92//264 124//264 125//264
+f 80//265 79//265 111//265
+f 66//266 98//266 99//266
+f 93//267 125//267 126//267
+f 81//268 80//268 112//268
+f 67//269 99//269 100//269
+f 94//270 126//270 127//270
+f 82//271 81//271 113//271
+f 68//272 100//272 101//272
+f 95//273 127//273 128//273
+f 83//274 82//274 114//274
+f 69//275 101//275 102//275
+f 96//276 128//276 97//276
+f 84//277 83//277 115//277
+f 70//278 102//278 103//278
+f 85//279 84//279 116//279
+f 71//280 103//280 104//280
+f 86//281 85//281 117//281
+f 72//282 104//282 105//282
+f 87//283 86//283 118//283
+f 74//284 73//284 105//284
+f 88//285 87//285 119//285
+f 75//286 74//286 106//286
+f 89//287 88//287 120//287
+f 76//288 75//288 107//288
+f 89//289 121//289 122//289
+f 77//290 76//290 108//290
+f 90//291 91//291 155//291
+f 77//292 78//292 142//292
+f 92//293 156//293 155//293
+f 78//294 79//294 143//294
+f 66//295 130//295 129//295
+f 93//296 157//296 156//296
+f 79//297 80//297 144//297
+f 67//298 131//298 130//298
+f 94//299 158//299 157//299
+f 80//300 81//300 145//300
+f 68//301 132//301 131//301
+f 95//302 159//302 158//302
+f 81//303 82//303 146//303
+f 69//304 133//304 132//304
+f 96//305 160//305 159//305
+f 82//306 83//306 147//306
+f 70//307 134//307 133//307
+f 65//308 129//308 160//308
+f 83//309 84//309 148//309
+f 71//310 135//310 134//310
+f 84//311 85//311 149//311
+f 72//312 136//312 135//312
+f 85//313 86//313 150//313
+f 73//314 137//314 136//314
+f 86//315 87//315 151//315
+f 74//316 138//316 137//316
+f 87//317 88//317 152//317
+f 74//318 75//318 139//318
+f 88//319 89//319 153//319
+f 75//320 76//320 140//320
+f 89//321 90//321 154//321
+f 76//322 77//322 141//322
+f 154//131 155//131 187//131
+f 141//132 173//132 172//132
+f 154//133 186//133 185//133
+f 139//134 140//134 172//134
+f 153//135 185//135 184//135
+f 138//136 139//136 171//136
+f 151//323 152//323 184//323
+f 137//138 138//138 170//138
+f 151//139 183//139 182//139
+f 136//140 137//140 169//140
+f 149//141 150//141 182//141
+f 136//324 168//324 167//324
+f 148//143 149//143 181//143
+f 135//144 167//144 166//144
+f 147//145 148//145 180//145
+f 129//146 161//146 192//146
+f 133//147 134//147 166//147
+f 147//148 179//148 178//148
+f 159//149 160//149 192//149
+f 133//150 165//150 164//150
+f 145//151 146//151 178//151
+f 158//152 159//152 191//152
+f 131//153 132//153 164//153
+f 144//154 145//154 177//154
+f 158//155 190//155 189//155
+f 131//156 163//156 162//156
+f 144//325 176//325 175//325
+f 157//158 189//158 188//158
+f 130//159 162//159 161//159
+f 142//160 143//160 175//160
+f 141//161 142//161 174//161
+f 155//162 156//162 188//162
+f 121//163 217//163 218//163
+f 109//164 108//164 204//164
+f 122//165 218//165 219//165
+f 110//166 109//166 205//166
+f 123//326 219//326 220//326
+f 111//168 110//168 206//168
+f 97//169 193//169 194//169
+f 124//170 220//170 221//170
+f 112//171 111//171 207//171
+f 98//172 194//172 195//172
+f 125//327 221//327 222//327
+f 113//174 112//174 208//174
+f 100//175 99//175 195//175
+f 126//328 222//328 223//328
+f 114//177 113//177 209//177
+f 101//329 100//329 196//329
+f 127//179 223//179 224//179
+f 115//180 114//180 210//180
+f 102//181 101//181 197//181
+f 128//182 224//182 193//182
+f 115//183 211//183 212//183
+f 103//184 102//184 198//184
+f 116//185 212//185 213//185
+f 104//186 103//186 199//186
+f 117//187 213//187 214//187
+f 105//188 104//188 200//188
+f 118//189 214//189 215//189
+f 106//190 105//190 201//190
+f 119//330 215//330 216//330
+f 107//192 106//192 202//192
+f 120//193 216//193 217//193
+f 108//331 236//331 235//331
+f 121//332 122//332 250//332
+f 109//333 237//333 236//333
+f 122//334 123//334 251//334
+f 110//335 238//335 237//335
+f 123//336 124//336 252//336
+f 111//337 239//337 238//337
+f 97//338 98//338 226//338
+f 124//339 125//339 253//339
+f 112//340 240//340 239//340
+f 98//341 99//341 227//341
+f 125//342 126//342 254//342
+f 113//343 241//343 240//343
+f 99//344 100//344 228//344
+f 126//345 127//345 255//345
+f 114//346 242//346 241//346
+f 100//347 101//347 229//347
+f 127//348 128//348 256//348
+f 115//349 243//349 242//349
+f 101//350 102//350 230//350
+f 128//351 97//351 225//351
+f 116//352 244//352 243//352
+f 102//353 103//353 231//353
+f 117//354 245//354 244//354
+f 103//355 104//355 232//355
+f 118//356 246//356 245//356
+f 104//357 105//357 233//357
+f 119//358 247//358 246//358
+f 105//359 106//359 234//359
+f 120//360 248//360 247//360
+f 107//361 235//361 234//361
+f 121//362 249//362 248//362
+f 246//226 278//226 277//226
+f 232//227 233//227 265//227
+f 247//363 279//363 278//363
+f 234//229 266//229 265//229
+f 248//230 280//230 279//230
+f 235//364 267//364 266//364
+f 249//232 281//232 280//232
+f 236//233 268//233 267//233
+f 249//234 250//234 282//234
+f 237//235 269//235 268//235
+f 250//236 251//236 283//236
+f 238//237 270//237 269//237
+f 251//238 252//238 284//238
+f 239//239 271//239 270//239
+f 225//365 226//365 258//365
+f 252//241 253//241 285//241
+f 240//242 272//242 271//242
+f 226//243 227//243 259//243
+f 253//244 254//244 286//244
+f 241//366 273//366 272//366
+f 227//246 228//246 260//246
+f 254//247 255//247 287//247
+f 242//367 274//367 273//367
+f 228//249 229//249 261//249
+f 255//250 256//250 288//250
+f 243//251 275//251 274//251
+f 229//252 230//252 262//252
+f 256//253 225//253 257//253
+f 244//254 276//254 275//254
+f 230//255 231//255 263//255
+f 245//368 277//368 276//368
+f 231//257 232//257 264//257
+usemtl Material.007
+f 289//369 302//369 301//369
+f 290//370 302//370 304//370
+f 289//371 301//371 306//371
+f 289//372 306//372 308//372
+f 289//373 308//373 305//373
+f 290//374 304//374 311//374
+f 291//375 303//375 313//375
+f 292//376 307//376 315//376
+f 293//377 309//377 317//377
+f 294//378 310//378 319//378
+f 290//379 311//379 314//379
+f 291//380 313//380 316//380
+f 292//381 315//381 318//381
+f 293//382 317//382 320//382
+f 294//383 319//383 312//383
+f 295//384 321//384 326//384
+f 296//385 322//385 328//385
+f 297//386 323//386 329//386
+f 298//387 324//387 330//387
+f 299//388 325//388 327//388
+f 327//389 330//389 300//389
+f 327//390 325//390 330//390
+f 325//391 298//391 330//391
+f 330//392 329//392 300//392
+f 330//393 324//393 329//393
+f 324//394 297//394 329//394
+f 329//395 328//395 300//395
+f 329//396 323//396 328//396
+f 323//397 296//397 328//397
+f 328//398 326//398 300//398
+f 328//399 322//399 326//399
+f 322//400 295//400 326//400
+f 326//401 327//401 300//401
+f 326//402 321//402 327//402
+f 321//403 299//403 327//403
+f 312//404 325//404 299//404
+f 312//405 319//405 325//405
+f 319//406 298//406 325//406
+f 320//407 324//407 298//407
+f 320//408 317//408 324//408
+f 317//409 297//409 324//409
+f 318//410 323//410 297//410
+f 318//411 315//411 323//411
+f 315//412 296//412 323//412
+f 316//413 322//413 296//413
+f 316//414 313//414 322//414
+f 313//415 295//415 322//415
+f 314//416 321//416 295//416
+f 314//417 311//417 321//417
+f 311//418 299//418 321//418
+f 319//419 320//419 298//419
+f 319//420 310//420 320//420
+f 310//421 293//421 320//421
+f 317//422 318//422 297//422
+f 317//423 309//423 318//423
+f 309//424 292//424 318//424
+f 315//425 316//425 296//425
+f 315//426 307//426 316//426
+f 307//427 291//427 316//427
+f 313//428 314//428 295//428
+f 313//429 303//429 314//429
+f 303//430 290//430 314//430
+f 311//431 312//431 299//431
+f 311//432 304//432 312//432
+f 304//433 294//433 312//433
+f 305//434 310//434 294//434
+f 305//435 308//435 310//435
+f 308//436 293//436 310//436
+f 308//437 309//437 293//437
+f 308//438 306//438 309//438
+f 306//439 292//439 309//439
+f 306//440 307//440 292//440
+f 306//441 301//441 307//441
+f 301//442 291//442 307//442
+f 304//443 305//443 294//443
+f 304//444 302//444 305//444
+f 302//445 289//445 305//445
+f 301//446 303//446 291//446
+f 301//447 302//447 303//447
+f 302//448 290//448 303//448
+usemtl Material.006
+f 331//369 344//369 343//369
+f 332//370 344//370 346//370
+f 331//371 343//371 348//371
+f 331//372 348//372 350//372
+f 331//373 350//373 347//373
+f 332//374 346//374 353//374
+f 333//375 345//375 355//375
+f 334//376 349//376 357//376
+f 335//377 351//377 359//377
+f 336//378 352//378 361//378
+f 332//379 353//379 356//379
+f 333//380 355//380 358//380
+f 334//381 357//381 360//381
+f 335//382 359//382 362//382
+f 336//383 361//383 354//383
+f 337//384 363//384 368//384
+f 338//385 364//385 370//385
+f 339//386 365//386 371//386
+f 340//387 366//387 372//387
+f 341//388 367//388 369//388
+f 369//389 372//389 342//389
+f 369//390 367//390 372//390
+f 367//391 340//391 372//391
+f 372//392 371//392 342//392
+f 372//393 366//393 371//393
+f 366//394 339//394 371//394
+f 371//395 370//395 342//395
+f 371//396 365//396 370//396
+f 365//397 338//397 370//397
+f 370//398 368//398 342//398
+f 370//399 364//399 368//399
+f 364//400 337//400 368//400
+f 368//401 369//401 342//401
+f 368//402 363//402 369//402
+f 363//403 341//403 369//403
+f 354//404 367//404 341//404
+f 354//405 361//405 367//405
+f 361//406 340//406 367//406
+f 362//407 366//407 340//407
+f 362//408 359//408 366//408
+f 359//409 339//409 366//409
+f 360//410 365//410 339//410
+f 360//411 357//411 365//411
+f 357//412 338//412 365//412
+f 358//413 364//413 338//413
+f 358//414 355//414 364//414
+f 355//415 337//415 364//415
+f 356//416 363//416 337//416
+f 356//417 353//417 363//417
+f 353//418 341//418 363//418
+f 361//419 362//419 340//419
+f 361//420 352//420 362//420
+f 352//421 335//421 362//421
+f 359//422 360//422 339//422
+f 359//423 351//423 360//423
+f 351//424 334//424 360//424
+f 357//425 358//425 338//425
+f 357//426 349//426 358//426
+f 349//427 333//427 358//427
+f 355//428 356//428 337//428
+f 355//429 345//429 356//429
+f 345//430 332//430 356//430
+f 353//431 354//431 341//431
+f 353//432 346//432 354//432
+f 346//433 336//433 354//433
+f 347//434 352//434 336//434
+f 347//435 350//435 352//435
+f 350//436 335//436 352//436
+f 350//437 351//437 335//437
+f 350//438 348//438 351//438
+f 348//439 334//439 351//439
+f 348//440 349//440 334//440
+f 348//441 343//441 349//441
+f 343//442 333//442 349//442
+f 346//443 347//443 336//443
+f 346//444 344//444 347//444
+f 344//445 331//445 347//445
+f 343//446 345//446 333//446
+f 343//447 344//447 345//447
+f 344//448 332//448 345//448
+usemtl Material.005
+f 373//369 386//369 385//369
+f 374//370 386//370 388//370
+f 373//371 385//371 390//371
+f 373//372 390//372 392//372
+f 373//373 392//373 389//373
+f 374//374 388//374 395//374
+f 375//375 387//375 397//375
+f 376//376 391//376 399//376
+f 377//377 393//377 401//377
+f 378//378 394//378 403//378
+f 374//379 395//379 398//379
+f 375//380 397//380 400//380
+f 376//381 399//381 402//381
+f 377//382 401//382 404//382
+f 378//383 403//383 396//383
+f 379//384 405//384 410//384
+f 380//385 406//385 412//385
+f 381//386 407//386 413//386
+f 382//387 408//387 414//387
+f 383//388 409//388 411//388
+f 411//389 414//389 384//389
+f 411//390 409//390 414//390
+f 409//391 382//391 414//391
+f 414//392 413//392 384//392
+f 414//393 408//393 413//393
+f 408//394 381//394 413//394
+f 413//395 412//395 384//395
+f 413//396 407//396 412//396
+f 407//397 380//397 412//397
+f 412//398 410//398 384//398
+f 412//399 406//399 410//399
+f 406//400 379//400 410//400
+f 410//401 411//401 384//401
+f 410//402 405//402 411//402
+f 405//403 383//403 411//403
+f 396//404 409//404 383//404
+f 396//405 403//405 409//405
+f 403//406 382//406 409//406
+f 404//407 408//407 382//407
+f 404//408 401//408 408//408
+f 401//409 381//409 408//409
+f 402//410 407//410 381//410
+f 402//411 399//411 407//411
+f 399//412 380//412 407//412
+f 400//413 406//413 380//413
+f 400//414 397//414 406//414
+f 397//415 379//415 406//415
+f 398//416 405//416 379//416
+f 398//417 395//417 405//417
+f 395//418 383//418 405//418
+f 403//419 404//419 382//419
+f 403//420 394//420 404//420
+f 394//421 377//421 404//421
+f 401//422 402//422 381//422
+f 401//423 393//423 402//423
+f 393//424 376//424 402//424
+f 399//425 400//425 380//425
+f 399//426 391//426 400//426
+f 391//427 375//427 400//427
+f 397//428 398//428 379//428
+f 397//429 387//429 398//429
+f 387//430 374//430 398//430
+f 395//431 396//431 383//431
+f 395//432 388//432 396//432
+f 388//433 378//433 396//433
+f 389//434 394//434 378//434
+f 389//435 392//435 394//435
+f 392//436 377//436 394//436
+f 392//437 393//437 377//437
+f 392//438 390//438 393//438
+f 390//439 376//439 393//439
+f 390//440 391//440 376//440
+f 390//441 385//441 391//441
+f 385//442 375//442 391//442
+f 388//443 389//443 378//443
+f 388//444 386//444 389//444
+f 386//445 373//445 389//445
+f 385//446 387//446 375//446
+f 385//447 386//447 387//447
+f 386//448 374//448 387//448
diff --git a/resources/res/models/1001/tree.mtl b/resources/res/models/1001/tree.mtl
new file mode 100644
index 0000000..ce45057
--- /dev/null
+++ b/resources/res/models/1001/tree.mtl
@@ -0,0 +1,82 @@
+# Blender MTL File: 'tree2.blend'
+# Material Count: 8
+
+newmtl l1.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.000000 0.750769 0.003182
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl l2.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.000000 0.738462 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl l3.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.000000 0.769231 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl l4.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.000000 0.732308 0.001504
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl l5.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.000000 0.800000 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl l6.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.000000 0.670769 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl l7.001
+Ns 96.078431
+Ka 1.000000 0.000000 0.000000
+Kd 0.010829 0.640000 0.000000
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
+
+newmtl wood.001
+Ns 96.078431
+Ka 0.000000 1.000000 1.000000
+Kd 0.147575 0.051192 0.012698
+Ks 0.500000 0.500000 0.500000
+Ke 0.000000 0.000000 0.000000
+Ni 1.000000
+d 0.000000
+illum 2
diff --git a/resources/res/models/1001/tree.obj b/resources/res/models/1001/tree.obj
new file mode 100644
index 0000000..e6567de
--- /dev/null
+++ b/resources/res/models/1001/tree.obj
@@ -0,0 +1,1779 @@
+# Blender v2.79 (sub 0) OBJ File: 'tree2.blend'
+# www.blender.org
+mtllib tree.mtl
+o Cylinder.001
+v 0.000000 0.000000 -0.782463
+v -0.000000 2.629369 -0.623379
+v 0.611754 0.000000 -0.487858
+v 0.487377 2.629369 -0.388671
+v 0.762845 0.000000 0.174114
+v 0.607750 2.629369 0.138715
+v 0.339498 0.000000 0.704975
+v 0.270474 2.629369 0.561645
+v -0.339498 0.000000 0.704975
+v -0.270474 2.629369 0.561645
+v -0.762845 0.000000 0.174114
+v -0.607750 2.629369 0.138715
+v -0.611754 0.000000 -0.487858
+v -0.487377 2.629369 -0.388670
+v -0.000000 4.469282 -0.363478
+v 0.284179 4.469282 -0.226625
+v 0.354365 4.469282 0.080881
+v 0.157707 4.469282 0.327482
+v -0.157707 4.469282 0.327482
+v -0.354365 4.469282 0.080881
+v -0.284179 4.469282 -0.226625
+v -0.000000 4.872590 -0.429844
+v 0.206102 4.943661 -0.360560
+v 0.257006 5.103354 -0.204879
+v 0.114378 5.231419 -0.080033
+v -0.114379 5.231419 -0.080034
+v -0.257006 5.103354 -0.204879
+v -0.206103 4.943661 -0.360560
+v 0.230348 5.091252 -0.722431
+v 0.436451 5.162323 -0.653146
+v 0.487354 5.322017 -0.497466
+v 0.344726 5.450081 -0.372620
+v 0.115970 5.450081 -0.372620
+v -0.026658 5.322017 -0.497466
+v 0.024246 5.162323 -0.653146
+v 0.169479 5.422075 -1.202732
+v 0.340737 5.481131 -1.145161
+v 0.383034 5.613825 -1.015802
+v 0.264520 5.720237 -0.912063
+v 0.074439 5.720237 -0.912063
+v -0.044075 5.613825 -1.015802
+v -0.001778 5.481131 -1.145161
+v 0.399310 5.434945 -1.822162
+v 0.605413 5.506016 -1.752877
+v 0.656316 5.665709 -1.597197
+v 0.513688 5.793774 -1.472351
+v 0.284932 5.793774 -1.472351
+v 0.142304 5.665709 -1.597197
+v 0.193207 5.506016 -1.752877
+v -0.443261 5.444030 -1.435235
+v -0.352748 5.497715 -1.572291
+v -0.229223 5.618344 -1.579297
+v -0.165702 5.715081 -1.450976
+v -0.210019 5.715081 -1.283958
+v -0.328801 5.618344 -1.204010
+v -0.432604 5.497715 -1.271335
+v -0.912619 5.735464 -1.613958
+v -0.822106 5.789149 -1.751014
+v -0.698581 5.909778 -1.758019
+v -0.635060 6.006515 -1.629699
+v -0.679376 6.006515 -1.462681
+v -0.798159 5.909778 -1.382733
+v -0.901961 5.789149 -1.450058
+v -1.617832 5.815563 -1.380246
+v -1.527319 5.869248 -1.517302
+v -1.403794 5.989877 -1.524307
+v -1.340273 6.086615 -1.395987
+v -1.384590 6.086615 -1.228969
+v -1.503372 5.989877 -1.149021
+v -1.607175 5.869248 -1.216346
+v -1.374480 5.911835 -2.204874
+v -1.211251 5.965520 -2.186623
+v -1.148815 6.086149 -2.079808
+v -1.234188 6.182886 -1.964864
+v -1.403083 6.182886 -1.928344
+v -1.528318 6.086149 -1.997751
+v -1.515588 5.965520 -2.120818
+v -1.725076 6.585852 -1.394410
+v -1.695071 6.603649 -1.439844
+v -1.654122 6.643637 -1.442166
+v -1.633065 6.675705 -1.399628
+v -1.647756 6.675705 -1.344262
+v -1.687132 6.643637 -1.317760
+v -1.721542 6.603649 -1.340078
+v -0.939923 5.850693 -0.725297
+v -0.843791 6.056381 -0.753241
+v -0.755747 6.195439 -0.594369
+v -0.742090 6.163156 -0.368314
+v -0.813105 5.983840 -0.245301
+v -0.915315 5.792520 -0.317960
+v -0.971754 5.733264 -0.531579
+v -1.499025 6.795805 -1.035109
+v -1.380174 6.864868 -1.052027
+v -1.288361 6.903596 -0.955841
+v -1.292723 6.882827 -0.818980
+v -1.389975 6.818200 -0.744504
+v -1.506884 6.758380 -0.788494
+v -1.555416 6.748414 -0.917826
+v 1.236774 5.626838 -0.355950
+v 1.289172 5.465703 -0.274351
+v 1.302114 5.425906 -0.091002
+v 1.265853 5.537415 0.056033
+v 1.207695 5.716261 0.056033
+v 1.171435 5.827771 -0.091002
+v 1.184376 5.787973 -0.274351
+v 1.598318 5.903404 -0.953620
+v 1.705960 5.720752 -0.975899
+v 1.905233 5.675640 -0.915069
+v 2.046080 5.802040 -0.816935
+v 2.022441 6.004769 -0.755395
+v 1.852117 6.131169 -0.776789
+v 1.663364 6.086057 -0.865008
+v 2.259075 5.671751 -0.312614
+v 2.325164 5.468513 -0.209695
+v 2.341487 5.418317 0.021563
+v 2.295752 5.558963 0.207017
+v 2.222398 5.784540 0.207017
+v 2.176663 5.925186 0.021563
+v 2.192985 5.874990 -0.209695
+v 2.730244 7.485641 0.627766
+v 2.901603 7.473081 0.791303
+v 2.880404 7.465206 1.027427
+v 2.682610 7.467948 1.158332
+v 2.457164 7.479241 1.085444
+v 2.373831 7.490582 0.863649
+v 2.495363 7.493431 0.659963
+v 2.965339 5.636002 -0.993256
+v 3.023153 5.458213 -0.903224
+v 3.037431 5.414303 -0.700925
+v 2.997423 5.537337 -0.538694
+v 2.933255 5.734668 -0.538694
+v 2.893247 5.857701 -0.700925
+v 2.907525 5.813791 -0.903224
+v 2.028699 5.962387 -1.859221
+v 2.096086 5.848041 -1.873168
+v 2.220837 5.819799 -1.835087
+v 2.309011 5.898930 -1.773652
+v 2.294213 6.025844 -1.735126
+v 2.187584 6.104974 -1.748520
+v 2.069420 6.076733 -1.803747
+v -1.680185 6.047343 -2.544412
+v -1.516955 6.101029 -2.526161
+v -1.454520 6.221658 -2.419347
+v -1.539893 6.318395 -2.304402
+v -1.708788 6.318395 -2.267882
+v -1.834022 6.221658 -2.337289
+v -1.821293 6.101029 -2.460356
+v 0.429861 6.230738 -2.815209
+v 0.560454 6.275771 -2.771308
+v 0.592708 6.376958 -2.672665
+v 0.502335 6.458104 -2.593559
+v 0.357388 6.458104 -2.593559
+v 0.267014 6.376958 -2.672665
+v 0.299268 6.275771 -2.771308
+v -0.607750 2.629369 0.138715
+v -0.270474 2.629369 0.561645
+v -0.157707 4.469282 0.327482
+v -0.354365 4.469282 0.080881
+v 0.487377 2.629369 -0.388671
+v -0.000000 2.629369 -0.623379
+v -0.000000 4.469282 -0.363478
+v 0.284179 4.469282 -0.226625
+v 0.270474 2.629369 0.561645
+v 0.607750 2.629369 0.138715
+v 0.354365 4.469282 0.080881
+v 0.157707 4.469282 0.327482
+v -0.487377 2.629369 -0.388670
+v -0.284179 4.469282 -0.226625
+v -0.204747 3.701783 0.425161
+v 0.378108 3.618778 -0.301531
+v -0.366525 3.723661 -0.292293
+v -0.000000 3.711051 -0.470584
+v 0.209405 3.625782 0.434833
+v -0.467390 3.648569 0.106679
+v 0.465099 3.665202 0.106156
+v -0.451215 3.993037 1.231314
+v 0.131640 4.495201 0.699522
+v -0.612992 4.555731 0.785673
+v -0.246468 4.683932 0.661131
+v -0.037063 3.936662 1.179434
+v -0.713858 4.202267 0.985376
+v 0.218631 4.213387 0.997757
+v -0.259573 4.193739 1.350413
+v 0.249857 4.767198 1.067887
+v -0.400971 4.790517 1.156909
+v -0.080619 4.933498 1.093974
+v 0.102406 4.163376 1.290731
+v -0.489130 4.440102 1.212740
+v 0.325890 4.445436 1.226271
+v 0.449767 4.680830 1.949338
+v 0.817637 5.174365 1.608729
+v 0.291901 5.194434 1.816593
+v 0.546760 5.317488 1.698300
+v 0.740086 4.654698 1.825227
+v 0.229663 4.892857 1.881337
+v 0.913666 4.897447 1.725522
+v 1.330231 5.477723 2.042228
+v 1.163144 5.807157 1.752282
+v 1.220418 5.820553 2.125272
+v 1.181246 5.902691 1.941858
+v 1.292535 5.460280 1.834874
+v 1.253318 5.619250 2.175383
+v 1.253401 5.622314 1.707115
+v 0.576943 5.208036 2.644294
+v 0.780218 5.500436 2.427722
+v 0.478133 5.512327 2.572394
+v 0.623846 5.585231 2.491903
+v 0.743372 5.192554 2.558893
+v 0.444037 5.333653 2.613241
+v 0.841820 5.336373 2.492762
+v -0.275147 4.778330 2.409571
+v -0.026107 5.058671 2.271455
+v -0.344271 5.070071 2.314974
+v -0.187664 5.139969 2.284208
+v -0.098190 4.763486 2.380395
+v -0.387369 4.898767 2.342268
+v 0.011063 4.901374 2.348883
+v -0.421074 5.418206 3.332520
+v -0.172033 5.698547 3.194403
+v -0.490198 5.709947 3.237923
+v -0.333590 5.779845 3.207156
+v -0.244116 5.403362 3.303343
+v -0.533295 5.538643 3.265216
+v -0.134864 5.541250 3.271831
+v 1.966462 6.307737 1.995345
+v 1.673204 6.339960 1.763768
+v 1.689271 6.384105 2.061671
+v 1.617240 6.393803 1.915181
+v 1.961654 6.274912 1.829733
+v 1.838234 6.318150 2.101694
+v 1.836222 6.319544 1.727694
+v 1.899659 5.545341 2.714132
+v 2.057294 5.822410 2.480968
+v 1.796411 5.833676 2.661712
+v 1.920641 5.902758 2.564511
+v 2.042533 5.530671 2.609225
+v 1.770649 5.664372 2.705051
+v 2.124701 5.666949 2.532561
+v 0.709569 6.245284 3.485746
+v 0.840445 6.265421 3.252341
+v 0.645951 6.340297 3.308271
+v 0.739767 6.332534 3.238783
+v 0.816721 6.197476 3.456814
+v 0.623999 6.283845 3.411896
+v 0.880106 6.226871 3.359228
+v -1.340685 4.445563 1.423871
+v -0.671595 4.947726 1.842009
+v -0.955063 5.008256 1.148075
+v -0.736430 5.136457 1.467529
+v -1.179207 4.389188 1.808757
+v -1.174549 4.654793 1.104707
+v -0.935392 4.665912 2.006091
+v -1.964241 5.271940 1.369159
+v -1.514928 5.609156 1.649950
+v -1.705285 5.649803 1.183954
+v -1.558467 5.735895 1.398476
+v -1.855804 5.234082 1.627621
+v -1.852676 5.412443 1.154831
+v -1.692076 5.419910 1.760135
+v -2.167314 6.148065 2.375637
+v -1.637708 6.485281 2.391241
+v -2.037250 6.525928 2.085048
+v -1.802227 6.612020 2.196129
+v -1.943244 6.110208 2.544023
+v -2.179188 6.288568 2.134304
+v -1.735016 6.296036 2.575775
+v -2.905425 6.234462 0.467624
+v -3.013681 6.630371 0.397559
+v -2.744626 6.460499 0.293381
+v -2.858958 6.601523 0.293069
+v -3.054195 6.326274 0.535438
+v -2.749623 6.306069 0.397361
+v -3.113063 6.491798 0.473665
+v 1.497464 6.231975 -0.469633
+v 1.666868 6.228465 -0.388034
+v 1.708707 6.227598 -0.204685
+v 1.591475 6.230027 -0.057650
+v 1.403451 6.233922 -0.057650
+v 1.286219 6.236351 -0.204685
+v 1.328059 6.235484 -0.388034
+v 1.430577 7.205066 -0.417123
+v 1.585328 7.201860 -0.342583
+v 1.623548 7.201069 -0.175093
+v 1.516457 7.203288 -0.040777
+v 1.344697 7.206846 -0.040777
+v 1.237605 7.209064 -0.175093
+v 1.275826 7.208272 -0.342583
+v 0.230348 6.220902 -1.419091
+v 0.436451 6.210127 -1.320424
+v 0.487354 6.185915 -1.098722
+v 0.344726 6.166499 -0.920929
+v 0.115970 6.166499 -0.920929
+v -0.026658 6.185915 -1.098722
+v 0.024246 6.210127 -1.320424
+v 0.230348 7.515742 -1.373251
+v 0.400398 7.506851 -1.291843
+v 0.442397 7.486875 -1.108922
+v 0.324719 7.470855 -0.962230
+v 0.135978 7.470855 -0.962230
+v 0.018299 7.486875 -1.108922
+v 0.060298 7.506851 -1.291843
+v 0.230348 8.485607 -0.969182
+v 0.339263 8.479914 -0.917042
+v 0.366162 8.467119 -0.799883
+v 0.290791 8.456858 -0.705930
+v 0.169905 8.456858 -0.705930
+v 0.094534 8.467119 -0.799883
+v 0.121434 8.479914 -0.917042
+v 0.947504 8.346179 -0.380310
+v 1.073480 8.343569 -0.319630
+v 1.104593 8.342924 -0.183285
+v 1.017415 8.344730 -0.073943
+v 0.877593 8.347628 -0.073944
+v 0.790415 8.349434 -0.183285
+v 0.821529 8.348789 -0.319630
+v -0.451215 6.094797 1.648518
+v 0.131640 6.062341 0.917822
+v -0.612992 6.166332 0.934304
+v -0.246468 6.166106 0.755569
+v -0.037063 6.018309 1.652902
+v -0.713858 6.063778 1.327115
+v 0.218631 6.080407 1.327745
+v 0.162788 9.019432 0.887167
+v 0.426224 9.004763 0.556909
+v 0.089668 9.051764 0.564358
+v 0.255328 9.051662 0.483574
+v 0.349975 8.984861 0.889148
+v 0.044079 9.005412 0.741900
+v 0.465543 9.012929 0.742185
+v 0.918508 5.458748 -3.044063
+v 1.664272 6.028464 -2.329378
+v 0.633658 6.028464 -1.887668
+v -0.003313 6.028464 -3.044063
+v 0.633658 6.028464 -4.200459
+v 1.664272 6.028464 -3.758749
+v 1.203359 6.950291 -1.887668
+v 0.172745 6.950291 -2.329378
+v 0.172745 6.950291 -3.758749
+v 1.203359 6.950291 -4.200459
+v 1.840329 6.950291 -3.044063
+v 0.918508 7.520007 -3.044063
+v 3.612197 4.666144 -1.903123
+v 3.957224 5.531211 -4.150694
+v 5.419011 5.531211 -1.670132
+v 4.383843 5.531211 0.488472
+v 2.282274 5.531211 -0.658068
+v 2.018630 5.531211 -3.525208
+v 4.942121 6.930929 -3.148179
+v 5.205764 6.930929 -0.281038
+v 3.267170 6.930929 0.344447
+v 1.805384 6.930929 -2.136115
+v 2.840551 6.930929 -4.294719
+v 3.612197 7.795996 -1.903123
+v 2.984219 6.679065 1.329318
+v 4.116600 7.544133 2.152031
+v 2.551697 7.544133 2.660507
+v 1.584510 7.544133 1.329318
+v 2.551697 7.544133 -0.001870
+v 4.116600 7.544133 0.506605
+v 3.416741 8.943851 2.660507
+v 1.851839 8.943851 2.152031
+v 1.851839 8.943851 0.506605
+v 3.416741 8.943851 -0.001870
+v 4.383928 8.943851 1.329318
+v 2.984219 9.808918 1.329318
+v 2.150070 4.980554 4.028951
+v 4.119973 5.845622 4.906487
+v 3.193248 5.845622 6.720779
+v 0.824864 5.845622 4.815053
+v 0.287891 5.845622 1.822948
+v 2.324379 5.845622 1.879486
+v 4.012248 7.245339 6.234955
+v 1.975760 7.245339 6.178417
+v 0.180166 7.245339 3.151416
+v 1.106891 7.245339 1.337123
+v 3.475275 7.245339 3.242850
+v 2.150070 8.110407 4.028951
+v -2.883810 5.288288 -1.513424
+v -1.455760 6.153356 0.199684
+v -3.704604 6.153356 0.984988
+v -4.819158 6.153356 -1.682444
+v -3.259094 6.153356 -4.116293
+v -1.180422 6.153356 -2.953055
+v -2.508526 7.553072 1.089445
+v -4.587197 7.553072 -0.073793
+v -4.311859 7.553072 -3.226533
+v -2.063015 7.553072 -4.011837
+v -0.948462 7.553072 -1.344404
+v -2.883810 8.418140 -1.513424
+v -1.864386 4.486920 3.287311
+v -0.616113 5.351988 4.903270
+v -3.134627 5.351988 4.256495
+v -3.897731 5.351988 2.270324
+v -1.850787 5.351988 1.689611
+v 0.177338 5.351988 3.316862
+v -1.877986 6.751705 4.885011
+v -3.906110 6.751705 3.257761
+v -3.112660 6.751705 1.671352
+v -0.594145 6.751705 2.318127
+v 0.168958 6.751705 4.304299
+v -1.864386 7.616773 3.287311
+v 0.329409 7.583746 0.000000
+v 1.461789 8.448814 1.457531
+v -0.103114 8.448814 2.358354
+v -1.070300 8.448814 0.000000
+v -0.103114 8.448814 -2.358354
+v 1.461789 8.448814 -1.457531
+v 0.761931 9.848532 2.358354
+v -0.802972 9.848532 1.457531
+v -0.802972 9.848532 -1.457531
+v 0.761931 9.848532 -2.358354
+v 1.729118 9.848532 0.000000
+v 0.329409 10.713599 0.000000
+vn 0.4332 0.0544 -0.8996
+vn 0.9735 0.0544 -0.2222
+vn 0.7807 0.0544 0.6226
+vn -0.0000 0.0544 0.9985
+vn -0.7807 0.0544 0.6226
+vn -0.7756 0.1263 0.6185
+vn -0.9735 0.0544 -0.2222
+vn -0.4332 0.0544 -0.8996
+vn 0.0000 -1.0000 0.0000
+vn -0.7257 0.3722 0.5787
+vn 0.4304 0.1263 -0.8938
+vn 0.7756 0.1263 0.6185
+vn -0.9671 0.1263 -0.2207
+vn -0.0000 0.1263 0.9920
+vn -0.4304 0.1263 -0.8938
+vn 0.9671 0.1262 -0.2207
+vn 0.4036 -0.8563 -0.3222
+vn 0.7724 0.3331 0.5408
+vn 0.3723 -0.1949 -0.9074
+vn -0.9703 0.0972 -0.2215
+vn -0.0000 0.4715 0.8819
+vn 0.9492 0.0040 -0.3145
+vn -0.4292 -0.1467 -0.8912
+vn -0.8394 0.2179 -0.4980
+vn -0.0000 0.8010 0.5986
+vn 0.8176 -0.5138 0.2597
+vn -0.4286 -0.5288 -0.7326
+vn -0.6765 0.7362 0.0176
+vn 0.7221 0.1446 0.6765
+vn -0.4254 -0.7696 -0.4762
+vn -0.7741 0.5402 0.3301
+vn 0.7473 0.6320 0.2054
+vn 0.4314 -0.7165 -0.5482
+vn -0.9711 -0.2204 -0.0914
+vn 0.0000 0.8941 0.4478
+vn 0.9682 -0.0766 -0.2380
+vn -0.9521 -0.0055 -0.3057
+vn -0.0000 0.9915 0.1301
+vn 0.7724 -0.5521 0.3138
+vn -0.3684 -0.9165 -0.1557
+vn -0.6016 0.7894 -0.1224
+vn 0.7813 0.4712 0.4093
+vn 0.2973 -0.9505 0.0906
+vn 0.4005 0.7019 -0.5890
+vn 0.0000 -1.0000 0.0096
+vn -0.4456 0.4995 0.7429
+vn 0.1288 0.9399 -0.3162
+vn 0.7633 -0.2848 -0.5799
+vn -0.6009 -0.4665 0.6491
+vn -0.0853 0.9456 0.3141
+vn -0.0604 -0.5907 -0.8046
+vn -0.5621 -0.5024 0.6570
+vn 0.3025 0.8026 0.5142
+vn 0.4245 0.1345 -0.8954
+vn -0.4871 -0.8637 -0.1292
+vn -0.1992 0.2588 0.9452
+vn 0.5818 0.7610 -0.2871
+vn 0.2817 -0.2344 0.9304
+vn 0.0047 0.9502 -0.3116
+vn -0.3306 -0.3261 -0.8857
+vn 0.0956 -0.8170 0.5686
+vn 0.2584 0.8293 0.4955
+vn -0.1901 0.5981 -0.7786
+vn -0.1235 -0.9918 -0.0328
+vn 0.3952 -0.4511 -0.8002
+vn -0.3560 -0.9345 -0.0007
+vn -0.5970 0.2192 0.7717
+vn 0.5272 0.5323 -0.6623
+vn -0.0079 -0.9293 -0.3692
+vn -0.6804 -0.5573 0.4759
+vn 0.0589 0.9604 0.2723
+vn 0.5810 -0.0464 -0.8126
+vn -0.8707 -0.4342 -0.2310
+vn 0.1291 -0.0748 0.9888
+vn 0.9849 0.1351 -0.1083
+vn -0.3336 -0.3224 -0.8858
+vn -0.7087 -0.3484 0.6135
+vn 0.8053 0.1228 0.5800
+vn 0.7041 0.6141 -0.3564
+vn 0.0000 -0.2956 -0.9553
+vn -0.6632 -0.4033 0.6305
+vn 0.5690 0.6584 0.4926
+vn 0.3750 0.1472 -0.9152
+vn -0.7116 -0.6955 -0.0996
+vn 0.3264 -0.0255 -0.9449
+vn 0.0495 -0.3172 -0.9471
+vn 0.8678 0.3698 -0.3319
+vn -0.1778 -0.6164 -0.7671
+vn -0.6736 -0.1822 0.7163
+vn 0.6850 0.5676 0.4566
+vn 0.4393 -0.2177 -0.8715
+vn -0.7628 -0.6353 -0.1207
+vn 0.3956 -0.4108 0.8214
+vn 0.4685 -0.6445 -0.6043
+vn -0.6369 0.5305 -0.5594
+vn -0.3945 0.4162 0.8192
+vn 0.6667 -0.7296 0.1522
+vn -0.1830 -0.0595 -0.9813
+vn -0.6850 0.7005 0.2004
+vn 0.5685 -0.7948 0.2126
+vn -0.7572 0.1073 -0.6443
+vn 0.0897 0.9177 0.3869
+vn 0.7887 -0.0537 0.6125
+vn -0.2575 -0.7994 -0.5428
+vn -0.5815 0.7921 -0.1856
+vn 0.7201 0.3514 0.5982
+vn -0.0701 0.9738 -0.2163
+vn -0.1439 -0.0468 0.9885
+vn 0.0160 -0.9769 -0.2132
+vn 0.0177 0.4563 -0.8897
+vn -0.1442 0.7710 0.6203
+vn -0.0700 -0.8031 0.5918
+vn 0.0572 -0.4362 -0.8980
+vn 0.0183 0.4564 -0.8896
+vn -0.9717 -0.0046 0.2361
+vn 0.4835 -0.4669 0.7404
+vn 0.8539 0.0142 -0.5202
+vn -0.9620 0.2448 -0.1210
+vn -0.2995 -0.4060 0.8634
+vn 0.9544 -0.2887 0.0761
+vn 0.6833 -0.1406 0.7164
+vn -0.5099 -0.7413 -0.4365
+vn -0.5929 0.5644 -0.5743
+vn 0.6114 0.5066 0.6078
+vn 0.1298 -0.9670 0.2191
+vn -0.7118 -0.2315 -0.6631
+vn 0.2065 0.9591 0.1936
+vn -0.6277 0.7727 -0.0943
+vn 0.8065 0.4251 0.4110
+vn 0.1905 -0.9773 0.0921
+vn -0.9630 -0.0310 -0.2678
+vn 0.1562 0.9662 0.2050
+vn 0.8123 -0.4620 0.3560
+vn -0.5723 -0.8009 -0.1760
+vn -0.3731 -0.9272 -0.0341
+vn -0.6366 0.3210 0.7012
+vn 0.5880 0.7787 -0.2186
+vn 0.3122 -0.7516 -0.5810
+vn -0.7252 -0.5277 0.4423
+vn 0.0684 0.9463 0.3161
+vn 0.7644 0.1579 -0.6252
+vn -0.9735 -0.1218 -0.1934
+vn -0.0000 0.8603 0.5098
+vn 0.9749 -0.1548 -0.1600
+vn -0.4326 -0.6970 -0.5719
+vn -0.7673 0.5723 0.2895
+vn 0.7722 0.5500 0.3181
+vn 0.4318 -0.7103 -0.5559
+vn 0.4382 -0.6603 0.6099
+vn 0.4304 0.1262 -0.8938
+vn 0.9671 0.1263 -0.2207
+vn 0.0000 0.1262 0.9920
+vn 0.1779 0.9276 -0.3284
+vn 0.6601 0.7481 -0.0685
+vn -0.7160 0.4887 -0.4984
+vn -0.4197 -0.7315 0.5374
+vn 0.9432 -0.0883 0.3202
+vn -0.8323 -0.5022 0.2348
+vn 0.8250 -0.4375 -0.3577
+vn -0.9385 -0.0539 0.3410
+vn 0.4063 -0.8591 0.3113
+vn -0.1020 0.4882 -0.8667
+vn 0.5212 0.0087 -0.8534
+vn -0.7888 0.5760 -0.2146
+vn -0.4129 -0.7116 0.5685
+vn 0.7428 -0.2835 -0.6066
+vn -0.7079 0.0516 0.7044
+vn 0.4227 -0.8999 0.1071
+vn -0.1637 0.8158 -0.5546
+vn 0.5089 0.2657 -0.8188
+vn -0.7231 0.6318 0.2793
+vn -0.2749 -0.6565 0.7025
+vn -0.8210 0.5618 0.1020
+vn 0.1988 -0.1061 -0.9743
+vn -0.6887 0.3390 0.6409
+vn 0.5705 -0.7540 0.3255
+vn 0.4403 -0.2744 -0.8549
+vn 0.0165 -0.2297 0.9731
+vn 0.5004 -0.8418 0.2024
+vn 0.2157 -0.7965 0.5648
+vn -0.6467 -0.5548 0.5235
+vn 0.8267 -0.4555 0.3302
+vn 0.3524 0.8749 -0.3322
+vn -0.9650 0.2176 0.1463
+vn 0.9518 0.2962 -0.0803
+vn -0.5078 0.8300 -0.2307
+vn 0.7564 -0.5041 0.4168
+vn 0.4393 0.8910 -0.1150
+vn -0.9701 0.2423 -0.0110
+vn 0.9445 0.2947 0.1452
+vn -0.4312 0.8817 -0.1917
+vn 0.0062 -0.8754 0.4833
+vn -0.7757 -0.5573 0.2962
+vn -0.4269 0.7101 -0.5598
+vn 0.0256 -0.8196 0.5723
+vn -0.7751 -0.5699 0.2726
+vn 0.7456 -0.4867 0.4553
+vn 0.3599 0.7924 -0.4925
+vn -0.9402 0.1917 -0.2815
+vn 0.9736 0.2280 -0.0042
+vn 0.1386 -0.2178 -0.9661
+vn 0.1502 -0.1648 0.9748
+vn 0.6751 -0.6087 -0.4168
+vn -0.7696 0.6327 0.0867
+vn -0.5675 0.3942 -0.7229
+vn -0.4937 0.3898 0.7774
+vn 0.6778 -0.5770 0.4557
+vn -0.6807 0.0703 0.7292
+vn 0.6851 0.0561 -0.7262
+vn -0.3743 0.8139 0.4444
+vn -0.0176 -0.9932 0.1149
+vn -0.4581 -0.7283 0.5095
+vn 0.5824 -0.6360 -0.5063
+vn 0.3510 0.8223 -0.4479
+vn -0.6965 -0.3798 0.6088
+vn 0.8139 -0.4190 0.4025
+vn 0.1136 0.7242 -0.6801
+vn -0.9649 0.2542 -0.0659
+vn 0.9377 0.2208 -0.2683
+vn -0.5943 0.6128 -0.5209
+vn -0.0677 -0.6233 0.7790
+vn -0.4124 0.3588 -0.8373
+vn 0.6220 -0.1330 0.7716
+vn -0.4383 0.6436 -0.6275
+vn -0.4433 -0.8947 0.0549
+vn -0.6214 -0.4666 -0.6294
+vn 0.1471 -0.6569 0.7394
+vn 0.4493 0.8926 -0.0376
+vn -0.7818 -0.5738 0.2440
+vn -0.5969 -0.4923 -0.6335
+vn -0.4736 -0.1951 0.8588
+vn 0.5455 0.7826 0.3000
+vn 0.0371 0.0990 -0.9944
+vn 0.1191 0.4139 0.9025
+vn 0.5051 0.6240 -0.5962
+vn -0.7427 0.3223 -0.5870
+vn 0.7594 -0.4230 0.4944
+vn 0.0914 0.6842 -0.7236
+vn -0.8214 -0.5018 0.2711
+vn -0.9093 0.1098 -0.4013
+vn 0.2320 -0.6919 0.6837
+vn 0.8061 0.4440 -0.3913
+vn -0.5015 0.2084 0.8397
+vn 0.2383 -0.5932 -0.7689
+vn -0.7397 -0.2722 0.6155
+vn 0.7620 0.6050 -0.2311
+vn 0.2022 0.7675 0.6084
+vn 0.6478 -0.0532 -0.7599
+vn -0.3554 -0.8917 -0.2801
+vn -0.8659 0.4586 0.1998
+vn 0.4337 0.0885 0.8967
+vn 0.7718 -0.4004 -0.4940
+vn -0.7452 0.2930 -0.5990
+vn -0.4034 0.3338 0.8519
+vn 0.9640 -0.2375 0.1196
+vn -0.2017 -0.0656 -0.9773
+vn 0.4336 -0.0188 0.9009
+vn 0.7810 0.0580 -0.6218
+vn -0.7813 -0.0494 -0.6221
+vn -0.4339 -0.0783 0.8975
+vn 0.9741 0.0419 0.2221
+vn 0.0004 0.0174 -0.9998
+vn -0.9709 -0.0917 0.2211
+vn 0.9740 0.1293 0.1858
+vn 0.0000 -0.6078 -0.7941
+vn -0.9598 0.1508 0.2368
+vn 0.4245 0.4864 0.7637
+vn 0.7786 -0.3814 -0.4983
+vn -0.6870 -0.4151 -0.5964
+vn -0.3552 0.4907 0.7956
+vn 0.4329 -0.0319 0.9009
+vn 0.7779 -0.0318 -0.6275
+vn -0.7779 -0.0318 -0.6275
+vn -0.4329 -0.0319 0.9009
+vn 0.9749 -0.0320 0.2203
+vn 0.0000 -0.0316 -0.9995
+vn -0.9749 -0.0320 0.2203
+vn 0.9682 -0.1405 0.2070
+vn 0.0000 0.2516 -0.9678
+vn -0.9682 -0.1405 0.2070
+vn 0.4194 -0.3491 0.8380
+vn 0.7802 0.1321 -0.6114
+vn -0.7802 0.1321 -0.6114
+vn -0.4194 -0.3491 0.8380
+vn -0.4278 -0.2095 0.8792
+vn 0.9105 0.3585 0.2061
+vn -0.0006 -0.0293 -0.9996
+vn -0.8922 -0.4041 0.2017
+vn 0.4314 0.1539 0.8889
+vn 0.7506 0.2901 -0.5937
+vn -0.7381 -0.3397 -0.5829
+vn -0.0916 0.2209 -0.9710
+vn 0.7317 0.1327 -0.6685
+vn -0.7914 0.1064 -0.6020
+vn -0.4071 -0.0581 0.9115
+vn 0.9324 -0.0653 0.3554
+vn -0.9775 -0.0291 0.2087
+vn 0.3474 -0.0862 0.9337
+vn -0.9720 0.1220 0.2009
+vn 0.4383 0.0085 0.8988
+vn -0.0350 -0.2449 -0.9689
+vn 0.7507 -0.3095 -0.5836
+vn -0.7792 -0.0590 -0.6240
+vn -0.3552 0.1488 0.9229
+vn 0.9590 -0.2089 0.1917
+vn -0.7756 0.1262 0.6185
+vn -0.7724 0.3331 0.5408
+vn 0.7257 0.3722 0.5787
+vn 0.4292 -0.1467 -0.8912
+vn -0.9492 0.0040 -0.3145
+vn 0.9703 0.0972 -0.2215
+vn -0.3723 -0.1949 -0.9074
+vn 0.2801 0.2727 -0.9204
+vn 0.0135 -0.9999 0.0036
+vn -0.6077 -0.4465 0.6567
+vn 0.1803 0.9030 -0.3899
+vn 0.3183 -0.8048 -0.5009
+vn -0.4338 -0.8285 0.3542
+vn -0.4300 0.5457 0.7193
+vn 0.0047 0.9502 -0.3115
+vn 0.7671 0.1544 -0.6227
+vn -0.5456 -0.7852 0.2927
+vn -0.2085 0.7623 0.6127
+vn 0.5211 0.8031 -0.2889
+vn 0.3211 -0.8089 -0.4924
+vn -0.6253 0.1067 0.7730
+vn 0.2478 0.9666 0.0657
+vn 0.7030 0.5985 -0.3841
+vn -0.2952 -0.4582 -0.8384
+vn -0.6465 -0.3595 0.6729
+vn 0.4335 0.6154 0.6583
+vn 0.4597 0.3021 -0.8351
+vn -0.7268 -0.6847 -0.0539
+vn 0.1136 -0.1857 -0.9760
+vn 0.1743 -0.2121 -0.9616
+vn 0.8631 0.3624 -0.3518
+vn -0.0673 -0.5461 -0.8350
+vn -0.7438 -0.2412 0.6234
+vn 0.6409 0.5535 0.5318
+vn 0.6030 -0.0192 -0.7975
+vn -0.7807 -0.6235 -0.0419
+vn 0.3170 -0.3444 0.8837
+vn 0.5648 -0.6914 -0.4504
+vn -0.6547 0.5466 -0.5221
+vn -0.3046 0.3496 0.8860
+vn 0.6578 -0.7251 0.2038
+vn 0.0000 -0.2127 -0.9771
+vn -0.6874 0.7092 0.1569
+vn 0.3184 -0.9247 -0.2085
+vn -0.6510 -0.2117 -0.7289
+vn -0.1040 0.9704 0.2180
+vn 0.8420 -0.4467 0.3026
+vn -0.3883 -0.6361 -0.6668
+vn -0.7304 0.4453 -0.5179
+vn 0.6522 0.5004 0.5694
+vn -0.1029 0.4857 -0.8681
+vn -0.9357 -0.0512 0.3490
+vn 0.7290 -0.4468 0.5186
+vn 0.6854 0.1868 -0.7038
+vn -0.8044 0.3568 -0.4750
+vn -0.6700 -0.2179 0.7097
+vn 0.9684 -0.2205 -0.1162
+vn 0.1905 -0.9774 0.0921
+vn 0.2967 -0.6913 0.6589
+vn 0.0893 0.9452 -0.3142
+vn 0.3494 0.8338 -0.4274
+vn -0.7847 0.4352 -0.4414
+vn -0.4189 -0.7318 0.5376
+vn 0.9703 -0.0244 0.2407
+vn -0.9385 -0.3418 -0.0493
+vn 0.8991 -0.2798 -0.3365
+vn -0.9323 0.0845 0.3518
+vn 0.4378 -0.8412 0.3173
+vn -0.0333 0.5334 -0.8452
+vn 0.6955 0.0292 -0.7179
+vn -0.7830 0.5852 -0.2108
+vn -0.3101 -0.7145 0.6271
+vn -0.7102 0.1686 0.6835
+vn 0.4632 -0.8826 0.0799
+vn -0.0334 0.7944 -0.6065
+vn 0.6214 0.1492 -0.7691
+vn -0.7213 0.6348 0.2770
+vn -0.1472 -0.7098 0.6889
+vn -0.3171 0.4478 -0.8360
+vn -0.2104 0.6068 -0.7665
+vn -0.8230 0.5651 -0.0570
+vn 0.1541 -0.2979 0.9421
+vn 0.4057 -0.1578 -0.9003
+vn -0.4262 0.2220 0.8769
+vn 0.6982 -0.5858 -0.4115
+vn 0.1771 -0.7941 0.5814
+vn -0.6697 -0.5275 0.5227
+vn 0.8435 -0.4284 0.3241
+vn 0.3417 0.8799 -0.3301
+vn -0.9626 0.2295 0.1437
+vn 0.9434 0.3207 -0.0846
+vn -0.5293 0.8208 -0.2148
+vn 0.9736 0.2280 -0.0041
+vn 0.1534 -0.2359 -0.9596
+vn 0.1898 -0.1871 0.9638
+vn 0.6824 -0.6263 -0.3770
+vn -0.7926 0.6021 -0.0963
+vn -0.5566 0.3884 -0.7344
+vn -0.5318 0.4414 0.7227
+vn 0.6924 -0.6687 0.2709
+vn -0.6994 0.2753 0.6596
+vn 0.5613 0.4446 -0.6980
+vn -0.2860 0.9149 0.2847
+vn 0.0086 -0.9966 0.0823
+vn -0.5848 -0.5915 0.5551
+vn 0.6494 -0.3679 -0.6655
+vn 0.3011 0.8840 -0.3577
+vn -0.5908 -0.4614 0.6619
+vn 0.8364 -0.4003 0.3745
+vn 0.4772 0.5831 -0.6575
+vn -0.9823 0.1872 -0.0013
+vn 0.9288 0.2353 -0.2861
+vn -0.4171 0.6495 -0.6357
+vn 0.2992 -0.6478 0.7006
+vn -0.5105 -0.3079 -0.8029
+vn 0.7630 0.5660 0.3123
+vn 0.3832 0.7363 -0.5577
+vn -0.0508 -0.8523 0.5206
+vn -0.4793 -0.8515 -0.2126
+vn 0.6365 -0.0849 0.7666
+vn 0.7966 0.5839 0.1564
+vn -0.6263 0.4656 -0.6253
+vn 0.9301 -0.1524 0.3342
+vn 0.3944 0.7272 -0.5618
+vn -0.5285 -0.6382 0.5598
+vn -0.9841 -0.1700 -0.0506
+vn 0.4351 -0.6020 0.6695
+vn 0.9579 0.2862 -0.0216
+vn -0.2580 0.5453 0.7975
+vn 0.2050 -0.6287 -0.7502
+vn -0.7162 -0.5798 0.3886
+vn 0.5837 0.7805 0.2239
+vn 0.0314 0.6644 0.7467
+vn 0.6541 -0.0377 -0.7554
+vn -0.2672 -0.8783 -0.3964
+vn -0.8706 0.4645 0.1623
+vn 0.6686 -0.1513 0.7281
+vn 0.7247 -0.3660 -0.5838
+vn -0.8352 0.3191 -0.4480
+vn -0.3788 0.3171 0.8695
+vn 0.9442 -0.2481 0.2166
+vn -0.0044 -0.2129 -0.9771
+vn 0.9598 0.1508 0.2368
+vn -0.9740 0.1293 0.1858
+vn 0.3552 0.4907 0.7956
+vn 0.6870 -0.4151 -0.5964
+vn -0.7786 -0.3814 -0.4983
+vn -0.4245 0.4864 0.7637
+vn 0.0463 0.1945 -0.9798
+vn 0.7635 0.1166 -0.6352
+vn -0.6821 0.1622 -0.7130
+vn -0.1670 -0.1360 0.9765
+vn 0.9697 -0.0224 0.2431
+vn -0.9693 -0.0428 0.2423
+vn 0.4376 -0.0572 0.8974
+vn 0.2025 -0.8578 0.4725
+vn 0.6071 -0.7947 0.0000
+vn -0.5050 -0.8171 0.2782
+vn -0.5050 -0.8171 -0.2782
+vn 0.2025 -0.8578 -0.4725
+vn 0.9822 -0.1876 0.0000
+vn 0.3828 -0.2365 0.8931
+vn -0.8578 -0.2025 0.4725
+vn -0.8578 -0.2025 -0.4725
+vn 0.3828 -0.2365 -0.8931
+vn 0.8578 0.2025 0.4725
+vn -0.3828 0.2365 0.8931
+vn -0.9822 0.1876 0.0000
+vn -0.3828 0.2365 -0.8931
+vn 0.8578 0.2025 -0.4725
+vn 0.5050 0.8171 0.2782
+vn -0.2025 0.8578 0.4725
+vn -0.6071 0.7947 0.0000
+vn -0.2025 0.8578 -0.4725
+vn 0.5050 0.8171 -0.2782
+vn 0.4440 -0.8570 -0.2617
+vn -0.1202 -0.9202 -0.3726
+vn 0.4033 -0.8944 0.1934
+vn -0.2142 -0.8944 0.3926
+vn -0.5132 -0.8570 0.0472
+vn -0.2905 -0.3244 -0.9002
+vn 0.8373 -0.2357 -0.4934
+vn 0.8656 -0.2801 0.4151
+vn -0.4598 -0.2801 0.8427
+vn -0.9677 -0.2357 0.0890
+vn 0.4598 0.2801 -0.8427
+vn 0.9677 0.2357 -0.0890
+vn 0.2905 0.3244 0.9002
+vn -0.8373 0.2357 0.4934
+vn -0.8656 0.2801 -0.4151
+vn 0.2142 0.8944 -0.3926
+vn 0.5132 0.8570 -0.0472
+vn 0.1202 0.9202 0.3726
+vn -0.4440 0.8570 0.2617
+vn -0.4033 0.8944 -0.1934
+vn 0.1876 -0.7947 0.5774
+vn -0.4911 -0.7947 0.3568
+vn -0.4911 -0.7947 -0.3568
+vn 0.1876 -0.7947 -0.5774
+vn 0.3035 -0.1876 0.9342
+vn -0.7946 -0.1876 0.5774
+vn -0.7946 -0.1876 -0.5774
+vn 0.3035 -0.1876 -0.9342
+vn 0.7946 0.1876 0.5774
+vn -0.3035 0.1876 0.9342
+vn -0.3035 0.1876 -0.9342
+vn 0.7946 0.1876 -0.5774
+vn 0.4911 0.7947 0.3568
+vn -0.1876 0.7947 0.5774
+vn -0.1876 0.7947 -0.5774
+vn 0.4911 0.7947 -0.3568
+vn 0.3320 -0.9279 0.1696
+vn 0.4904 -0.8216 -0.2909
+vn -0.3223 -0.8577 0.4005
+vn -0.5060 -0.8577 0.0908
+vn 0.0103 -0.9279 -0.3726
+vn 0.8417 -0.2057 -0.4993
+vn 0.8371 -0.3414 0.4276
+vn -0.6091 -0.2365 0.7570
+vn -0.9564 -0.2365 0.1716
+vn 0.0261 -0.3414 -0.9396
+vn 0.9564 0.2365 -0.1716
+vn -0.0261 0.3414 0.9396
+vn -0.8417 0.2057 0.4993
+vn -0.8371 0.3414 -0.4276
+vn 0.6091 0.2365 -0.7570
+vn 0.5060 0.8577 -0.0908
+vn -0.0103 0.9279 0.3726
+vn -0.4904 0.8216 0.2909
+vn -0.3320 0.9279 -0.1696
+vn 0.3223 0.8577 -0.4005
+vn 0.1262 -0.9239 0.3613
+vn 0.4804 -0.8761 0.0420
+vn -0.4145 -0.8934 0.1732
+vn -0.3782 -0.8934 -0.2424
+vn 0.1869 -0.9239 -0.3340
+vn 0.9630 -0.2562 0.0841
+vn 0.3110 -0.3322 0.8905
+vn -0.8861 -0.2787 0.3703
+vn -0.8085 -0.2787 -0.5183
+vn 0.4606 -0.3322 -0.8231
+vn 0.8085 0.2787 0.5183
+vn -0.4606 0.3322 0.8231
+vn -0.9630 0.2562 -0.0841
+vn -0.3110 0.3322 -0.8905
+vn 0.8861 0.2787 -0.3703
+vn 0.3782 0.8934 0.2424
+vn -0.1869 0.9239 0.3340
+vn -0.4804 0.8761 -0.0420
+vn -0.1262 0.9239 -0.3613
+vn 0.4145 0.8934 -0.1732
+vn -0.1412 -0.8233 0.5498
+vn 0.3806 -0.9049 0.1904
+vn -0.4587 -0.8710 0.1762
+vn -0.1341 -0.8710 -0.4727
+vn 0.3552 -0.8233 -0.4427
+vn 0.8542 -0.2963 0.4272
+vn -0.2433 -0.2070 0.9476
+vn -0.9037 -0.2504 0.3472
+vn -0.2642 -0.2504 -0.9314
+vn 0.6123 -0.2070 -0.7631
+vn 0.2642 0.2504 0.9314
+vn -0.6123 0.2070 0.7631
+vn -0.8542 0.2963 -0.4272
+vn 0.2433 0.2070 -0.9476
+vn 0.9037 0.2504 -0.3472
+vn 0.1341 0.8710 0.4727
+vn -0.3552 0.8233 0.4427
+vn -0.3806 0.9049 -0.1904
+vn 0.1412 0.8233 -0.5498
+vn 0.4587 0.8710 -0.1762
+vn 0.2134 -0.9039 0.3707
+vn -0.5139 -0.8315 0.2108
+vn -0.5139 -0.8315 -0.2108
+vn 0.2134 -0.9039 -0.3707
+vn 0.4767 -0.2946 0.8282
+vn -0.9039 -0.2134 0.3707
+vn -0.9039 -0.2134 -0.3707
+vn 0.4767 -0.2946 -0.8282
+vn 0.9039 0.2134 0.3707
+vn -0.4767 0.2946 0.8282
+vn -0.4767 0.2946 -0.8282
+vn 0.9039 0.2134 -0.3707
+vn 0.5139 0.8315 0.2108
+vn -0.2134 0.9039 0.3707
+vn -0.2134 0.9039 -0.3707
+vn 0.5139 0.8315 -0.2108
+usemtl wood.001
+s off
+f 1//1 4//1 3//1
+f 3//2 6//2 5//2
+f 6//3 7//3 5//3
+f 8//4 9//4 7//4
+f 10//5 11//5 9//5
+f 156//6 174//6 155//6
+f 12//7 13//7 11//7
+f 14//8 1//8 13//8
+f 11//9 13//9 3//9
+f 19//10 27//10 20//10
+f 160//11 170//11 159//11
+f 164//12 173//12 163//12
+f 167//13 174//13 171//13
+f 156//14 173//14 169//14
+f 167//15 172//15 160//15
+f 164//16 170//16 175//16
+f 23//17 29//17 30//17
+f 18//18 24//18 25//18
+f 16//19 22//19 23//19
+f 20//20 28//20 21//20
+f 19//21 25//21 26//21
+f 17//22 23//22 24//22
+f 21//23 22//23 15//23
+f 28//24 34//24 35//24
+f 25//25 33//25 26//25
+f 24//26 30//26 31//26
+f 22//27 35//27 29//27
+f 26//28 34//28 27//28
+f 24//29 32//29 25//29
+f 29//30 42//30 36//30
+f 34//31 40//31 41//31
+f 31//32 39//32 32//32
+f 29//33 37//33 30//33
+f 35//34 41//34 42//34
+f 33//35 39//35 40//35
+f 30//36 38//36 31//36
+f 42//37 48//37 49//37
+f 39//38 47//38 40//38
+f 37//39 45//39 38//39
+f 36//40 49//40 43//40
+f 41//41 47//41 48//41
+f 38//42 46//42 39//42
+f 37//43 43//43 44//43
+f 42//44 55//44 41//44
+f 40//45 53//45 39//45
+f 37//46 52//46 51//46
+f 42//47 50//47 56//47
+f 41//48 54//48 40//48
+f 38//49 53//49 52//49
+f 36//50 51//50 50//50
+f 55//51 61//51 54//51
+f 52//52 60//52 59//52
+f 50//53 58//53 57//53
+f 56//54 62//54 55//54
+f 53//55 61//55 60//55
+f 51//56 59//56 58//56
+f 50//57 63//57 56//57
+f 58//58 66//58 65//58
+f 63//59 64//59 70//59
+f 62//60 68//60 61//60
+f 59//61 67//61 66//61
+f 57//62 65//62 64//62
+f 63//63 69//63 62//63
+f 61//64 67//64 60//64
+f 58//65 73//65 59//65
+f 57//66 77//66 71//66
+f 62//67 75//67 76//67
+f 59//68 74//68 60//68
+f 57//69 72//69 58//69
+f 63//70 76//70 77//70
+f 61//71 74//71 75//71
+f 69//72 84//72 83//72
+f 68//73 81//73 67//73
+f 66//74 79//74 65//74
+f 70//75 78//75 84//75
+f 68//76 83//76 82//76
+f 67//77 80//77 66//77
+f 65//78 78//78 64//78
+f 27//79 91//79 90//79
+f 26//80 88//80 25//80
+f 24//81 86//81 23//81
+f 28//82 85//82 91//82
+f 26//83 90//83 89//83
+f 25//84 87//84 24//84
+f 22//85 86//85 23//85
+f 86//86 92//86 93//86
+f 91//87 97//87 90//87
+f 88//88 96//88 95//88
+f 86//89 94//89 93//89
+f 85//90 98//90 91//90
+f 89//91 97//91 96//91
+f 87//92 95//92 94//92
+f 15//93 105//93 21//93
+f 19//94 104//94 103//94
+f 17//95 102//95 101//95
+f 16//96 99//96 15//96
+f 21//97 104//97 20//97
+f 18//98 103//98 102//98
+f 16//99 101//99 100//99
+f 105//100 111//100 104//100
+f 102//101 110//101 109//101
+f 100//102 108//102 107//102
+f 99//103 112//103 105//103
+f 104//104 110//104 103//104
+f 101//105 109//105 108//105
+f 99//106 107//106 106//106
+f 104//107 119//107 105//107
+f 102//108 117//108 103//108
+f 101//109 114//109 115//109
+f 99//110 119//110 113//110
+f 103//111 118//111 104//111
+f 101//112 116//112 102//112
+f 100//113 113//113 114//113
+f 119//114 120//114 113//114
+f 117//115 125//115 118//115
+f 116//116 122//116 123//116
+f 113//117 121//117 114//117
+f 118//118 126//118 119//118
+f 117//119 123//119 124//119
+f 115//120 121//120 122//120
+f 113//121 133//121 119//121
+f 118//122 131//122 117//122
+f 115//123 130//123 129//123
+f 113//124 128//124 127//124
+f 119//125 132//125 118//125
+f 116//126 131//126 130//126
+f 114//127 129//127 128//127
+f 108//128 137//128 136//128
+f 107//129 134//129 106//129
+f 112//130 139//130 111//130
+f 109//131 138//131 137//131
+f 108//132 135//132 107//132
+f 106//133 140//133 112//133
+f 110//134 139//134 138//134
+f 77//135 141//135 71//135
+f 76//136 145//136 146//136
+f 74//137 143//137 144//137
+f 71//138 142//138 72//138
+f 77//139 146//139 147//139
+f 75//140 144//140 145//140
+f 72//141 143//141 73//141
+f 49//142 153//142 154//142
+f 46//143 152//143 47//143
+f 44//144 150//144 45//144
+f 43//145 154//145 148//145
+f 48//146 152//146 153//146
+f 45//147 151//147 46//147
+f 43//148 149//148 44//148
+f 171//149 179//149 178//149
+f 172//150 162//150 170//150
+f 171//15 161//15 172//15
+f 175//12 166//12 173//12
+f 175//151 162//151 165//151
+f 169//6 158//6 174//6
+f 171//13 158//13 168//13
+f 169//152 166//152 157//152
+f 169//153 180//153 173//153
+f 169//154 181//154 176//154
+f 173//155 182//155 175//155
+f 172//156 177//156 179//156
+f 174//157 178//157 181//157
+f 175//158 177//158 170//158
+f 178//159 188//159 181//159
+f 177//160 189//160 184//160
+f 179//161 185//161 178//161
+f 180//162 183//162 187//162
+f 176//163 188//163 183//163
+f 182//164 187//164 189//164
+f 177//165 186//165 179//165
+f 185//166 195//166 188//166
+f 184//167 196//167 191//167
+f 186//168 192//168 185//168
+f 187//169 190//169 194//169
+f 183//170 195//170 190//170
+f 189//171 194//171 196//171
+f 184//172 193//172 186//172
+f 194//173 197//173 201//173
+f 195//174 197//174 190//174
+f 196//175 201//175 203//175
+f 193//176 198//176 200//176
+f 192//177 202//177 195//177
+f 191//178 203//178 198//178
+f 193//179 199//179 192//179
+f 190//180 208//180 204//180
+f 195//181 204//181 209//181
+f 196//182 208//182 194//182
+f 193//183 205//183 191//183
+f 192//184 209//184 206//184
+f 191//185 210//185 196//185
+f 192//186 207//186 193//186
+f 189//187 215//187 187//187
+f 186//188 212//188 184//188
+f 185//189 216//189 213//189
+f 189//190 212//190 217//190
+f 185//191 214//191 186//191
+f 183//192 215//192 211//192
+f 183//193 216//193 188//193
+f 213//194 221//194 214//194
+f 211//195 222//195 218//195
+f 216//196 218//196 223//196
+f 217//197 222//197 215//197
+f 214//198 219//198 212//198
+f 213//199 223//199 220//199
+f 212//200 224//200 217//200
+f 199//201 230//201 202//201
+f 203//202 226//202 198//202
+f 200//203 227//203 199//203
+f 197//204 229//204 201//204
+f 197//205 230//205 225//205
+f 203//206 229//206 231//206
+f 200//207 226//207 228//207
+f 202//208 234//208 199//208
+f 203//209 233//209 238//209
+f 199//210 235//210 200//210
+f 197//211 236//211 232//211
+f 197//212 237//212 202//212
+f 201//213 238//213 236//213
+f 200//214 233//214 198//214
+f 209//215 239//215 244//215
+f 208//216 245//216 243//216
+f 207//217 240//217 205//217
+f 206//218 244//218 241//218
+f 210//219 240//219 245//219
+f 206//220 242//220 207//220
+f 204//221 243//221 239//221
+f 178//222 251//222 248//222
+f 182//223 247//223 252//223
+f 178//224 249//224 179//224
+f 176//225 250//225 246//225
+f 181//226 246//226 251//226
+f 180//227 252//227 250//227
+f 179//228 247//228 177//228
+f 246//229 257//229 253//229
+f 251//230 253//230 258//230
+f 252//231 257//231 250//231
+f 249//232 254//232 247//232
+f 248//233 258//233 255//233
+f 247//234 259//234 252//234
+f 248//235 256//235 249//235
+f 255//236 265//236 262//236
+f 254//237 266//237 259//237
+f 256//238 262//238 263//238
+f 257//239 260//239 253//239
+f 253//240 265//240 258//240
+f 259//241 264//241 257//241
+f 254//242 263//242 261//242
+f 255//243 272//243 258//243
+f 254//244 273//244 268//244
+f 256//245 269//245 255//245
+f 253//246 271//246 257//246
+f 258//247 267//247 253//247
+f 259//248 271//248 273//248
+f 256//249 268//249 270//249
+f 100//250 276//250 275//250
+f 105//251 274//251 280//251
+f 104//252 278//252 103//252
+f 101//253 277//253 276//253
+f 99//254 275//254 274//254
+f 105//255 279//255 104//255
+f 103//256 277//256 102//256
+f 280//257 281//257 287//257
+f 279//258 285//258 278//258
+f 277//259 283//259 276//259
+f 274//260 282//260 281//260
+f 279//261 287//261 286//261
+f 278//262 284//262 277//262
+f 276//263 282//263 275//263
+f 35//264 293//264 34//264
+f 32//265 292//265 291//265
+f 30//266 290//266 289//266
+f 29//267 294//267 35//267
+f 34//268 292//268 33//268
+f 31//269 291//269 290//269
+f 29//270 289//270 288//270
+f 288//271 301//271 294//271
+f 293//272 299//272 292//272
+f 290//273 298//273 297//273
+f 288//274 296//274 295//274
+f 294//275 300//275 293//275
+f 292//276 298//276 291//276
+f 289//277 297//277 296//277
+f 300//278 308//278 307//278
+f 299//279 305//279 298//279
+f 297//280 303//280 296//280
+f 301//281 302//281 308//281
+f 299//282 307//282 306//282
+f 298//283 304//283 297//283
+f 296//284 302//284 295//284
+f 281//285 310//285 309//285
+f 286//286 315//286 314//286
+f 285//287 312//287 284//287
+f 282//288 311//288 310//288
+f 287//289 309//289 315//289
+f 286//290 313//290 285//290
+f 284//291 311//291 283//291
+f 176//292 320//292 180//292
+f 181//293 316//293 176//293
+f 182//294 320//294 322//294
+f 179//295 317//295 319//295
+f 178//296 321//296 181//296
+f 177//297 322//297 317//297
+f 179//298 318//298 178//298
+f 317//299 329//299 324//299
+f 319//300 325//300 318//300
+f 316//301 327//301 320//301
+f 316//302 328//302 323//302
+f 322//303 327//303 329//303
+f 319//304 324//304 326//304
+f 318//305 328//305 321//305
+f 1//1 2//1 4//1
+f 3//2 4//2 6//2
+f 6//3 8//3 7//3
+f 8//4 10//4 9//4
+f 10//5 12//5 11//5
+f 156//306 169//306 174//306
+f 12//7 14//7 13//7
+f 14//8 2//8 1//8
+f 13//9 1//9 3//9
+f 3//9 5//9 11//9
+f 5//9 7//9 11//9
+f 7//9 9//9 11//9
+f 19//307 26//307 27//307
+f 160//11 172//11 170//11
+f 164//12 175//12 173//12
+f 167//13 155//13 174//13
+f 156//14 163//14 173//14
+f 167//15 171//15 172//15
+f 164//151 159//151 170//151
+f 23//17 22//17 29//17
+f 18//308 17//308 24//308
+f 16//309 15//309 22//309
+f 20//310 27//310 28//310
+f 19//21 18//21 25//21
+f 17//311 16//311 23//311
+f 21//312 28//312 22//312
+f 28//24 27//24 34//24
+f 25//25 32//25 33//25
+f 24//26 23//26 30//26
+f 22//27 28//27 35//27
+f 26//28 33//28 34//28
+f 24//29 31//29 32//29
+f 29//30 35//30 42//30
+f 34//31 33//31 40//31
+f 31//32 38//32 39//32
+f 29//33 36//33 37//33
+f 35//34 34//34 41//34
+f 33//35 32//35 39//35
+f 30//36 37//36 38//36
+f 42//37 41//37 48//37
+f 39//38 46//38 47//38
+f 37//39 44//39 45//39
+f 36//40 42//40 49//40
+f 41//41 40//41 47//41
+f 38//42 45//42 46//42
+f 37//43 36//43 43//43
+f 42//313 56//313 55//313
+f 40//314 54//314 53//314
+f 37//315 38//315 52//315
+f 42//316 36//316 50//316
+f 41//317 55//317 54//317
+f 38//318 39//318 53//318
+f 36//319 37//319 51//319
+f 55//51 62//51 61//51
+f 52//52 53//52 60//52
+f 50//53 51//53 58//53
+f 56//54 63//54 62//54
+f 53//55 54//55 61//55
+f 51//56 52//56 59//56
+f 50//57 57//57 63//57
+f 58//58 59//58 66//58
+f 63//320 57//320 64//320
+f 62//60 69//60 68//60
+f 59//61 60//61 67//61
+f 57//62 58//62 65//62
+f 63//63 70//63 69//63
+f 61//64 68//64 67//64
+f 58//321 72//321 73//321
+f 57//322 63//322 77//322
+f 62//323 61//323 75//323
+f 59//324 73//324 74//324
+f 57//325 71//325 72//325
+f 63//326 62//326 76//326
+f 61//327 60//327 74//327
+f 69//72 70//72 84//72
+f 68//73 82//73 81//73
+f 66//74 80//74 79//74
+f 70//75 64//75 78//75
+f 68//76 69//76 83//76
+f 67//77 81//77 80//77
+f 65//78 79//78 78//78
+f 27//328 28//328 91//328
+f 26//329 89//329 88//329
+f 24//330 87//330 86//330
+f 28//331 22//331 85//331
+f 26//332 27//332 90//332
+f 25//333 88//333 87//333
+f 22//334 85//334 86//334
+f 86//335 85//335 92//335
+f 91//336 98//336 97//336
+f 88//337 89//337 96//337
+f 86//338 87//338 94//338
+f 85//339 92//339 98//339
+f 89//340 90//340 97//340
+f 87//341 88//341 95//341
+f 15//342 99//342 105//342
+f 19//343 20//343 104//343
+f 17//344 18//344 102//344
+f 16//345 100//345 99//345
+f 21//346 105//346 104//346
+f 18//347 19//347 103//347
+f 16//348 17//348 101//348
+f 105//349 112//349 111//349
+f 102//350 103//350 110//350
+f 100//351 101//351 108//351
+f 99//352 106//352 112//352
+f 104//353 111//353 110//353
+f 101//354 102//354 109//354
+f 99//355 100//355 107//355
+f 104//107 118//107 119//107
+f 102//108 116//108 117//108
+f 101//109 100//109 114//109
+f 99//110 105//110 119//110
+f 103//111 117//111 118//111
+f 101//112 115//112 116//112
+f 100//113 99//113 113//113
+f 119//356 126//356 120//356
+f 117//357 124//357 125//357
+f 116//358 115//358 122//358
+f 113//359 120//359 121//359
+f 118//360 125//360 126//360
+f 117//361 116//361 123//361
+f 115//362 114//362 121//362
+f 113//121 127//121 133//121
+f 118//122 132//122 131//122
+f 115//123 116//123 130//123
+f 113//124 114//124 128//124
+f 119//125 133//125 132//125
+f 116//126 117//126 131//126
+f 114//127 115//127 129//127
+f 108//128 109//128 137//128
+f 107//129 135//129 134//129
+f 112//363 140//363 139//363
+f 109//131 110//131 138//131
+f 108//132 136//132 135//132
+f 106//133 134//133 140//133
+f 110//134 111//134 139//134
+f 77//135 147//135 141//135
+f 76//136 75//136 145//136
+f 74//137 73//137 143//137
+f 71//138 141//138 142//138
+f 77//139 76//139 146//139
+f 75//140 74//140 144//140
+f 72//141 142//141 143//141
+f 49//142 48//142 153//142
+f 46//143 151//143 152//143
+f 44//144 149//144 150//144
+f 43//145 49//145 154//145
+f 48//146 47//146 152//146
+f 45//147 150//147 151//147
+f 43//148 148//148 149//148
+f 171//364 172//364 179//364
+f 172//11 161//11 162//11
+f 171//15 168//15 161//15
+f 175//12 165//12 166//12
+f 175//151 170//151 162//151
+f 169//6 157//6 158//6
+f 171//13 174//13 158//13
+f 169//14 173//14 166//14
+f 169//365 176//365 180//365
+f 169//366 174//366 181//366
+f 173//367 180//367 182//367
+f 172//368 170//368 177//368
+f 174//369 171//369 178//369
+f 175//370 182//370 177//370
+f 178//371 185//371 188//371
+f 177//372 182//372 189//372
+f 179//373 186//373 185//373
+f 180//374 176//374 183//374
+f 176//375 181//375 188//375
+f 182//376 180//376 187//376
+f 177//377 184//377 186//377
+f 185//166 192//166 195//166
+f 184//378 189//378 196//378
+f 186//379 193//379 192//379
+f 187//380 183//380 190//380
+f 183//381 188//381 195//381
+f 189//382 187//382 194//382
+f 184//383 191//383 193//383
+f 194//384 190//384 197//384
+f 195//385 202//385 197//385
+f 196//386 194//386 201//386
+f 193//387 191//387 198//387
+f 192//388 199//388 202//388
+f 191//389 196//389 203//389
+f 193//390 200//390 199//390
+f 190//391 194//391 208//391
+f 195//392 190//392 204//392
+f 196//393 210//393 208//393
+f 193//394 207//394 205//394
+f 192//395 195//395 209//395
+f 191//396 205//396 210//396
+f 192//397 206//397 207//397
+f 189//187 217//187 215//187
+f 186//188 214//188 212//188
+f 185//189 188//189 216//189
+f 189//190 184//190 212//190
+f 185//191 213//191 214//191
+f 183//192 187//192 215//192
+f 183//193 211//193 216//193
+f 213//194 220//194 221//194
+f 211//195 215//195 222//195
+f 216//196 211//196 218//196
+f 217//197 224//197 222//197
+f 214//198 221//198 219//198
+f 213//199 216//199 223//199
+f 212//398 219//398 224//398
+f 199//399 227//399 230//399
+f 203//400 231//400 226//400
+f 200//401 228//401 227//401
+f 197//402 225//402 229//402
+f 197//403 202//403 230//403
+f 203//404 201//404 229//404
+f 200//405 198//405 226//405
+f 202//406 237//406 234//406
+f 203//407 198//407 233//407
+f 199//408 234//408 235//408
+f 197//409 201//409 236//409
+f 197//410 232//410 237//410
+f 201//411 203//411 238//411
+f 200//412 235//412 233//412
+f 209//413 204//413 239//413
+f 208//414 210//414 245//414
+f 207//415 242//415 240//415
+f 206//416 209//416 244//416
+f 210//417 205//417 240//417
+f 206//418 241//418 242//418
+f 204//419 208//419 243//419
+f 178//420 181//420 251//420
+f 182//421 177//421 247//421
+f 178//422 248//422 249//422
+f 176//423 180//423 250//423
+f 181//424 176//424 246//424
+f 180//425 182//425 252//425
+f 179//426 249//426 247//426
+f 246//229 250//229 257//229
+f 251//230 246//230 253//230
+f 252//231 259//231 257//231
+f 249//232 256//232 254//232
+f 248//233 251//233 258//233
+f 247//234 254//234 259//234
+f 248//235 255//235 256//235
+f 255//427 258//427 265//427
+f 254//428 261//428 266//428
+f 256//429 255//429 262//429
+f 257//430 264//430 260//430
+f 253//431 260//431 265//431
+f 259//432 266//432 264//432
+f 254//433 256//433 263//433
+f 255//434 269//434 272//434
+f 254//435 259//435 273//435
+f 256//436 270//436 269//436
+f 253//437 267//437 271//437
+f 258//438 272//438 267//438
+f 259//439 257//439 271//439
+f 256//440 254//440 268//440
+f 100//441 101//441 276//441
+f 105//442 99//442 274//442
+f 104//443 279//443 278//443
+f 101//444 102//444 277//444
+f 99//445 100//445 275//445
+f 105//446 280//446 279//446
+f 103//447 278//447 277//447
+f 280//257 274//257 281//257
+f 279//258 286//258 285//258
+f 277//259 284//259 283//259
+f 274//260 275//260 282//260
+f 279//261 280//261 287//261
+f 278//262 285//262 284//262
+f 276//263 283//263 282//263
+f 35//448 294//448 293//448
+f 32//265 33//265 292//265
+f 30//449 31//449 290//449
+f 29//450 288//450 294//450
+f 34//451 293//451 292//451
+f 31//452 32//452 291//452
+f 29//453 30//453 289//453
+f 288//271 295//271 301//271
+f 293//272 300//272 299//272
+f 290//273 291//273 298//273
+f 288//274 289//274 296//274
+f 294//275 301//275 300//275
+f 292//276 299//276 298//276
+f 289//277 290//277 297//277
+f 300//278 301//278 308//278
+f 299//279 306//279 305//279
+f 297//280 304//280 303//280
+f 301//281 295//281 302//281
+f 299//282 300//282 307//282
+f 298//283 305//283 304//283
+f 296//284 303//284 302//284
+f 281//285 282//285 310//285
+f 286//286 287//286 315//286
+f 285//287 313//287 312//287
+f 282//288 283//288 311//288
+f 287//289 281//289 309//289
+f 286//290 314//290 313//290
+f 284//291 312//291 311//291
+f 176//454 316//454 320//454
+f 181//455 321//455 316//455
+f 182//456 180//456 320//456
+f 179//457 177//457 317//457
+f 178//458 318//458 321//458
+f 177//459 182//459 322//459
+f 179//460 319//460 318//460
+f 317//299 322//299 329//299
+f 319//300 326//300 325//300
+f 316//301 323//301 327//301
+f 316//302 321//302 328//302
+f 322//303 320//303 327//303
+f 319//304 317//304 324//304
+f 318//305 325//305 328//305
+usemtl l2.001
+f 330//461 331//461 332//461
+f 331//462 330//462 335//462
+f 330//463 332//463 333//463
+f 330//464 333//464 334//464
+f 330//465 334//465 335//465
+f 331//466 335//466 340//466
+f 332//467 331//467 336//467
+f 333//468 332//468 337//468
+f 334//469 333//469 338//469
+f 335//470 334//470 339//470
+f 331//471 340//471 336//471
+f 332//472 336//472 337//472
+f 333//473 337//473 338//473
+f 334//474 338//474 339//474
+f 335//475 339//475 340//475
+f 336//476 340//476 341//476
+f 337//477 336//477 341//477
+f 338//478 337//478 341//478
+f 339//479 338//479 341//479
+f 340//480 339//480 341//480
+usemtl l3.001
+f 342//481 343//481 344//481
+f 343//482 342//482 347//482
+f 342//483 344//483 345//483
+f 342//484 345//484 346//484
+f 342//485 346//485 347//485
+f 343//486 347//486 352//486
+f 344//487 343//487 348//487
+f 345//488 344//488 349//488
+f 346//489 345//489 350//489
+f 347//490 346//490 351//490
+f 343//491 352//491 348//491
+f 344//492 348//492 349//492
+f 345//493 349//493 350//493
+f 346//494 350//494 351//494
+f 347//495 351//495 352//495
+f 348//496 352//496 353//496
+f 349//497 348//497 353//497
+f 350//498 349//498 353//498
+f 351//499 350//499 353//499
+f 352//500 351//500 353//500
+usemtl l4.001
+f 354//501 355//501 356//501
+f 355//462 354//462 359//462
+f 354//502 356//502 357//502
+f 354//503 357//503 358//503
+f 354//504 358//504 359//504
+f 355//466 359//466 364//466
+f 356//505 355//505 360//505
+f 357//506 356//506 361//506
+f 358//507 357//507 362//507
+f 359//508 358//508 363//508
+f 355//509 364//509 360//509
+f 356//510 360//510 361//510
+f 357//473 361//473 362//473
+f 358//511 362//511 363//511
+f 359//512 363//512 364//512
+f 360//513 364//513 365//513
+f 361//514 360//514 365//514
+f 362//478 361//478 365//478
+f 363//515 362//515 365//515
+f 364//516 363//516 365//516
+usemtl l5.001
+f 366//517 367//517 368//517
+f 367//518 366//518 371//518
+f 366//519 368//519 369//519
+f 366//520 369//520 370//520
+f 366//521 370//521 371//521
+f 367//522 371//522 376//522
+f 368//523 367//523 372//523
+f 369//524 368//524 373//524
+f 370//525 369//525 374//525
+f 371//526 370//526 375//526
+f 367//527 376//527 372//527
+f 368//528 372//528 373//528
+f 369//529 373//529 374//529
+f 370//530 374//530 375//530
+f 371//531 375//531 376//531
+f 372//532 376//532 377//532
+f 373//533 372//533 377//533
+f 374//534 373//534 377//534
+f 375//535 374//535 377//535
+f 376//536 375//536 377//536
+usemtl l1.001
+f 378//537 379//537 380//537
+f 379//538 378//538 383//538
+f 378//539 380//539 381//539
+f 378//540 381//540 382//540
+f 378//541 382//541 383//541
+f 379//542 383//542 388//542
+f 380//543 379//543 384//543
+f 381//544 380//544 385//544
+f 382//545 381//545 386//545
+f 383//546 382//546 387//546
+f 379//547 388//547 384//547
+f 380//548 384//548 385//548
+f 381//549 385//549 386//549
+f 382//550 386//550 387//550
+f 383//551 387//551 388//551
+f 384//552 388//552 389//552
+f 385//553 384//553 389//553
+f 386//554 385//554 389//554
+f 387//555 386//555 389//555
+f 388//556 387//556 389//556
+usemtl l6.001
+f 390//557 391//557 392//557
+f 391//558 390//558 395//558
+f 390//559 392//559 393//559
+f 390//560 393//560 394//560
+f 390//561 394//561 395//561
+f 391//562 395//562 400//562
+f 392//563 391//563 396//563
+f 393//564 392//564 397//564
+f 394//565 393//565 398//565
+f 395//566 394//566 399//566
+f 391//567 400//567 396//567
+f 392//568 396//568 397//568
+f 393//569 397//569 398//569
+f 394//570 398//570 399//570
+f 395//571 399//571 400//571
+f 396//572 400//572 401//572
+f 397//573 396//573 401//573
+f 398//574 397//574 401//574
+f 399//575 398//575 401//575
+f 400//576 399//576 401//576
+usemtl l7.001
+f 402//577 403//577 404//577
+f 403//462 402//462 407//462
+f 402//578 404//578 405//578
+f 402//579 405//579 406//579
+f 402//580 406//580 407//580
+f 403//466 407//466 412//466
+f 404//581 403//581 408//581
+f 405//582 404//582 409//582
+f 406//583 405//583 410//583
+f 407//584 406//584 411//584
+f 403//585 412//585 408//585
+f 404//586 408//586 409//586
+f 405//473 409//473 410//473
+f 406//587 410//587 411//587
+f 407//588 411//588 412//588
+f 408//589 412//589 413//589
+f 409//590 408//590 413//590
+f 410//478 409//478 413//478
+f 411//591 410//591 413//591
+f 412//592 411//592 413//592
diff --git a/resources/res/models/others/menu_DNA.obj b/resources/res/models/others/menu_DNA.obj
new file mode 100644
index 0000000..93c68c8
--- /dev/null
+++ b/resources/res/models/others/menu_DNA.obj
@@ -0,0 +1,348 @@
+# Blender v2.79 (sub 0) OBJ File: ''
+# www.blender.org
+o Cube
+v 1.000000 0.000000 0.000000
+v -1.000000 0.000000 -0.000000
+v 0.984808 0.250000 -0.173648
+v -0.984808 0.250000 0.173648
+v -0.939693 0.500000 0.342020
+v 0.939693 0.500000 -0.342020
+v -0.866026 0.750000 0.500000
+v 0.866025 0.750000 -0.500000
+v -0.766045 1.000000 0.642787
+v 0.766044 1.000000 -0.642787
+v -0.642788 1.250000 0.766044
+v 0.642788 1.250000 -0.766044
+v -0.500000 1.500000 0.866025
+v 0.500000 1.500000 -0.866025
+v -0.342020 1.750000 0.939692
+v 0.342020 1.750000 -0.939692
+v -0.173648 2.000000 0.984808
+v 0.173648 2.000000 -0.984807
+v -0.000000 2.250000 1.000000
+v 0.000000 2.250000 -1.000000
+v 0.173648 2.500000 0.984808
+v -0.173648 2.500000 -0.984807
+v 0.342020 2.750000 0.939692
+v -0.342020 2.750000 -0.939692
+v 0.500000 3.000000 0.866025
+v -0.500000 3.000000 -0.866025
+v 0.642787 3.250000 0.766044
+v -0.642787 3.250000 -0.766044
+v 0.766044 3.500000 0.642788
+v -0.766044 3.500000 -0.642787
+v 0.866025 3.750000 0.500000
+v -0.866025 3.750000 -0.500000
+v 0.939692 4.000000 0.342020
+v -0.939692 4.000000 -0.342020
+v 0.984807 4.250000 0.173648
+v -0.984807 4.250000 -0.173648
+v 0.999999 4.500000 0.000000
+v -1.000000 4.500000 -0.000000
+v 0.984807 4.750000 -0.173648
+v -0.984807 4.750000 0.173648
+v 0.939692 5.000000 -0.342020
+v -0.939692 5.000000 0.342020
+v 0.866025 5.250000 -0.500000
+v -0.866025 5.250000 0.500000
+v 0.766044 5.500000 -0.642787
+v -0.766044 5.500000 0.642787
+v 0.642787 5.750000 -0.766044
+v -0.642787 5.750000 0.766044
+v 0.500000 6.000000 -0.866025
+v -0.500000 6.000000 0.866025
+v 0.500000 6.000000 -0.866025
+v -0.500000 6.000000 0.866025
+v 0.342020 6.250000 -0.939692
+v -0.342020 6.250000 0.939692
+v 0.173648 6.500000 -0.984807
+v -0.173648 6.500000 0.984807
+v 0.000000 6.750000 -0.999999
+v -0.000000 6.750000 0.999999
+v -0.173648 7.000000 -0.984807
+v 0.173648 7.000000 0.984807
+v -0.342020 7.250000 -0.939692
+v 0.342020 7.250000 0.939692
+v -0.500000 7.500000 -0.866025
+v 0.499999 7.500000 0.866025
+v -0.642787 7.750000 -0.766044
+v 0.642787 7.750000 0.766044
+v -0.642787 8.000000 -0.766044
+v 0.642787 8.000000 0.766044
+v -0.766044 8.250000 -0.642787
+v 0.766044 8.250000 0.642787
+v -0.866025 8.500000 -0.500000
+v 0.866025 8.500000 0.500000
+v -0.939692 8.750000 -0.342020
+v 0.939692 8.750000 0.342020
+v -0.984807 9.000000 -0.173648
+v 0.984807 9.000000 0.173648
+v -0.999999 9.250000 0.000000
+v 0.999999 9.250000 0.000000
+v -1.300000 0.000000 -0.000000
+v -1.284808 0.250000 0.173648
+v 1.300000 0.000000 0.000000
+v 1.284808 0.250000 -0.173648
+v -1.235135 0.500000 0.394114
+v 1.235135 0.500000 -0.394114
+v -1.147933 0.750000 0.602606
+v 1.147933 0.750000 -0.602606
+v -1.025852 1.000000 0.792787
+v 1.025852 1.000000 -0.792787
+v -0.872601 1.250000 0.958881
+v 0.872601 1.250000 -0.958880
+v -0.692837 1.500000 1.095839
+v 0.692836 1.500000 -1.095839
+v -0.492020 1.750000 1.199500
+v 0.492020 1.750000 -1.199500
+v -0.276254 2.000000 1.266715
+v 0.276254 2.000000 -1.266715
+v -0.052095 2.250000 1.295442
+v 0.052094 2.250000 -1.295442
+v 0.173648 2.500000 1.284807
+v -0.173648 2.500000 -1.284807
+v 0.394114 2.750000 1.235135
+v -0.394114 2.750000 -1.235135
+v 0.602606 3.000000 1.147933
+v -0.602606 3.000000 -1.147933
+v 0.792787 3.250000 1.025852
+v -0.792787 3.250000 -1.025852
+v 0.958880 3.500000 0.872601
+v -0.958880 3.500000 -0.872601
+v 1.095838 3.750000 0.692836
+v -1.095838 3.750000 -0.692836
+v 1.199499 4.000000 0.492020
+v -1.199500 4.000000 -0.492020
+v 1.266715 4.250000 0.276254
+v -1.266715 4.250000 -0.276254
+v 1.295441 4.500000 0.052095
+v -1.295442 4.500000 -0.052095
+v 1.284807 4.750000 -0.173648
+v -1.284807 4.750000 0.173648
+v 1.235134 5.000000 -0.394114
+v -1.235134 5.000000 0.394114
+v 1.147932 5.250000 -0.602606
+v -1.147933 5.250000 0.602606
+v 1.025851 5.500000 -0.792787
+v -1.025851 5.500000 0.792787
+v 0.872600 5.750000 -0.958880
+v -0.872600 5.750000 0.958880
+v 0.692836 6.000000 -1.095838
+v -0.692836 6.000000 1.095838
+v 0.492020 6.250000 -1.199499
+v -0.492020 6.250000 1.199499
+v 0.276254 6.500000 -1.266714
+v -0.276254 6.500000 1.266714
+v 0.052094 6.750000 -1.295441
+v -0.052095 6.750000 1.295441
+v -0.173648 7.000000 -1.284806
+v 0.173648 7.000000 1.284806
+v -0.394114 7.250000 -1.235134
+v 0.394114 7.250000 1.235134
+v -0.602605 7.500000 -1.147932
+v 0.602605 7.500000 1.147932
+v -0.792787 7.750000 -1.025851
+v 0.792787 7.750000 1.025851
+v -0.958880 8.000000 -0.872600
+v 0.958879 8.000000 0.872600
+v -1.095838 8.250000 -0.692835
+v 1.095837 8.250000 0.692835
+v -1.199499 8.500000 -0.492020
+v 1.199499 8.500000 0.492020
+v -1.266714 8.750000 -0.276254
+v 1.266714 8.750000 0.276254
+v -1.295441 9.000000 -0.052094
+v 1.295440 9.000000 0.052094
+v -1.284806 9.250000 0.173648
+v 1.284806 9.250000 -0.173648
+s off
+f 2 3 1
+f 6 7 5
+f 10 11 9
+f 14 15 13
+f 18 19 17
+f 21 24 23
+f 26 27 25
+f 30 31 29
+f 34 35 33
+f 38 39 37
+f 42 43 41
+f 46 47 45
+f 49 52 51
+f 52 53 51
+f 56 57 55
+f 60 61 59
+f 64 65 63
+f 68 69 67
+f 72 73 71
+f 76 77 75
+f 2 80 4
+f 1 82 81
+f 115 37 35
+f 116 38 36
+f 2 4 3
+f 6 8 7
+f 10 12 11
+f 14 16 15
+f 18 20 19
+f 21 22 24
+f 26 28 27
+f 30 32 31
+f 34 36 35
+f 38 40 39
+f 42 44 43
+f 46 48 47
+f 49 50 52
+f 52 54 53
+f 56 58 57
+f 60 62 61
+f 64 66 65
+f 68 70 69
+f 72 74 73
+f 76 78 77
+f 2 79 80
+f 1 3 82
+f 5 4 83
+f 4 80 83
+f 83 85 5
+f 85 87 7
+f 87 89 9
+f 89 91 11
+f 91 93 13
+f 11 91 13
+f 93 95 15
+f 95 97 17
+f 15 95 17
+f 97 99 19
+f 99 101 21
+f 101 103 23
+f 103 105 25
+f 23 103 25
+f 105 107 27
+f 107 109 29
+f 27 107 29
+f 109 111 31
+f 111 113 33
+f 31 111 33
+f 113 115 35
+f 115 117 37
+f 37 117 39
+f 117 119 39
+f 119 121 41
+f 121 123 43
+f 123 125 45
+f 45 125 47
+f 125 127 47
+f 127 129 49
+f 49 129 53
+f 129 131 53
+f 131 133 55
+f 133 135 57
+f 135 137 59
+f 137 139 61
+f 139 141 63
+f 141 143 65
+f 143 145 69
+f 145 147 71
+f 147 149 73
+f 71 147 73
+f 149 151 75
+f 151 153 77
+f 75 151 77
+f 75 73 149
+f 139 63 61
+f 143 69 65
+f 131 55 53
+f 135 59 57
+f 119 41 39
+f 99 21 19
+f 21 101 23
+f 87 9 7
+f 7 5 85
+f 69 67 65
+f 145 71 69
+f 11 9 89
+f 141 65 63
+f 13 93 15
+f 137 61 59
+f 133 57 55
+f 19 17 97
+f 53 51 49
+f 127 49 47
+f 27 25 105
+f 123 45 43
+f 29 109 31
+f 121 43 41
+f 35 33 113
+f 6 3 84
+f 3 82 84
+f 84 86 6
+f 86 88 8
+f 88 90 10
+f 90 92 12
+f 92 94 14
+f 12 92 14
+f 94 96 16
+f 96 98 18
+f 16 96 18
+f 98 100 20
+f 100 102 22
+f 102 104 24
+f 104 106 26
+f 24 104 26
+f 106 108 28
+f 108 110 30
+f 28 108 30
+f 110 112 32
+f 112 114 34
+f 32 112 34
+f 114 116 36
+f 116 118 38
+f 38 118 40
+f 118 120 40
+f 120 122 42
+f 122 124 44
+f 124 126 46
+f 46 126 48
+f 126 128 48
+f 128 130 50
+f 50 130 54
+f 130 132 54
+f 132 134 56
+f 134 136 58
+f 136 138 60
+f 138 140 62
+f 140 142 64
+f 142 144 66
+f 144 146 70
+f 146 148 72
+f 148 150 74
+f 72 148 74
+f 150 152 76
+f 152 154 78
+f 76 152 78
+f 76 74 150
+f 140 64 62
+f 144 70 66
+f 132 56 54
+f 136 60 58
+f 120 42 40
+f 100 22 20
+f 22 102 24
+f 88 10 8
+f 8 6 86
+f 70 68 66
+f 146 72 70
+f 12 10 90
+f 142 66 64
+f 14 94 16
+f 138 62 60
+f 134 58 56
+f 20 18 98
+f 54 52 50
+f 128 50 48
+f 28 26 106
+f 124 46 44
+f 30 110 32
+f 122 44 42
+f 36 34 114
diff --git a/resources/res/shaders/blur/fshader.glsl b/resources/res/shaders/blur/fshader.glsl
new file mode 100644
index 0000000..bc2f88c
--- /dev/null
+++ b/resources/res/shaders/blur/fshader.glsl
@@ -0,0 +1,23 @@
+#version 430 core
+
+in vec2 out_texCoords[11];
+
+out vec4 frag_Color;
+
+uniform sampler2D tex;
+
+void main(void) {
+	vec4 color = vec4(0.0);
+	color += texture(tex, out_texCoords[0]) * 0.0093;
+	color += texture(tex, out_texCoords[1]) * 0.028002;
+	color += texture(tex, out_texCoords[2]) * 0.065984;
+	color += texture(tex, out_texCoords[3]) * 0.121703;
+	color += texture(tex, out_texCoords[4]) * 0.175713;
+	color += texture(tex, out_texCoords[5]) * 0.198596;
+	color += texture(tex, out_texCoords[6]) * 0.175713;
+	color += texture(tex, out_texCoords[7]) * 0.121703;
+	color += texture(tex, out_texCoords[8]) * 0.065984;
+	color += texture(tex, out_texCoords[9]) * 0.028002;
+	color += texture(tex, out_texCoords[10]) * 0.0093;
+	frag_Color = color;
+}
diff --git a/resources/res/shaders/blur/vhshader.glsl b/resources/res/shaders/blur/vhshader.glsl
new file mode 100644
index 0000000..d38305b
--- /dev/null
+++ b/resources/res/shaders/blur/vhshader.glsl
@@ -0,0 +1,15 @@
+#version 430 core
+
+layout(location = 0) in vec2 in_position;
+
+out vec2 out_texCoords[11];
+uniform vec2 size;
+
+void main(void){
+	gl_Position = vec4(in_position, 0.0, 1.0);
+	vec2 ctexCoords = in_position / 2.0 + 0.5;
+	float ps = 1.0 / size.x;
+	for(int i = -5; i <= 5; i++){
+		out_texCoords[i + 5] = ctexCoords + vec2(i * ps, 0.0);
+	}
+}
diff --git a/resources/res/shaders/blur/vvshader.glsl b/resources/res/shaders/blur/vvshader.glsl
new file mode 100644
index 0000000..d246f25
--- /dev/null
+++ b/resources/res/shaders/blur/vvshader.glsl
@@ -0,0 +1,16 @@
+#version 430 core
+
+layout(location = 0) in vec2 in_position;
+
+out vec2 out_texCoords[11];
+
+uniform vec2 size;
+
+void main(void) {
+	gl_Position = vec4(in_position, 0.0, 1.0);
+	vec2 ctexCoords = in_position / 2.0 + 0.5;
+	float ps = 1.0 / size.y;
+	for (int i = -5; i <= 5; i++) {
+		out_texCoords[i + 5] = ctexCoords + vec2(0.0, i * ps);
+	}
+}
diff --git a/resources/res/shaders/depthFieldBlur/fragment.glsl b/resources/res/shaders/depthFieldBlur/fragment.glsl
new file mode 100644
index 0000000..9641769
--- /dev/null
+++ b/resources/res/shaders/depthFieldBlur/fragment.glsl
@@ -0,0 +1,33 @@
+#version 430 core
+
+layout(location = 0) in vec2 in_texCoords;
+
+out vec4 frag_Color;
+
+uniform sampler2D colorTexture;
+uniform sampler2D depthTexture;
+uniform sampler2D bluredTexture;
+
+uniform vec2 nearFarPlanes;
+
+float toLinearDepth(float zDepth) {
+	float near = nearFarPlanes.x;
+	float far = nearFarPlanes.y;
+	return 2.0 * near * far / (far + near - (2.0 * zDepth - 1.0) * (far - near));
+}
+
+vec4 blurColor() {
+	vec4 color = texture(bluredTexture, in_texCoords);
+	return color;
+}
+
+void main(void) {
+	vec4 color = texture(colorTexture, in_texCoords);
+	float depth = toLinearDepth(texture(depthTexture, in_texCoords).r);
+	vec4 trueColor = color;
+	if (depth > 0.1) {
+		trueColor = blurColor();
+	}
+	frag_Color = trueColor;
+//	frag_Color = vec4(texture(depthTexture, in_texCoords).r);
+}
diff --git a/resources/res/shaders/depthFieldBlur/vertex.glsl b/resources/res/shaders/depthFieldBlur/vertex.glsl
new file mode 100644
index 0000000..30a6261
--- /dev/null
+++ b/resources/res/shaders/depthFieldBlur/vertex.glsl
@@ -0,0 +1,10 @@
+#version 430 core
+
+layout (location = 0) in vec2 in_position;
+
+layout (location = 0) out vec2 out_texCoords;
+
+void main(void){
+	gl_Position = vec4(in_position, 0.0, 1.0);
+	out_texCoords = in_position / 2.0 + 0.5;
+}
diff --git a/resources/res/shaders/guis/guiFragment.glsl b/resources/res/shaders/guis/guiFragment.glsl
new file mode 100644
index 0000000..44a091b
--- /dev/null
+++ b/resources/res/shaders/guis/guiFragment.glsl
@@ -0,0 +1,15 @@
+#version 430 core
+
+layout(location = 0) in vec2 in_texCoords;
+
+out vec4 frag_Color;
+
+uniform sampler2D tex;
+
+void main(void){
+	frag_Color = texture(tex, in_texCoords);
+	if(frag_Color.a < 0.5)
+		discard;
+	if(dot(normalize(frag_Color.xyz * 2.0 - 1.0), normalize(vec3(1.0, 0.016, 0.839) * 2.0 - 1.0)) >= 0.99999)
+		discard;
+}
diff --git a/resources/res/shaders/guis/guiVertex.glsl b/resources/res/shaders/guis/guiVertex.glsl
new file mode 100644
index 0000000..332697c
--- /dev/null
+++ b/resources/res/shaders/guis/guiVertex.glsl
@@ -0,0 +1,12 @@
+#version 430 core
+
+layout(location = 0) in vec2 in_position;
+
+layout(location = 0) out vec2 out_texCoords;
+
+uniform mat4 transformationMatrix;
+
+void main(void){
+	gl_Position = transformationMatrix * vec4(in_position, 0.0, 1.0);
+	out_texCoords = in_position / 2.0 + 0.5;
+}
diff --git a/resources/res/shaders/menuDNA/fragmentShader.glsl b/resources/res/shaders/menuDNA/fragmentShader.glsl
new file mode 100644
index 0000000..20b019e
--- /dev/null
+++ b/resources/res/shaders/menuDNA/fragmentShader.glsl
@@ -0,0 +1,8 @@
+#version 430 core
+
+out vec4 frag_Color;
+
+void main(void)
+{
+	frag_Color = vec4(vec3(0.5), 1.0);
+}
diff --git a/resources/res/shaders/menuDNA/vertexShader.glsl b/resources/res/shaders/menuDNA/vertexShader.glsl
new file mode 100644
index 0000000..8d44288
--- /dev/null
+++ b/resources/res/shaders/menuDNA/vertexShader.glsl
@@ -0,0 +1,11 @@
+#version 430 core
+
+layout(location = 0) in vec3 in_position;
+
+uniform mat4 transformationMatrix;
+uniform mat4 projectionMatrix;
+
+void main(void) {
+	vec4 worldPosition = transformationMatrix * vec4(in_position, 1.0);
+	gl_Position = projectionMatrix * worldPosition;
+}
diff --git a/resources/res/shaders/standard/fragmentShader.glsl b/resources/res/shaders/standard/fragmentShader.glsl
new file mode 100644
index 0000000..fdcf1b8
--- /dev/null
+++ b/resources/res/shaders/standard/fragmentShader.glsl
@@ -0,0 +1,16 @@
+#version 430 core
+
+layout(location = 0) in vec4 in_cc;
+layout(location = 1) in vec2 in_texCoords;
+layout(location = 2) in float in_visibility;
+
+out vec4 frag_Color;
+
+uniform sampler2D tex;
+uniform vec3 skyColor;
+
+void main(void)
+{
+	frag_Color = (in_cc.w == 0 ? texture(tex, in_texCoords) : vec4(in_cc.xyz, 1.0));
+	frag_Color = mix(vec4(skyColor, 1.0), frag_Color, in_visibility);
+}
diff --git a/resources/res/shaders/standard/vertexShader.glsl b/resources/res/shaders/standard/vertexShader.glsl
new file mode 100644
index 0000000..78bc44b
--- /dev/null
+++ b/resources/res/shaders/standard/vertexShader.glsl
@@ -0,0 +1,76 @@
+#version 430 core
+
+layout(location = 0) in vec3 in_position;
+layout(location = 1) in vec3 in_normal;
+layout(location = 2) in vec2 in_texCoords;
+layout(location = 3) in vec3 color;
+layout(location = 4) in vec3 colorsIndicators;
+layout(location = 5) in vec4 in_materialData;
+
+layout(location = 0) out vec4 out_cc;
+layout(location = 1) out vec2 out_texCoords;
+layout(location = 2) out float out_visibility;
+
+uniform mat4 transformationMatrix;
+uniform mat4 viewMatrix;
+uniform mat4 projectionMatrix;
+
+#Struct_Lib.Light
+
+uniform Light light;
+uniform vec4 clipPlane;
+
+uniform vec3 customColors[3];
+
+#Struct_Lib.FogValues
+
+uniform FogValues fogValues;
+
+uniform float time;
+
+vec3 calculateDiffuse(vec3 normal) {
+	float dot1 = max(dot(-normalize(light.direction), normal), 0.0);
+	return (light.color * light.bias.x) + (dot1 * light.color * light.bias.y);
+}
+
+vec3 customColor(vec3 normal) {
+	vec3 f;
+	if (colorsIndicators.z == 1)
+		f = vec3(1, 0, 0);
+	else if (colorsIndicators.z == 2)
+		f = vec3(0, 1, 0);
+	else if (colorsIndicators.z == 3)
+		f = vec3(1, 1, 0);
+	else if (colorsIndicators.z == 4)
+		f = vec3(0, 0, 1);
+	else if (colorsIndicators.z == 5)
+		f = vec3(1, 0, 1);
+	else if (colorsIndicators.z == 6)
+		f = vec3(0, 1, 1);
+	else if (colorsIndicators.z == 7)
+		f = vec3(1, 1, 1);
+	int indc = int(colorsIndicators.x - 1);
+	return calculateDiffuse(normal)
+			* (indc < 0 ? color : (customColors[indc] + colorsIndicators.y * f));
+}
+
+vec4 calculatePosition() {
+	vec4 pos = vec4(in_position, 1.0);
+	pos += time * vec4(in_normal, 0.0) * in_materialData.x;
+	return pos;
+}
+
+void main(void) {
+	vec4 worldPosition = transformationMatrix * calculatePosition();
+	vec4 posRelativeToCamera = viewMatrix * worldPosition;
+	gl_Position = projectionMatrix * posRelativeToCamera;
+	gl_ClipDistance[0] = dot(worldPosition, clipPlane);
+	out_texCoords = in_texCoords;
+	vec3 normal = normalize(in_normal);
+	normal = (transformationMatrix * vec4(normal, 0.0)).xyz;
+	out_cc = vec4(customColor(normal), (colorsIndicators.z == -1 ? 0 : 1));
+	float distance = length(posRelativeToCamera.xyz);
+	out_visibility = exp(
+			-pow((distance * fogValues.density), fogValues.gradient));
+	out_visibility = clamp(out_visibility, 0.0, 1.0);
+}
diff --git a/resources/res/shaders/terrain/terrainFragment.glsl b/resources/res/shaders/terrain/terrainFragment.glsl
new file mode 100644
index 0000000..5759550
--- /dev/null
+++ b/resources/res/shaders/terrain/terrainFragment.glsl
@@ -0,0 +1,13 @@
+#version 430 core
+
+layout(location = 0) flat in vec3 in_color;
+layout(location = 1) in float in_visibility;
+
+out vec4 frag_Color;
+
+uniform vec3 skyColor;
+
+void main(void){
+	frag_Color = vec4(in_color, 1.0);
+	frag_Color = mix(vec4(skyColor, 1.0), frag_Color, in_visibility);
+}
diff --git a/resources/res/shaders/terrain/terrainVertex.glsl b/resources/res/shaders/terrain/terrainVertex.glsl
new file mode 100644
index 0000000..f8cbf20
--- /dev/null
+++ b/resources/res/shaders/terrain/terrainVertex.glsl
@@ -0,0 +1,57 @@
+#version 430 core
+
+layout(location = 0) in vec3 position;
+layout(location = 1) in vec3 in_normal;
+layout(location = 2) in vec3 final_color;
+
+layout(location = 0) flat out vec3 out_color;
+layout(location = 1) out float out_visibility;
+
+uniform mat4 projectionMatrix;
+uniform mat4 transformationMatrix;
+uniform mat4 viewMatrix;
+
+#Struct_Lib.Light
+
+uniform Light light;
+uniform vec4 clipPlane;
+
+#Struct_Lib.FogValues
+
+uniform FogValues fogValues;
+
+layout(std430, binding = 0) buffer colors
+{
+	float cls[];
+};
+
+vec3 calculateDiffuse() {
+	float dot1 = dot(normalize(-light.direction), in_normal);
+	dot1 = max(dot1, 0.0);
+	return (light.color * light.bias.x) + (dot1 * light.color * light.bias.y);
+}
+
+vec3 calculateColor(vec3 color) {
+	return color * calculateDiffuse();
+}
+
+void main(void) {
+	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
+	vec4 posRelativeToCamera = viewMatrix * worldPosition;
+	gl_Position = projectionMatrix * posRelativeToCamera;
+	gl_ClipDistance[0] = dot(worldPosition, clipPlane);
+	vec3 color = mix(
+			vec3(cls[gl_VertexID * 3], cls[gl_VertexID * 3 + 1],
+					cls[gl_VertexID * 3 + 2]), final_color, 0.0015);
+	out_color = color;
+	cls[gl_VertexID * 3] = color.x;
+	cls[gl_VertexID * 3 + 1] = color.y;
+	cls[gl_VertexID * 3 + 2] = color.z;
+
+	out_color = calculateColor(out_color);
+
+	float distance = length(posRelativeToCamera.xyz);
+	out_visibility = exp(
+			-pow((distance * fogValues.density), fogValues.gradient));
+	out_visibility = clamp(out_visibility, 0.0, 1.0);
+}
diff --git a/resources/res/shaders/water/fragment.glsl b/resources/res/shaders/water/fragment.glsl
new file mode 100644
index 0000000..4f0a85c
--- /dev/null
+++ b/resources/res/shaders/water/fragment.glsl
@@ -0,0 +1,86 @@
+#version 430 core
+
+const vec3 waterColour = vec3(0.604, 0.867, 0.851);
+const float fresnelReflective = 2.5;
+const float edgeSoftness = 1;
+const float minBlueness = 0.2;
+const float maxBlueness = 0.6;
+const float murkyDepth = 14;
+
+out vec4 frag_Color;
+
+layout(location = 0) in vec4 pass_clipSpaceGrid;
+layout(location = 1) in vec4 pass_clipSpaceReal;
+layout(location = 2) flat in vec3 pass_normal;
+layout(location = 3) in vec3 pass_toCameraVector;
+layout(location = 4) in vec3 pass_specular;
+layout(location = 5) in vec3 pass_diffuse;
+layout(location = 6) in float in_visibility;
+
+uniform sampler2D reflectionTexture;
+uniform sampler2D refractionTexture;
+uniform sampler2D depthTexture;
+uniform vec2 nearFarPlanes;
+uniform vec3 skyColor;
+
+vec3 applyMurkiness(vec3 refractColour, float waterDepth) {
+	float murkyFactor = clamp(waterDepth / murkyDepth, 0.0, 1.0);
+	float murkiness = minBlueness + murkyFactor * (maxBlueness - minBlueness);
+	return mix(refractColour, waterColour, murkiness);
+}
+
+float toLinearDepth(float zDepth) {
+	float near = nearFarPlanes.x;
+	float far = nearFarPlanes.y;
+	return 2.0 * near * far / (far + near - (2.0 * zDepth - 1.0) * (far - near));
+}
+
+float calculateWaterDepth(vec2 texCoords) {
+	float depth = texture(depthTexture, texCoords).r;
+	float floorDistance = toLinearDepth(depth);
+	depth = gl_FragCoord.z;
+	float waterDistance = toLinearDepth(depth);
+	return floorDistance - waterDistance;
+}
+
+float calculateFresnel() {
+	vec3 viewVector = normalize(pass_toCameraVector);
+	vec3 normal = mix(normalize(pass_normal), vec3(0.0, 1.0, 0.0), 0.9);
+	float refractiveFactor = dot(viewVector, normal);
+	refractiveFactor = pow(refractiveFactor, fresnelReflective);
+	return clamp(refractiveFactor, 0.0, 1.0);
+}
+
+vec2 clipSpaceToTexCoords(vec4 clipSpace) {
+	vec2 ndc = (clipSpace.xy / clipSpace.w);
+	vec2 texCoords = ndc / 2.0 + 0.5;
+	return clamp(texCoords, 0.002, 0.998);
+}
+
+void main(void) {
+
+	vec2 texCoordsReal = clipSpaceToTexCoords(pass_clipSpaceReal);
+	vec2 texCoordsGrid = clipSpaceToTexCoords(pass_clipSpaceGrid);
+
+	vec2 refractionTexCoords = texCoordsGrid;
+	vec2 reflectionTexCoords = vec2(texCoordsGrid.x, 1.0 - texCoordsGrid.y);
+	float waterDepth = calculateWaterDepth(texCoordsReal);
+
+	vec3 refractColour = texture(refractionTexture, refractionTexCoords).rgb;
+	vec3 reflectColour = texture(reflectionTexture, reflectionTexCoords).rgb;
+
+	//apply some blueness
+	refractColour = applyMurkiness(refractColour, waterDepth);
+	reflectColour = mix(reflectColour, waterColour, minBlueness);
+
+	vec3 finalColour = mix(reflectColour, refractColour, calculateFresnel());
+	finalColour = finalColour * pass_diffuse + pass_specular;
+
+	frag_Color = vec4(finalColour, 1.0);
+
+	frag_Color = mix(vec4(skyColor, 1.0), frag_Color, in_visibility);
+
+	//apply soft edges
+//	out_colour.a = clamp(waterDepth / edgeSoftness, 0.0, 1.0);
+
+}
diff --git a/resources/res/shaders/water/vertex.glsl b/resources/res/shaders/water/vertex.glsl
new file mode 100644
index 0000000..9a8e44a
--- /dev/null
+++ b/resources/res/shaders/water/vertex.glsl
@@ -0,0 +1,112 @@
+#version 430 core
+
+const float PI = 3.1415926535897932384626433832795;
+
+const float waveLength = 20.0;
+const float waveAmplitude = 0.8;
+const float specularReflectivity = 0.8;
+const float shineDamper = 20.0;
+
+layout(location = 0) in vec2 in_position;
+layout(location = 1) in vec4 in_indicators;
+
+layout(location = 0) out vec4 pass_clipSpaceGrid;
+layout(location = 1) out vec4 pass_clipSpaceReal;
+layout(location = 2) flat out vec3 pass_normal;
+layout(location = 3) out vec3 pass_toCameraVector;
+layout(location = 4) out vec3 pass_specular;
+layout(location = 5) out vec3 pass_diffuse;
+layout(location = 6) out float out_visibility;
+
+uniform vec3 cameraPos;
+uniform float waveTime;
+uniform float one;
+
+uniform mat4 projectionMatrix;
+uniform mat4 viewMatrix;
+
+#Struct_Lib.Light
+
+uniform Light light;
+
+#Struct_Lib.FogValues
+
+uniform FogValues fogValues;
+
+vec3 calcSpecularLighting(vec3 toCamVector, vec3 toLightVector, vec3 normal) {
+	vec3 reflectedLightDirection = reflect(-toLightVector, normal);
+	float specularFactor = dot(reflectedLightDirection, toCamVector);
+	specularFactor = max(specularFactor, 0.0);
+	specularFactor = pow(specularFactor, shineDamper);
+	return specularFactor * specularReflectivity * light.color;
+}
+
+vec3 calculateDiffuseLighting(vec3 toLightVector, vec3 normal) {
+	float brightness = max(dot(toLightVector, normal), 0.0);
+	return (light.color * light.bias.x)
+			+ (brightness * light.color * light.bias.y);
+}
+
+vec3 calcNormal(vec3 vertex0, vec3 vertex1, vec3 vertex2) {
+	vec3 tangent = vertex1 - vertex0;
+	vec3 bitangent = vertex2 - vertex0;
+	return normalize(cross(tangent, bitangent));
+}
+
+float generateOffset(float x, float z, float val1, float val2) {
+	float radiansX = ((mod(x + z * x * val1, waveLength) / waveLength)
+			+ waveTime * mod(x * 0.8 + z, 1.5)) * 2.0 * PI;
+	float radiansZ = ((mod(val2 * (z * x + x * z), waveLength) / waveLength)
+			+ waveTime * 2.0 * mod(x, 2.0)) * 2.0 * PI;
+	return waveAmplitude * 0.5 * (sin(radiansZ) + cos(radiansX));
+}
+
+//vec3 applyDistortion(vec3 vertex) {
+//	float xDistortion = generateOffset(vertex.x, vertex.z, 0.2, 0.1);
+//	float yDistortion = generateOffset(vertex.x, vertex.z, 0.1, 0.3);
+//	float zDistortion = generateOffset(vertex.x, vertex.z, 0.15, 0.2);
+//	return vertex + vec3(xDistortion, yDistortion, zDistortion);
+//}
+
+vec3 applyDistortion(vec3 vertex) {
+	float xDistortion = generateOffset(vertex.x, vertex.z, 0.2, 0.1);
+	float yDistortion = generateOffset(vertex.x, vertex.z, 0.1, 0.3);
+	float zDistortion = generateOffset(vertex.x, vertex.z, 0.15, 0.2);
+	xDistortion = 3.0 * xDistortion;
+	zDistortion = 3.0 * zDistortion;
+	return vertex + vec3(xDistortion, yDistortion, zDistortion);
+}
+
+void main(void) {
+	vec3 currentVertex = vec3(in_position.x, 0.0, in_position.y);
+	vec3 vertex1 = currentVertex
+			+ vec3(in_indicators.x * one, 0.0, in_indicators.y * one);
+	vec3 vertex2 = currentVertex
+			+ vec3(in_indicators.z * one, 0.0, in_indicators.w * one);
+
+	pass_clipSpaceGrid = projectionMatrix * viewMatrix
+			* vec4(currentVertex, 1.0);
+
+	currentVertex = applyDistortion(currentVertex);
+	vertex1 = applyDistortion(vertex1);
+	vertex2 = applyDistortion(vertex2);
+
+	pass_normal = calcNormal(currentVertex, vertex1, vertex2);
+
+	vec4 posRelativeToCamera = viewMatrix * vec4(currentVertex, 1.0);
+
+	pass_clipSpaceReal = projectionMatrix * posRelativeToCamera;
+	gl_Position = pass_clipSpaceReal;
+
+	pass_toCameraVector = normalize(cameraPos - currentVertex);
+
+	vec3 toLightVector = -normalize(light.direction);
+	pass_specular = calcSpecularLighting(pass_toCameraVector, toLightVector,
+			pass_normal);
+	pass_diffuse = calculateDiffuseLighting(toLightVector, pass_normal);
+
+	float distance = length(posRelativeToCamera.xyz);
+	out_visibility = exp(
+			-pow((distance * fogValues.density), fogValues.gradient));
+	out_visibility = clamp(out_visibility, 0.0, 1.0);
+}
diff --git a/resources/res/textures/buttonTextures/mainMenu_Start.png b/resources/res/textures/buttonTextures/mainMenu_Start.png
new file mode 100644
index 0000000..9027d99
--- /dev/null
+++ b/resources/res/textures/buttonTextures/mainMenu_Start.png
Binary files differ
diff --git a/resources/res/textures/buttonTextures/mainMenu_Start.tex b/resources/res/textures/buttonTextures/mainMenu_Start.tex
new file mode 100644
index 0000000..16c90ea
--- /dev/null
+++ b/resources/res/textures/buttonTextures/mainMenu_Start.tex
@@ -0,0 +1,129 @@
+128 128












+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
















+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715

+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715



+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6249581 -5655430 -5061789 -4467892 -4072132 -3676115 -3412190 -3346145 -3346399 -3675861 -4203966 -4929953 -5721985 -6183536 -6447461 -6447715 -6447715 -6447715 -6447715 -6447715 -6447717 -6315626 -6315627 -6315627 -6381926 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6382181 -6185323 -6185323 -6185323 -6382181 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6579298 -6579298 -6579298 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -6709351 -6970985 -7167084 -6970985 -6709351 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447462 -5985910 -5062043 -4138176 -3544026 -3148263 -3016173 -2950129 -2884339 -2884083 -2884083 -2950129 -3148009 -3610325 -4270011 -5061788 -5721730 -6249581 -6447717 -6447715 -6447716 -6315626 -5919865 -5787520 -5589894 -5853566 -6051446 -6315626 -6447716 -6447715 -6447715 -6447715 -6316391 -5660278 -5200769 -4609934 -4938119 -5266302 -6250857 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6579298 -6843485 -7172697 -7436628 -7502675 -7502675 -7502675 -7502675 -7502675 -7502675 -7502675 -7502675 -7502675 -7568467 -7568467 -7436628 -7172952 -6909277 -6645345 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6644069 -7428463 -8539517 -9389191 -9585545 -9062531 -8147576 -7166828 -6578533 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447462 -5985401 -4863908 -3807696 -3148010 -2949874 -2884083 -2818292 -2884084 -2818292 -2818292 -2818292 -2818292 -2884083 -2950383 -3214309 -3741905 -4467892 -5259668 -5985656 -6381416 -6249582 -5589640 -4995999 -4533683 -4336056 -4665773 -5325715 -5919865 -6381416 -6447716 -6447715 -6382181 -5594487 -4150680 -2706617 -1919178 -2181573 -3166126 -4675724 -6185323 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -6252649 -5992047 -5731188 -5861489 -6122348 -6382693 -6447715 -6447715 -6447715 -6447715
+-7370582 -8227656 -9151033 -9744176 -10073899 -10139689 -10139689 -10139689 -10139689 -10139689 -10139689 -10139689 -10139690 -10139689 -10007852 -9809967 -9282360 -8557379 -7634257 -6909277 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6644069 -7885941 -10108304 -12134569 -13376440 -13441721 -12853681 -11023259 -8866433 -7166828 -6513252 -6447715 -6447715 -6447715 -6447715 -6447716 -6117746 -5127579 -3873996 -3081964 -2884083 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2884084 -2884083 -3016174 -3346145 -3874250 -4665772 -5325715 -5128088 -4533682 -3742160 -3346399 -3214054 -3609815 -4533937 -5655940 -6249582 -6447461 -6447715 -6119532 -4872583 -2312898 -671974 -278256 -343790 -934624 -2641082 -4938119 -6382182 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -6057069 -5405821 -4623758 -3971996 -3972253 -4102297 -4884360 -5600887 -6317671 -6447715 -6447715 -6447715
+-8821055 -10469412 -11655954 -12117515 -12249608 -12315399 -12315399 -12315399 -12315399 -12315399 -12315144 -12315144 -12315144 -12249608 -12183817 -12117515 -11656209 -10996764 -9876014 -8689217 -7568466 -6843230 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -7559025 -10304402 -13311159 -15076045 -15598803 -15598803 -15271887 -13833918 -10892698 -8016503 -6774631 -6447715 -6447715 -6447715 -6447715 -6381416 -5655939 -4270266 -3214054 -2884083 -2818292 -2818292 -2818292 -2818292 -2884084 -2884339 -2884083 -2884084 -2818292 -2818292 -2818292 -2818292 -2884084 -2884338 -3081964 -3412189 -3807951 -3742160 -3411935 -3081964 -2950129 -2884339 -3148010 -4137921 -5391759 -6183535 -6447461 -6447715 -5922673 -3888029 -1131483 -146931 -15604 -81396 -146930 -1000158 -3559845 -5857138 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -5405307 -4167576 -2864309 -1887180 -1365719 -1235418 -1561299 -2603707 -4232855 -5666166 -6382693 -6447715 -6447715
+-9876014 -11853839 -12513284 -12644866 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12644866 -12644866 -12579075 -12381190 -11854094 -10930973 -9809967 -8425541 -7370582 -6645345 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6774631 -8931714 -12657327 -15141325 -15860183 -15925719 -15925463 -15860183 -15141325 -12265386 -8670334 -6970985 -6447715 -6447715 -6447715 -6447716 -6183535 -5061788 -3675860 -2950383 -2884084 -2818292 -2818292 -2884084 -2884339 -3016174 -3148264 -3214055 -3082219 -3016174 -2949874 -2884083 -2884084 -2818292 -2884084 -2884084 -2949874 -3016174 -3016174 -2949874 -2884084 -2884084 -2950129 -3280099 -4270266 -5589639 -6249582 -6447461 -6447715 -5791347 -3362985 -671975 -81396 -15604 -15604 -15604 -278255 -2312898 -5332094 -6382182 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6252649 -5014404 -3124911 -1626578 -714214 -388590 -258289 -193010 -323568 -1039838 -3059889 -5209984 -6187627 -6447715 -6447715
+-10469412 -12315399 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645122 -12579075 -12315655 -11722256 -10798879 -9414453 -8029771 -6909021 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7297646 -10500501 -14291651 -15794901 -15925463 -15925463 -15925463 -15925719 -15206606 -12265386 -8670334 -6970985 -6447715 -6447715 -6447715 -6447462 -5985656 -4665773 -3280354 -2884339 -2818292 -2884084 -2884083 -3015919 -3346145 -3940041 -4468147 -4533937 -4269757 -3808206 -3412189 -3148010 -2949874 -2884084 -2818292 -2818292 -2884084 -2884084 -2884084 -2884084 -2818292 -2884083 -3082219 -3742160 -4929699 -5787774 -6381416 -6447716 -6447715 -5857138 -2969267 -475115 -81396 -15604 -15604 -15604 -146930 -1590993 -4741259 -6316391 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -5079683 -2994610 -1235418 -323311 -127731 -62452 -62452 -62452 -62452 -518891 -2408384 -4884360 -6187627 -6447715 -6447715
+-9876014 -11853839 -12513284 -12644866 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645122 -12645121 -12645122 -12644866 -12579075 -12249352 -11458325 -10073899 -8689217 -7107161 -6579298 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -8278137 -12069032 -15206862 -15860183 -15925463 -15925463 -15925719 -15598803 -14160834 -11023259 -8016503 -6774631 -6447715 -6447715 -6447715 -6381671 -5787520 -4270012 -3082218 -2884084 -2818292 -2884084 -2950129 -3478234 -4533683 -5523594 -6051700 -6051955 -5787775 -5391759 -4731817 -4006085 -3346399 -2950383 -2884083 -2818292 -2818292 -2818292 -2818292 -2818292 -2884084 -2950129 -3477981 -4533937 -5589640 -6315627 -6447716 -6447715 -6447715 -5791347 -3034801 -409580 -15604 -15604 -15604 -15604 -81395 -1131483 -4544399 -6250857 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6382693 -5470586 -3516071 -1430998 -323311 -127988 -62452 -62452 -62452 -127988 -193010 -909794 -2929588 -5210241 -6187627 -6447715 -6447715
+-8821055 -10469412 -11655954 -12117515 -12249608 -12315399 -12315399 -12315399 -12315399 -12315399 -12315399 -12315399 -12315399 -12315655 -12381446 -12447237 -12579075 -12644866 -12645122 -12645121 -12645122 -12644866 -12447237 -11919885 -10732833 -9018939 -7172697 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6774631 -9389447 -13572538 -15664340 -15925719 -15925463 -15925719 -15729621 -14683848 -12004007 -8996994 -7166828 -6513252 -6447715 -6447715 -6447715 -6381417 -5655939 -4138176 -3016173 -2884084 -2818292 -2884083 -3082219 -4071876 -5589894 -6447461 -6447715 -6447715 -6447716 -6381417 -6051701 -5325968 -4467892 -3544279 -3016174 -2884084 -2818292 -2818292 -2818292 -2818292 -2818292 -3016173 -4006086 -5259924 -6249581 -6447716 -6447715 -6447715 -6447715 -5922672 -3231661 -475115 -81396 -15604 -15604 -15604 -81396 -934624 -4347540 -6250856 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -5861746 -4102554 -1952459 -518891 -127988 -62452 -62452 -62452 -127988 -258289 -779493 -2082503 -3971996 -5600887 -6382693 -6447715 -6447715
+-7370582 -8227656 -9151033 -9744176 -10073899 -10139689 -10139689 -10139689 -10139689 -10139689 -10139689 -10205736 -10271528 -10403621 -10733088 -11194649 -11787792 -12249608 -12513284 -12644866 -12645122 -12645121 -12645122 -12579331 -12183562 -10667297 -8425285 -6777183 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10565782 -14487749 -15860438 -15925463 -15925463 -15860183 -15402705 -12853426 -9389447 -7232365 -6578533 -6447715 -6447715 -6447715 -6447715 -6381671 -5655940 -4137921 -3016173 -2884084 -2818292 -2884083 -3082218 -4270266 -5853565 -6447716 -6447715 -6447715 -6447715 -6447715 -6447716 -6315881 -5721730 -4599727 -3544279 -2950383 -2818292 -2818292 -2818292 -2818292 -2884084 -3148264 -4468147 -5985655 -6447716 -6447715 -6447715 -6447715 -6447715 -6053997 -3559845 -606439 -81396 -15604 -15604 -15604 -81396 -868834 -4019355 -6250856 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447972 -6122348 -4558479 -2473663 -844772 -193010 -127988 -62452 -127988 -193267 -453869 -1300954 -2538685 -4232855 -5470843 -6252392 -6447715 -6447715 -6447715
+-6579298 -6843485 -7172697 -7436628 -7502675 -7502675 -7502675 -7502675 -7502675 -7502675 -7502675 -7568467 -7568722 -7634513 -7964236 -8623170 -9678129 -10733344 -11722000 -12315655 -12644866 -12645121 -12645121 -12645121 -12579331 -11788047 -9282615 -7304535 -6513507 -6447715 -6447715 -6447715 -6447715 -7624562 -11415456 -15075789 -15925719 -15925463 -15925463 -15860183 -14945227 -11284895 -7624562 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447462 -5787775 -4203966 -3082219 -2884084 -2818292 -2884084 -3081964 -4203966 -5787775 -6447462 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447462 -5853819 -4467893 -3214309 -2884084 -2818292 -2818292 -2818292 -2884084 -3214054 -4797863 -6249581 -6447715 -6447715 -6447715 -6447715 -6447715 -6382182 -4084889 -934625 -81396 -15604 -15604 -15604 -81396 -606440 -3494311 -6185323 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6382950 -5340285 -3124911 -1170396 -258289 -127988 -62452 -127731 -323568 -844515 -1952202 -3451049 -5014661 -5861489 -6382950 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6579298 -6579554 -6842974 -7436373 -8425541 -9744176 -11260440 -12315399 -12645122 -12645121 -12645121 -12645122 -12183562 -9942061 -7502419 -6579298 -6447715 -6447715 -6447715 -6513252 -8082039 -12134569 -15271887 -15925719 -15925463 -15925463 -15794902 -14160834 -10043023 -7101547 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -5853819 -4401847 -3148009 -2884083 -2818292 -2884084 -3016173 -4071876 -5655430 -6381671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6315626 -5128088 -3411934 -2884339 -2818292 -2818292 -2818292 -2884084 -3214054 -4797863 -6249582 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -4741259 -1328343 -81395 -15604 -15604 -15604 -81396 -343790 -2641081 -5725812 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447972 -5992047 -4102297 -1822158 -453612 -127731 -62452 -127731 -388590 -1170139 -2734265 -4428435 -5861746 -6382950 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6777183 -7700304 -9941805 -11853839 -12579075 -12645121 -12645121 -12645122 -12183817 -10007596 -7568722 -6579298 -6447715 -6447715 -6447715 -6644069 -8605053 -12788400 -15533522 -15925719 -15925463 -15925719 -15598803 -13245878 -8996994 -6644070 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5985655 -4599728 -3214054 -2884083 -2818292 -2884084 -2950383 -3873741 -5457804 -6315881 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6315881 -5391759 -3544279 -2884339 -2818292 -2818292 -2818292 -2884084 -3082218 -4600237 -6183536 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5200768 -1919178 -146930 -15604 -15604 -15604 -15604 -146930 -1919178 -5200769 -6382182 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6382950 -5275006 -2799544 -844515 -193267 -127988 -127988 -258289 -974816 -2734008 -4753802 -6187370 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6975067 -9348407 -11787792 -12579075 -12645122 -12645121 -12579331 -11985932 -9612338 -7304535 -6579298 -6447715 -6447715 -6447715 -6840168 -9323910 -13441721 -15598803 -15925719 -15925463 -15860183 -15206862 -11938470 -8016503 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6051955 -4797608 -3345890 -2884339 -2818292 -2884084 -2950129 -3610070 -5193879 -6249836 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6381671 -5523594 -3676370 -2884339 -2818292 -2818292 -2818292 -2884084 -3016173 -4402102 -6051700 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5594487 -2444223 -278256 -15604 -15604 -15604 -15604 -81395 -1328343 -4675724 -6316391 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6057326 -3972253 -1561556 -323311 -127988 -62452 -127731 -518891 -2017224 -4297877 -6122348 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513763 -7700049 -9941805 -11985932 -12579331 -12645121 -12645121 -12513284 -11458069 -8952892 -6975068 -6513507 -6447715 -6447715 -6447715 -7167084 -10173585 -14160834 -15794901 -15925719 -15925463 -15794902 -14618311 -10761880 -7428463 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6183535 -4995997 -3478235 -2884338 -2818292 -2818292 -2884339 -3280099 -4534192 -6051701 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447462 -5721475 -3808205 -2884338 -2818292 -2818292 -2818292 -2818292 -2950383 -4270012 -5919865 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5922671 -3166126 -475115 -81396 -15604 -15604 -15604 -81396 -1065694 -4282005 -6250857 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -5210241 -2668986 -649192 -127731 -62452 -127988 -193010 -1040095 -3190447 -5535865 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6909021 -8689217 -11062555 -12381446 -12645122 -12645121 -12644866 -12315144 -10601251 -8095818 -6645600 -6447715 -6447715 -6447715 -6447715 -7559025 -10957978 -14749129 -15860438 -15925463 -15925463 -15729620 -13964735 -9977486 -6970730 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6315626 -5325714 -3742160 -2950384 -2818292 -2818292 -2884084 -3016174 -3742161 -4995998 -6183790 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -5721730 -3874251 -2949874 -2818292 -2818292 -2818292 -2818292 -2950384 -4137921 -5919611 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6250856 -3888031 -737765 -81396 -15604 -15604 -15604 -81396 -868834 -4084890 -6185322 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6187627 -4428435 -1626578 -258289 -62452 -62452 -62452 -323311 -1691600 -4428435 -6187370 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6579554 -7568467 -9876014 -11853839 -12579075 -12645122 -12645122 -12579075 -11722000 -9546291 -7436373 -6513507 -6447715 -6447715 -6447715 -6513252 -8016503 -11938470 -15206862 -15925719 -15925463 -15925719 -15533522 -13180342 -8996994 -6709351 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447462 -5655684 -4137922 -3081964 -2884084 -2818292 -2818292 -2884083 -3148010 -3807950 -4929953 -5853565 -6249582 -6381671 -6447462 -6447716 -6447715 -6447461 -5457549 -3741906 -2949874 -2818292 -2818292 -2818292 -2818292 -2950384 -4138176 -5919611 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6382182 -4413074 -1065949 -81395 -15604 -15604 -15604 -81396 -803300 -3822495 -6185322 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5992047 -3646372 -1040095 -127731 -62452 -62452 -127988 -518891 -2538685 -5209984 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6843485 -8689217 -10996764 -12381190 -12645122 -12645121 -12644866 -12315399 -10799135 -8425796 -6777183 -6447715 -6447715 -6447715 -6447715 -6644070 -8866433 -12853426 -15467986 -15925719 -15925463 -15860183 -15337424 -12265386 -8343419 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -5985655 -4599982 -3214309 -2884083 -2818292 -2818292 -2818292 -2884339 -3081964 -3676115 -4401847 -5061788 -5458059 -5787775 -5919865 -5985910 -5721985 -4666028 -3411935 -2884339 -2818292 -2818292 -2818292 -2818292 -3015919 -4269757 -5985401 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -4741258 -1393878 -81395 -15604 -15604 -15604 -81396 -606440 -3559846 -6053998 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5731445 -3320491 -779493 -127731 -62452 -62452 -127731 -909794 -3451049 -5796467 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6579554 -7897933 -10073898 -11854094 -12579075 -12645122 -12645122 -12579075 -11787792 -9744176 -7502420 -6513507 -6447715 -6447715 -6447715 -6513252 -7232365 -10173585 -13899454 -15729620 -15925719 -15925463 -15860183 -14879946 -11284894 -7755123 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6249581 -5259670 -3676370 -2950383 -2818292 -2818292 -2818292 -2818292 -2884083 -3015919 -3214309 -3609815 -3940041 -4204221 -4467893 -4533682 -4270012 -3676115 -3081965 -2884084 -2818292 -2818292 -2818292 -2884084 -3016173 -4336056 -5985655 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5003909 -1656528 -146931 -15604 -15604 -15604 -15604 -475115 -3100592 -5857138 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5666166 -3059889 -649449 -127988 -62452 -127988 -193010 -1365719 -4232598 -6187370 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6645345 -7700304 -9612338 -11458325 -12447237 -12645122 -12645121 -12645122 -12381190 -10996764 -8557378 -6842974 -6447715 -6447715 -6447715 -6447715 -6644069 -8147576 -11546273 -14814410 -15794902 -15925719 -15925463 -15729620 -14160834 -10173585 -7166828 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447717 -5853821 -4468147 -3346399 -2949874 -2884084 -2818292 -2818292 -2884084 -2884084 -2884339 -2950129 -3016174 -3081964 -3148265 -3214055 -3148265 -3016173 -2884339 -2884084 -2818292 -2818292 -2818292 -2884084 -3082219 -4533683 -5985910 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5266303 -1853388 -146930 -15604 -15604 -15604 -15604 -343790 -2641081 -5528953 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5535865 -2929588 -584170 -127988 -62452 -127988 -323311 -2017224 -4949382 -6382950 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6777439 -7898189 -9480244 -11260696 -12315655 -12644866 -12645121 -12645122 -12579075 -11853839 -9876014 -7568467 -6579554 -6447715 -6447715 -6447715 -6447715 -6840168 -8997250 -12853426 -15402705 -15925719 -15925463 -15925719 -15468241 -13049780 -8996994 -6774631 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6381671 -5589640 -4270266 -3345890 -2950129 -2884083 -2818292 -2884084 -2818292 -2818292 -2818292 -2884084 -2884084 -2884083 -2884083 -2884083 -2884084 -2884084 -2818292 -2818292 -2818292 -2818292 -2884083 -3148009 -4533937 -5985910 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5332093 -2116037 -212465 -15604 -15604 -15604 -15604 -278256 -2116038 -5200769 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405307 -2799287 -518891 -127988 -62452 -127988 -453612 -2473406 -5275263 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6579298 -7041114 -8359494 -9743920 -11194649 -12249352 -12579331 -12645121 -12645121 -12644866 -12315144 -10864926 -8557379 -6909021 -6513507 -6447715 -6447715 -6447715 -6447715 -7101547 -9650571 -13637819 -15664340 -15925719 -15925463 -15860438 -14945227 -11807909 -8016503 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6381671 -5523849 -4401847 -3609815 -3148009 -2950383 -2884339 -2884084 -2884084 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2884084 -2884084 -2884084 -2818292 -2884083 -3214054 -4599728 -5985910 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5463418 -2378432 -212721 -15604 -15604 -15604 -15604 -146930 -1525203 -4609934 -6316391 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405564 -2668729 -453612 -127988 -62452 -127988 -453612 -2668986 -5405821 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6645345 -7436629 -8887101 -10271528 -11589907 -12315399 -12579075 -12645122 -12645121 -12644866 -12447237 -11458069 -9414453 -7436629 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10043023 -14160833 -15729621 -15925463 -15925463 -15794902 -14618311 -10892697 -7362926 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6381416 -5787775 -4995999 -4269757 -3741906 -3345890 -3081964 -2950129 -2884339 -2884083 -2884084 -2884084 -2884084 -2884084 -2884084 -2884083 -2884338 -2884083 -2884084 -2818292 -2884339 -3280100 -4731818 -6051446 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5528953 -2641082 -343790 -81396 -15604 -15604 -15604 -81395 -1000159 -3756705 -6053998 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405564 -2668729 -453612 -127988 -62452 -127988 -453612 -2668729 -5405564 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6711392 -7832142 -9348662 -10864926 -11985677 -12447237 -12644866 -12645122 -12644866 -12579075 -12315655 -11524372 -9810222 -7963980 -6645345 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10238866 -14291651 -15794902 -15925463 -15925463 -15794902 -14422213 -10435220 -7232365 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447461 -6183537 -5787775 -5128088 -4599982 -4005831 -3609815 -3345890 -3148264 -3081964 -3015919 -2950384 -3015919 -3081965 -3148009 -3016174 -2884339 -2884084 -2818292 -2884339 -3412190 -4929698 -6117745 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5594487 -2772407 -409581 -81396 -15604 -15604 -15604 -81396 -606441 -2706617 -5332094 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405564 -2668729 -453612 -127988 -62452 -127988 -453612 -2668729 -5405564 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6711392 -7963980 -9612338 -11260696 -12249352 -12579075 -12645122 -12645121 -12644866 -12447237 -11985932 -11062555 -9612338 -8030027 -6711392 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10304402 -14291395 -15794902 -15925463 -15925463 -15794902 -14291395 -10304402 -7232365 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6447462 -6249836 -5853819 -5523595 -5062043 -4731817 -4467893 -4138176 -3940041 -3808205 -3874251 -3940041 -3610325 -3082219 -2884083 -2818292 -2818292 -2950129 -3675860 -5193878 -6249836 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -2969267 -475114 -81396 -15604 -15604 -15604 -15604 -278256 -1525204 -4084890 -6119532 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405564 -2668729 -518891 -127988 -62452 -127988 -453612 -2668729 -5405564 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6645345 -8029771 -9744176 -11392278 -12381190 -12644866 -12645122 -12645121 -12644866 -12447237 -11722001 -10403366 -8887101 -7700049 -6711392 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10304402 -14291395 -15794902 -15925463 -15925463 -15794902 -14291395 -10304402 -7232365 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6447461 -6447461 -6447461 -6447716 -6447715 -6447715 -6447716 -6381416 -6249582 -6051955 -5853819 -5721475 -5524104 -5457549 -5457550 -4863653 -3742161 -3016174 -2884084 -2818292 -2818292 -3016174 -4005832 -5523849 -6381926 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -3034801 -606441 -81395 -15604 -15604 -15604 -15604 -81395 -606439 -2575292 -5135234 -6447717 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405564 -2734265 -518891 -127988 -62452 -127988 -453612 -2603707 -5405821 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6645600 -7964236 -9744176 -11524116 -12381446 -12644866 -12645121 -12645121 -12644866 -12381446 -11590163 -10073898 -8557379 -7107161 -6579298 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10304402 -14291395 -15794902 -15925463 -15925463 -15794902 -14291395 -10304402 -7232365 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6381416 -6249582 -6183535 -6249582 -6381416 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6447462 -6315881 -6315627 -6051700 -4995744 -3477979 -2949874 -2818292 -2818292 -2884084 -3082218 -4335802 -5853566 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -3034801 -606440 -81395 -15604 -15604 -15604 -15604 -15604 -212721 -1459669 -4216215 -6119531 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5405307 -2734008 -518891 -127988 -62452 -127988 -388590 -2277826 -5209984 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6645345 -7897934 -9876014 -11590162 -12381446 -12644866 -12645121 -12645122 -12579075 -12315144 -11392533 -9810222 -8359494 -6909021 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10304402 -14291395 -15794901 -15925463 -15925463 -15794902 -14291395 -10304402 -7232365 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6315626 -5919611 -5458059 -5259670 -5392014 -5787775 -6315627 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6051701 -4599983 -3214054 -2884084 -2818292 -2818292 -2884083 -3214054 -4665773 -6051955 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -3034801 -606439 -81395 -15604 -81396 -15604 -15604 -15604 -81395 -737765 -2969267 -5660278 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5536122 -2799544 -518891 -127988 -62452 -127988 -323568 -1756622 -4688780 -6382950 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6513763 -7436629 -9414709 -11392278 -12447237 -12645122 -12645121 -12645122 -12579075 -12183561 -11194393 -9612082 -7964236 -6842974 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10238866 -14291651 -15794901 -15925463 -15925463 -15794902 -14356932 -10435220 -7232365 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6381926 -5919610 -4929953 -4203966 -3807696 -4071877 -4665773 -5655685 -6381417 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -5721475 -4203712 -3082219 -2884084 -2818292 -2818292 -2884338 -3544026 -5061788 -6249581 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -3034801 -606439 -81395 -15604 -81396 -15604 -15604 -15604 -81396 -343790 -1853388 -4150680 -6053998 -6250856 -6316391 -6316391 -6447717 -6447715 -6447715 -6447715 -6447715 -5535865 -2929588 -584170 -127988 -62452 -62452 -193010 -1300954 -4102554 -6057069 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6513507 -7040859 -8821055 -10930973 -12315144 -12644866 -12645121 -12645121 -12644866 -12315399 -11194649 -9282615 -7634257 -6645345 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7232365 -10108304 -14160834 -15794901 -15925463 -15925463 -15794902 -14487749 -10631318 -7232109 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6249581 -5391759 -4006086 -3214055 -2950384 -3081964 -3544025 -4599727 -5853821 -6447717 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6315626 -5259670 -3742161 -2950383 -2884084 -2818292 -2884084 -3016173 -4005832 -5523594 -6381926 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -3034801 -606439 -81395 -15604 -81396 -81396 -81396 -15604 -15604 -146930 -671974 -2116038 -3691171 -4807050 -5266302 -5725812 -6053997 -6382181 -6447715 -6447715 -6447715 -5731445 -3190190 -714471 -127988 -62452 -62452 -127731 -844515 -3385513 -5861746 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6645345 -7964236 -10271528 -11919885 -12579075 -12645121 -12645121 -12645122 -12381446 -11392533 -9546291 -7568722 -6579554 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7101547 -9846925 -13964735 -15729621 -15925719 -15925463 -15860438 -14683848 -10827417 -7428463 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6117491 -5061789 -3544025 -2949874 -2818292 -2884084 -3016174 -3742160 -4995744 -6117745 -6447716 -6447715 -6447715 -6447715 -6447715 -6447716 -5919866 -4600237 -3346144 -2949874 -2884084 -2818292 -2884338 -3346145 -4665772 -6051446 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -3034801 -606439 -81395 -15604 -81396 -81395 -81395 -15604 -15604 -81396 -146930 -606441 -1328343 -1984713 -2837942 -4019355 -5069443 -6053998 -6447716 -6447715 -6447715 -5992047 -3776673 -1039838 -193267 -62452 -62452 -127988 -649449 -2994610 -5535865 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6513507 -7238744 -9282615 -11458069 -12513284 -12645122 -12645121 -12644866 -12447237 -11590162 -9876014 -7832142 -6645345 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6970730 -9520008 -13637819 -15664340 -15925719 -15925463 -15860438 -14879946 -11154077 -7493744 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6117491 -4929699 -3477980 -2884339 -2818292 -2818292 -2884339 -3214055 -4203712 -5259669 -6183537 -6447717 -6447715 -6447715 -6447715 -6381417 -5457549 -4005832 -3082219 -2884084 -2818292 -2884084 -3016173 -3873996 -5325969 -6315881 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5660278 -2969267 -606440 -81395 -15604 -81396 -146930 -146930 -81396 -15604 -15604 -81396 -81395 -212465 -343789 -737765 -1853388 -3756705 -5528953 -6250856 -6447715 -6447715 -6252392 -4558479 -1626578 -323568 -127988 -62452 -127988 -453612 -2538685 -5275006 -6382950 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6711392 -8293703 -10601251 -12183561 -12644866 -12645121 -12645122 -12447237 -11655954 -9876269 -7964236 -6645600 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6905449 -9193093 -13311159 -15598803 -15925719 -15925463 -15860438 -15010508 -11284894 -7689842 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6249582 -5193879 -3741906 -2950383 -2884084 -2818292 -2884084 -2950129 -3411935 -4138176 -4929952 -5655430 -5985655 -6117746 -6051955 -5655430 -4599728 -3477981 -2950129 -2884084 -2884084 -2884338 -3280354 -4533937 -5853821 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5594488 -2903476 -606441 -81395 -15604 -81396 -278256 -540649 -278255 -81395 -81396 -15604 -15604 -81396 -81396 -146931 -737765 -2772152 -5069444 -6185323 -6447715 -6447715 -6447972 -5209984 -2473406 -518891 -127731 -62452 -127988 -388590 -2082503 -4819338 -6317671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6513507 -7436373 -9480500 -11590162 -12513284 -12645122 -12645121 -12579331 -12051468 -10337319 -8227656 -6645345 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6840168 -8800896 -13049524 -15598803 -15925719 -15925463 -15860183 -15075789 -11677091 -7755123 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447461 -5655940 -4401848 -3280354 -2950129 -2884084 -2818292 -2884083 -2950384 -3214054 -3676116 -4137922 -4533937 -4797608 -4666028 -4203966 -3544279 -3081964 -2884083 -2818292 -2884084 -3015919 -3807696 -5128088 -6249836 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5528954 -2772407 -475114 -81396 -15604 -81396 -343790 -1131483 -1131485 -409581 -146931 -81396 -15604 -15604 -15604 -81395 -606441 -2575547 -5003909 -6185323 -6447715 -6447715 -6447715 -5666166 -3255212 -844772 -127731 -62452 -127988 -258289 -1561556 -4297620 -6122091 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6711392 -8227656 -10667042 -12249352 -12645122 -12645121 -12645122 -12447237 -11194393 -8887101 -6975068 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6709351 -8604798 -12722864 -15533522 -15925719 -15925463 -15860183 -15272143 -12004007 -8016503 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6249836 -5325714 -4203966 -3346145 -2950383 -2884083 -2818292 -2884084 -2884339 -2950384 -3081964 -3214054 -3280100 -3214309 -3148009 -2950384 -2884083 -2884084 -2818292 -2884339 -3279845 -4335801 -5721984 -6447462 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5397627 -2641081 -409580 -81396 -15604 -81396 -409581 -1984713 -2772152 -1853388 -671974 -212721 -81395 -81396 -81395 -278255 -1262810 -3297451 -5332094 -6250856 -6447715 -6447715 -6447715 -5926511 -3906974 -1170139 -193010 -62452 -127988 -193010 -1105117 -3776673 -5927025 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6513507 -7106906 -9151033 -11589907 -12513284 -12645122 -12645121 -12579331 -11919885 -10008107 -7766351 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6644069 -8278137 -12330667 -15337424 -15925719 -15925463 -15925719 -15402705 -12461485 -8343418 -6644069 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6249582 -5259669 -4336056 -3477980 -3016174 -2884083 -2884084 -2884084 -2884084 -2884084 -2884083 -2884339 -2884083 -2884083 -2818292 -2818292 -2818292 -2884084 -3015919 -3676115 -5061788 -6117745 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5397629 -2575292 -409580 -81396 -15604 -81396 -409580 -2444222 -4609934 -4084889 -2444222 -1262809 -671975 -475114 -671974 -1328344 -2772407 -4544399 -5922673 -6447716 -6447715 -6447715 -6447715 -6187370 -4428178 -1691857 -323568 -62452 -62452 -127731 -779493 -3255212 -5666166 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6579554 -7634257 -10073898 -12117515 -12644866 -12645121 -12645121 -12447237 -11260440 -8887101 -6909277 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -6774631 -7297646 -7624562 -7755123 -7559025 -7428463 -7232365 -8474236 -11938470 -15206606 -15860183 -15925463 -15925719 -15533522 -12918962 -8866433 -6709351 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6249581 -5391759 -4533683 -3544280 -3016173 -2884083 -2884084 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2884084 -2950384 -3477981 -4533937 -5721730 -6381671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5332094 -2706617 -475115 -81396 -15604 -81396 -475115 -2706617 -5266302 -6053997 -4938374 -3888029 -3034801 -2837942 -2969267 -3756705 -4872584 -5857138 -6382182 -6447715 -6447715 -6447715 -6447715 -6382950 -4949382 -2213061 -388333 -127988 -62452 -127988 -584170 -2799544 -5340285 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6711392 -8425541 -10930973 -12381446 -12645122 -12645121 -12644866 -12183817 -10403366 -7898189 -6579554 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6578533 -7232109 -8605053 -9912206 -11023515 -11284894 -11219358 -10696599 -10108304 -10173585 -12592046 -15206862 -15860183 -15925463 -15925719 -15729620 -13833918 -10043023 -7820660 -6970730 -6644070 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6249835 -5523595 -4600237 -3676116 -3082218 -2884339 -2884084 -2818292 -2818292 -2818292 -2818292 -2818292 -2818292 -2884084 -2950384 -3411935 -4336057 -5391759 -6249836 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5463418 -2969266 -606439 -81395 -15604 -81395 -606439 -2969266 -5463418 -6447715 -6382181 -5922673 -5528953 -5266559 -5332862 -5531257 -5533305 -5731189 -5666166 -5731445 -5666166 -5666166 -5666166 -5600887 -4688780 -2343105 -518891 -127988 -62452 -127988 -388590 -2082760 -4623758 -5861489 -5926768 -5861746 -5992047 -6122091 -6382693 -6447715 -6447715 -6447715 -6447715
+-7172697 -9084730 -11655954 -12579075 -12645122 -12645121 -12579331 -11853839 -9480500 -7238744 -6513507 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -7101547 -8997250 -11546274 -13637819 -14683848 -14945227 -14879946 -14618311 -14160833 -13833918 -14291395 -15467986 -15925719 -15925463 -15925463 -15860438 -15010508 -12984243 -11023259 -9912206 -8866433 -8016503 -7363182 -6905449 -6578788 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6315881 -5721730 -4798118 -3873996 -3214309 -2950383 -2884339 -2884339 -2884339 -2884339 -2884339 -2884338 -3081965 -3477980 -4401848 -5391759 -6249581 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -5791347 -3822495 -1262810 -278256 -81395 -278256 -1262810 -3822495 -5791347 -6447715 -6447715 -6447715 -6382437 -5991535 -5274751 -4427923 -3711394 -3320491 -3255469 -3124911 -3190447 -3125168 -3059889 -3059889 -2668729 -1496020 -388590 -127988 -62452 -127988 -193010 -1039838 -2799544 -3711651 -3711651 -3711394 -3907231 -4558479 -5340285 -6252649 -6447715 -6447715 -6447715
+-7502419 -9876269 -12117515 -12644866 -12645121 -12645121 -12447237 -11194649 -8557379 -6777439 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6709350 -7755123 -10435220 -13834173 -15467986 -15860438 -15860438 -15860438 -15860438 -15794901 -15729620 -15664340 -15860438 -15925463 -15925463 -15925463 -15925463 -15794902 -15468241 -14814410 -14095553 -13180342 -11742372 -10369683 -8800896 -7624561 -6709350 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6381926 -5985910 -5193879 -4401848 -3807696 -3477981 -3346144 -3346145 -3346144 -3412189 -3544279 -4006086 -4731563 -5589639 -6249835 -6447716 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6185322 -4807049 -2641082 -1328344 -803300 -1328344 -2641082 -4807049 -6185322 -6447715 -6447715 -6382950 -5861746 -4493200 -2994867 -1691600 -1105374 -779493 -714214 -648935 -714214 -714214 -648935 -648935 -649449 -388333 -193267 -62452 -62452 -62452 -127988 -323311 -779493 -1040095 -1040095 -974816 -1170139 -1952459 -3320748 -4949639 -6252649 -6447715 -6447715
+-7897934 -10337574 -12315655 -12645122 -12645121 -12645122 -12315399 -10535459 -7964236 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6709350 -8147576 -11350175 -14749129 -15860183 -15925463 -15925463 -15925463 -15925463 -15925719 -15925719 -15925719 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15860183 -15794902 -15533522 -15076045 -14030016 -12134569 -9650826 -7493744 -6578788 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6249836 -5787520 -5325969 -4995743 -4929699 -4863908 -4929953 -4995999 -5127833 -5523850 -5985655 -6381671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -5857138 -4544399 -3625636 -3100336 -3625636 -4544399 -5857138 -6447716 -6447715 -6447972 -5991790 -4558479 -2538685 -975073 -323311 -193267 -127731 -127731 -127731 -127731 -127731 -127731 -127731 -127731 -127988 -62452 -62452 -62452 -62452 -62452 -127988 -127731 -193267 -193267 -127731 -193267 -388590 -1365976 -3451049 -5405821 -6382693 -6447715
+-7963980 -10667041 -12381446 -12645122 -12645121 -12644866 -12183561 -10073898 -7436629 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6709350 -7951222 -10827417 -14226115 -15729620 -15925719 -15925719 -15925719 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925719 -15860183 -15598803 -14356932 -11415456 -8278137 -6905449 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447717 -6315627 -6183790 -6117746 -6183535 -6183535 -6183536 -6249581 -6315881 -6447717 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6382181 -5988462 -5528954 -5332093 -5528954 -5988462 -6382181 -6447715 -6447715 -6317671 -5535865 -3711651 -1300697 -258289 -127988 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -127988 -518891 -2343105 -4949639 -6187627 -6447715
+-7963980 -10667297 -12381446 -12645122 -12645121 -12644866 -12183561 -10007596 -7304790 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6579298 -6579298 -6579298 -6578788 -7362926 -9585545 -12592046 -14618311 -15402705 -15598803 -15729620 -15794901 -15860438 -15860183 -15860183 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925463 -15925719 -15271887 -12395948 -8801152 -6970985 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447716 -6316647 -6316647 -6316647 -6447716 -6447715 -6447715 -6447715 -6317671 -5405821 -3190190 -844515 -127731 -62452 -62452 -62452 -62452 -127988 -127988 -127988 -127988 -127988 -127988 -127988 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -62452 -323311 -2017481 -4623758 -6187627 -6447715
+-7897933 -10535204 -12381446 -12645122 -12645121 -12645122 -12315144 -10403621 -7700304 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6645600 -7172697 -7370582 -7370837 -7040859 -6645600 -6774886 -7820660 -9650571 -11415456 -12722864 -13376440 -13833918 -14226370 -14553031 -14945227 -15337424 -15664340 -15860183 -15925463 -15925463 -15925463 -15925463 -15925719 -15925719 -15925719 -15925719 -15925719 -15794902 -14814409 -11873189 -8539517 -6970985 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -5535865 -3646115 -1365976 -323311 -127731 -127988 -127988 -193267 -193010 -323568 -323311 -323311 -323311 -323311 -323568 -193267 -127988 -62452 -62452 -62452 -62452 -127731 -127731 -193267 -127731 -127731 -193010 -779493 -2668729 -5144962 -6187627 -6447715
+-7634257 -10205736 -12249608 -12645122 -12645121 -12645122 -12447237 -11260696 -9150777 -7436628 -7106906 -7106906 -7041114 -7041115 -7238999 -7700049 -8623170 -9216824 -9546291 -9348407 -8623170 -7568466 -6776928 -6709606 -7297646 -8147320 -8801152 -9389447 -9716107 -10173585 -10696599 -11415456 -12265386 -13899454 -15337424 -15860183 -15925463 -15925463 -15925719 -15794901 -15533522 -15402705 -15337424 -15272143 -14683848 -13049780 -10304402 -7820660 -6644070 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -5926511 -4558479 -2799287 -1365719 -779493 -649192 -714471 -975073 -1300697 -1691857 -1952459 -2017481 -2017481 -2017481 -1691600 -909794 -258289 -62452 -62452 -62452 -127731 -388333 -844515 -909794 -844515 -844515 -1170139 -2278340 -4037275 -5666166 -6382693 -6447715
+-7370582 -9743920 -12051468 -12644866 -12645121 -12645121 -12579331 -12183562 -10997020 -9876014 -9150777 -8953148 -8952892 -9282615 -9612338 -10469157 -11194649 -11722000 -11919885 -11722256 -10799135 -9150522 -7304790 -6579554 -6578533 -6709351 -6840168 -6905449 -6970730 -7167084 -7428463 -7755123 -8474236 -10696599 -13964735 -15729620 -15925719 -15925463 -15925719 -15533522 -14030016 -12657583 -12330667 -12003751 -11284894 -9846924 -8212601 -6905449 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -5731445 -4753802 -3906974 -3124911 -2994867 -3125168 -3646372 -4167576 -4558479 -4754059 -4819338 -4819338 -4819338 -4298134 -2408384 -649449 -127988 -62452 -127988 -193010 -974816 -2603707 -3385513 -3320491 -3451049 -3776416 -4754059 -5600887 -6317671 -6447715 -6447715
+-6975068 -9018940 -11524116 -12513284 -12645121 -12645121 -12645122 -12579075 -12315399 -11919885 -11722000 -11590162 -11656210 -11853839 -12051723 -12381190 -12513284 -12579331 -12644866 -12579331 -12117515 -10205736 -7898189 -6777439 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -6774631 -8735615 -12657327 -15468241 -15925719 -15925463 -15925719 -15533522 -13311159 -10043023 -8343419 -8343419 -7951222 -7428463 -6840168 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447972 -6382950 -6122348 -5731445 -5601144 -5535865 -5731445 -5861489 -6122348 -6187370 -6187370 -6187370 -6187370 -6187370 -5600887 -3581350 -974816 -193267 -62452 -127988 -193010 -1170139 -3711651 -5535865 -5796467 -5731445 -5861746 -6122348 -6382693 -6447715 -6447715 -6447715
+-6645600 -8095818 -10469412 -12183562 -12644866 -12645121 -12645121 -12645122 -12644866 -12579331 -12579075 -12579075 -12579075 -12579331 -12644866 -12645122 -12645121 -12645121 -12645121 -12645121 -12447237 -10799135 -8227656 -6777439 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -7951477 -11742372 -15206862 -15860183 -15925463 -15925719 -15729621 -14160834 -10239121 -7167084 -6709350 -6709350 -6644069 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -6382693 -6382693 -6448229 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6057326 -4037275 -1300697 -258289 -62452 -62452 -193267 -974816 -3646372 -5861746 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6513507 -7172697 -9084731 -11062555 -12183817 -12579075 -12645122 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12644866 -12183561 -10337319 -7963980 -6777183 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -7428463 -10957979 -14749129 -15860183 -15925463 -15925463 -15860183 -15010508 -11546274 -8147320 -6578533 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6187627 -4493200 -1691857 -323568 -127988 -62452 -193267 -844772 -3190447 -5731445 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6579554 -7436628 -9216568 -10733088 -11919630 -12447237 -12644866 -12645122 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645121 -12645122 -12644866 -12381190 -11326487 -9282615 -7370837 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6970730 -10108304 -14160834 -15794901 -15925463 -15925463 -15925719 -15468241 -12918963 -9389447 -7101547 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -4884360 -2213061 -388590 -127988 -62452 -127731 -583913 -2734265 -5275263 -6447972 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6579554 -7238744 -8623425 -10007852 -11260696 -12051723 -12381446 -12513284 -12579075 -12579075 -12579075 -12579331 -12644866 -12579331 -12513284 -12315655 -11854094 -10930718 -9414709 -7766351 -6645600 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6709351 -8997250 -12853426 -15468241 -15925719 -15925463 -15925719 -15598803 -13637819 -10173585 -7493744 -6709350 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6382950 -5340542 -2734265 -649449 -127731 -62452 -127988 -518891 -2343362 -4949382 -6317671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6513507 -6843485 -7897933 -9018940 -10205481 -10930973 -11392278 -11589907 -11655954 -11722001 -11853839 -11853839 -11722001 -11194649 -10535204 -9546291 -8359750 -7436373 -6645345 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -7755123 -10957978 -14226115 -15598803 -15860183 -15860438 -15729620 -13899454 -10369683 -7755123 -6709350 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447972 -5666166 -3450792 -1039838 -258289 -62452 -127988 -453612 -2212804 -4819338 -6187370 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6579554 -7172697 -7766096 -8425285 -8689472 -8952893 -9084731 -9151033 -9216824 -9282615 -8953148 -8491587 -7897934 -7106906 -6777183 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6774631 -8670334 -11677091 -13703356 -14945227 -15206862 -14749128 -12526765 -9454728 -7493744 -6709350 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6057069 -4232598 -1887180 -518891 -127731 -193267 -714471 -2603964 -5014661 -6187370 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513507 -6645345 -6777439 -6974812 -6975068 -6975068 -6975067 -7106906 -7106906 -6975068 -6777183 -6513763 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -6970985 -8735615 -10565782 -12004007 -12395948 -11807909 -10108304 -8343419 -7101547 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -5275263 -3124911 -1430998 -649449 -649192 -1626578 -3516071 -5405307 -6317671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -6905449 -7755123 -8474236 -8800896 -8474236 -7820660 -7167084 -6578533 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6448229 -5926768 -4688780 -3255469 -2408384 -2408384 -3385770 -4754059 -5926768 -6448229 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715
+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6513252 -6644069 -6905449 -7101547 -6970730 -6774631 -6513252 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6317671 -5861746 -5144962 -4688780 -4688780 -5144962 -5861746 -6317671 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715











+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715

+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715















+-6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715 -6447715






diff --git a/saveData/gameEngine/camera/Camera.java b/saveData/gameEngine/camera/Camera.java
new file mode 100644
index 0000000..7117bcb
--- /dev/null
+++ b/saveData/gameEngine/camera/Camera.java
@@ -0,0 +1,129 @@
+package camera;
+
+import org.lwjgl.input.Mouse;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import display.DisplayManager;
+import utils.Maths;
+import world.World;
+
+public class Camera extends ICamera {
+	private static final float DIST_AB_TER = 10f;
+	private static final float SENSITIVITY = 0.1f;
+
+	private Matrix4f toWorldRotation;
+	private Vector3f point;
+	private Vector3f onTerrainPoint;
+	private float distance;
+	private float toTerrainDistance;
+	private float dist;
+	private float angle = 180;
+
+	private int flags = 0;
+
+	public Camera() {
+		super();
+		point = new Vector3f();
+		onTerrainPoint = new Vector3f();
+		distance = position.length();
+		rotX = (float) Math.toDegrees(Vector3f.angle(new Vector3f(-position.x, -position.y, -position.z), new Vector3f(0, 0, -1)));
+	}
+
+	@Override
+	public void update(World world) {
+		Vector2f mouseDelta = new Vector2f(Mouse.getDX(), Mouse.getDY());
+		if (Mouse.isButtonDown(1)) {
+			if (mouseDelta.lengthSquared() != 0f) {
+				mouseDelta.scale(SENSITIVITY);
+				Vector3f delta = new Vector3f();
+				float coef = 120f * DisplayManager.getFrameTimeSeconds();
+				delta.x = coef * -mouseDelta.x;
+				delta.z = coef * mouseDelta.y;
+				toWorldRotation = Maths.createTransformationMatrix(new Vector3f(), 0, -rotY, 0, 1);
+				Vector4f result = Matrix4f.transform(toWorldRotation, new Vector4f(delta.x, 0, delta.z, 0), null);
+				position.x += result.x;
+				position.z += result.z;
+				point.x += result.x;
+				point.z += result.z;
+				onTerrainPoint.x = point.x;
+				onTerrainPoint.z = point.z;
+				onTerrainPoint.y = world.getTerrain().getHeight(onTerrainPoint.x, onTerrainPoint.z);
+			}
+		}
+		if (Mouse.isButtonDown(0)) {
+			if (mouseDelta.lengthSquared() != 0f) {
+				angle -= mouseDelta.x;
+				rotX -= mouseDelta.y;
+				if (rotX < 1f)
+					rotX = 1f;
+				if (rotX > 90f)
+					rotX = 90f;
+				if(angle < 0f)
+					angle += 360f;
+				if(angle >= 360f)
+					angle -= 360f;
+			} else {
+				float dw = Mouse.getDWheel();
+				if (dw != 0) {
+					distance -= dw * 0.1f;
+				}
+			}
+		}
+		toTerrainDistance = Vector3f.sub(onTerrainPoint, position, null).length();
+		Vector2f pt = new Vector2f(point.x, point.z);
+		Vector2f ps = new Vector2f(position.x, position.z);
+		dist = Vector2f.sub(pt, ps, null).length();
+		recalcultePosition(world);
+	}
+
+	private void recalcultePosition(World world) {
+		if (dist < 200f) {
+			point.y = onTerrainPoint.y;
+			if ((flags & 1) == 0) {
+				flags = 3;
+			} else
+				flags = 1;
+		} else {
+			point.y = 0f;
+			if ((flags & 1) != 0) {
+				flags = 2;
+			} else
+				flags = 0;
+		}
+		if ((flags & 2) == 2) {
+			if ((flags & 1) != 0) {
+				distance = toTerrainDistance;
+				rotX -= Math.toDegrees(Vector3f.angle(Vector3f.sub(point, position, null), Vector3f.sub(onTerrainPoint, position, null)));
+			} else {
+				distance = Vector3f.sub(point, position, null).length();
+				rotX += Math.toDegrees(Vector3f.angle(Vector3f.sub(point, position, null), Vector3f.sub(onTerrainPoint, position, null)));
+			}
+		}
+		position.y = point.y + (float) (distance * Math.sin(Math.toRadians(rotX)));
+		position.y = Math.max(position.y, DIST_AB_TER);
+		float xz = (float) (distance * Math.cos(Math.toRadians(rotX)));
+		float dx = (float) (xz * Math.sin(Math.toRadians(angle)));
+		float dz = (float) (xz * Math.cos(Math.toRadians(angle)));
+		position.x = point.x - dx;
+		position.z = point.z - dz;
+		rotY = 180 - angle;
+		if (position.y < world.getTerrain().getHeight(position.x, position.z) + DIST_AB_TER) {
+			while (position.y < world.getTerrain().getHeight(position.x, position.z) + DIST_AB_TER) {
+				if (rotX < 90f)
+					rotX += 0.1f;
+				else
+					distance += 2f;
+				position.y = point.y + (float) (distance * Math.sin(Math.toRadians(rotX)));
+				xz = (float) (distance * Math.cos(Math.toRadians(rotX)));
+				dx = (float) (xz * Math.sin(Math.toRadians(angle)));
+				dz = (float) (xz * Math.cos(Math.toRadians(angle)));
+				position.x = point.x - dx;
+				position.z = point.z - dz;
+				rotY = 180 - angle;
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/camera/ICamera.java b/saveData/gameEngine/camera/ICamera.java
new file mode 100644
index 0000000..eaa6b97
--- /dev/null
+++ b/saveData/gameEngine/camera/ICamera.java
@@ -0,0 +1,45 @@
+package camera;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import world.World;
+
+/**
+ * @author Dinu B.
+ * @since 1.0
+ */
+public abstract class ICamera {
+	public static ICamera createdCamera;
+
+	protected Vector3f position;
+	protected float rotX;
+	protected float rotY;
+	protected float rotZ;
+
+	public ICamera() {
+		createdCamera = this;
+		position = new Vector3f(0, 100, 300);
+	}
+
+	public abstract void update(World world);
+
+	public Vector3f getPosition() {
+		return position;
+	}
+
+	public float getRotX() {
+		return rotX;
+	}
+
+	public float getRotY() {
+		return rotY;
+	}
+
+	public float getRotZ() {
+		return rotZ;
+	}
+
+	public void invertPitch() {
+		rotX = -rotX;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/BiomeSpreadComponent.java b/saveData/gameEngine/components/BiomeSpreadComponent.java
new file mode 100644
index 0000000..ed91042
--- /dev/null
+++ b/saveData/gameEngine/components/BiomeSpreadComponent.java
@@ -0,0 +1,29 @@
+package components;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import world.Biome;
+
+public class BiomeSpreadComponent implements IComponent {
+	private float minRange, maxRange;
+	private Biome biome;
+	
+	public BiomeSpreadComponent withMinMaxRange(float minRange, float maxRange) {
+		this.minRange = minRange;
+		this.maxRange = maxRange;
+		return this;
+	}
+	
+	public BiomeSpreadComponent withBiome(Biome biome) {
+		this.biome = biome;
+		return this;
+	}
+	
+	public Vector2f getMinMax() {
+		return new Vector2f(minRange, maxRange);
+	}
+	
+	public Biome getBiome() {
+		return biome;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/Blueprint.java b/saveData/gameEngine/components/Blueprint.java
new file mode 100644
index 0000000..9d6af91
--- /dev/null
+++ b/saveData/gameEngine/components/Blueprint.java
@@ -0,0 +1,75 @@
+package components;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import entities.Entity;
+import world.World;
+import worldSave.BlueprintData;
+import worldSave.SerializableWorldObject;
+
+public class Blueprint implements SerializableWorldObject {
+
+	protected static final int MODEL = 0;
+	protected static final int BIOME_SPREAD = 1;
+	protected static final int MOVEMENT = 2;
+	protected static final int CUSTOM_COLORS = 3;
+
+	private Map<Integer, IComponent> components = new HashMap<>();
+	private String objectName;
+
+	protected Blueprint(String objectName) {
+		this.objectName = objectName;
+	}
+
+	protected Blueprint withComponent(int id, IComponent c) {
+		components.put(id, c);
+		return this;
+	}
+
+	protected Blueprint withBiomeSpread(BiomeSpreadComponent c) {
+		return withComponent(BIOME_SPREAD, c);
+	}
+
+	public BiomeSpreadComponent getBiomeSpread() {
+		return (BiomeSpreadComponent) components.get(BIOME_SPREAD);
+	}
+
+	protected Blueprint withModel(ModelComponent c) {
+		return withComponent(MODEL, c);
+	}
+
+	public ModelComponent getModel() {
+		return (ModelComponent) components.get(MODEL);
+	}
+
+	protected Blueprint withMovement(MovementComponent c) {
+		return withComponent(MOVEMENT, c);
+	}
+
+	public MovementComponent getMovement() {
+		return (MovementComponent) components.get(MOVEMENT);
+	}
+
+	public void move(Entity e, World w) {
+		MovementComponent moveC = getMovement();
+		if (moveC != null) {
+			moveC.update(e.getPosition(), e, this, w);
+		}
+	}
+
+	protected Blueprint withCuctomColors(CustomColorsComponent c) {
+		return withComponent(CUSTOM_COLORS, c);
+	}
+
+	public CustomColorsComponent getCustomColors() {
+		return (CustomColorsComponent) components.get(CUSTOM_COLORS);
+	}
+
+	@Override
+	public BlueprintData asData() {
+		BlueprintData data = new BlueprintData();
+		data.setObjectName(objectName);
+		return data;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/BlueprintCreator.java b/saveData/gameEngine/components/BlueprintCreator.java
new file mode 100644
index 0000000..cd32d5a
--- /dev/null
+++ b/saveData/gameEngine/components/BlueprintCreator.java
@@ -0,0 +1,31 @@
+package components;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import openglWorkers.ModelsLibrary;
+import world.Biome;
+
+public class BlueprintCreator {
+	public static Blueprint createBlueprintFor(String entityFolder) {
+		Blueprint blueprint = new Blueprint(entityFolder);
+		if (entityFolder.equals("1000")) {
+			List<Vector3f> colors = new ArrayList<>();
+			colors.add(new Vector3f(0, 1, 0));
+			blueprint.withModel(new ModelComponent(ModelsLibrary.getModel("res/models/1000/tree.obj")))
+					.withBiomeSpread(new BiomeSpreadComponent().withMinMaxRange(3, 30).withBiome(Biome.FOREST))
+					.withCuctomColors(new CustomColorsComponent(colors));
+		} else if (entityFolder.equals("1001")) {
+			List<Vector3f> colors = new ArrayList<>();
+			colors.add(new Vector3f(0, 1, 0));
+			blueprint.withModel(new ModelComponent(ModelsLibrary.getModel("res/models/1001/tree.obj")))
+					.withBiomeSpread(new BiomeSpreadComponent().withMinMaxRange(10, 60).withBiome(Biome.FOREST))
+					.withCuctomColors(new CustomColorsComponent(colors));
+		} else if (entityFolder.equals("menuDNA")) {
+			blueprint.withModel(new ModelComponent(ModelsLibrary.getModel("res/models/others/menu_DNA.obj")));
+		}
+		return blueprint;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/CustomColorsComponent.java b/saveData/gameEngine/components/CustomColorsComponent.java
new file mode 100644
index 0000000..647897a
--- /dev/null
+++ b/saveData/gameEngine/components/CustomColorsComponent.java
@@ -0,0 +1,17 @@
+package components;
+
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector3f;
+
+public class CustomColorsComponent implements IComponent {
+	private List<Vector3f> colors;
+
+	public CustomColorsComponent(List<Vector3f> colors) {
+		this.colors = colors;
+	}
+
+	public List<Vector3f> getColors() {
+		return colors;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/IComponent.java b/saveData/gameEngine/components/IComponent.java
new file mode 100644
index 0000000..badb1c3
--- /dev/null
+++ b/saveData/gameEngine/components/IComponent.java
@@ -0,0 +1,14 @@
+package components;
+
+public abstract interface IComponent {
+	public static final int BIOME_SPREAD = Blueprint.BIOME_SPREAD;
+
+	public static IComponent create(int id) {
+		switch (id) {
+		case BIOME_SPREAD:
+			return new BiomeSpreadComponent();
+		default:
+			return null;
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/LifeComponent.java b/saveData/gameEngine/components/LifeComponent.java
new file mode 100644
index 0000000..cda2e2f
--- /dev/null
+++ b/saveData/gameEngine/components/LifeComponent.java
@@ -0,0 +1,4 @@
+package components;
+
+public class LifeComponent implements IComponent {
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/ModelComponent.java b/saveData/gameEngine/components/ModelComponent.java
new file mode 100644
index 0000000..d038fd0
--- /dev/null
+++ b/saveData/gameEngine/components/ModelComponent.java
@@ -0,0 +1,15 @@
+package components;
+
+import openglObjects.VAO;
+
+public class ModelComponent implements IComponent {
+	private final VAO model;
+
+	public ModelComponent(VAO model) {
+		this.model = model;
+	}
+
+	public VAO getModel() {
+		return model;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/MovementComponent.java b/saveData/gameEngine/components/MovementComponent.java
new file mode 100644
index 0000000..284eeda
--- /dev/null
+++ b/saveData/gameEngine/components/MovementComponent.java
@@ -0,0 +1,49 @@
+package components;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import display.DisplayManager;
+import entities.Entity;
+import utils.GU;
+import world.World;
+
+public class MovementComponent implements IComponent {
+
+	public static final int MOVE = 1;// 00000001
+	public static final int JUMP = 2;// 00000010
+	
+	private static final float SPEED = 20f;
+	private static final float JUMP_POWER = 1.2f;
+	private static final float GRAVITY = 5f;
+
+	private int config;
+	private Vector3f vel;
+
+	public MovementComponent(int config) {
+		if(config == 0) {
+			throw new InstantiationError("Config cannot be 0, values accepted are 1, 2 or 3");
+		}
+		this.config = config;
+		this.vel = new Vector3f();
+	}
+
+	public void update(Vector3f position, Entity e, Blueprint blueprint, World world) {
+		if((config & MOVE) != 0) {
+			e.rotate(0, GU.random.genFloat() * 10f - 5f, 0);
+			
+			float radyrot = (float) Math.toRadians(e.getRotY() + 180);
+			vel.x = (float) (SPEED * DisplayManager.getFrameTimeSeconds() * Math.sin(radyrot));
+			vel.z = (float) (SPEED * DisplayManager.getFrameTimeSeconds() * Math.cos(radyrot));
+			e.increasePosition(vel.x, 0, vel.z);
+		}
+		if((config & JUMP) != 0) {
+			float th = world.getTerrain().getHeight(position.x, position.z);
+			if(position.y < th) {
+				position.y = th;
+				vel.y = JUMP_POWER;
+			}
+			position.y += vel.y;
+			vel.y -= GRAVITY * DisplayManager.getFrameTimeSeconds();
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/components/package-info.java b/saveData/gameEngine/components/package-info.java
new file mode 100644
index 0000000..4df94b8
--- /dev/null
+++ b/saveData/gameEngine/components/package-info.java
@@ -0,0 +1,6 @@
+/**
+ * This package is meant to contain the component architecture and the components' classes
+ * @author dinu
+ *
+ */
+package components;
\ No newline at end of file
diff --git a/saveData/gameEngine/configuration/Config.java b/saveData/gameEngine/configuration/Config.java
new file mode 100644
index 0000000..654f9d5
--- /dev/null
+++ b/saveData/gameEngine/configuration/Config.java
@@ -0,0 +1,5 @@
+package configuration;
+
+public enum Config {
+	TRUE, FALSE;
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/configuration/GameConfig.java b/saveData/gameEngine/configuration/GameConfig.java
new file mode 100644
index 0000000..e12ca6d
--- /dev/null
+++ b/saveData/gameEngine/configuration/GameConfig.java
@@ -0,0 +1,31 @@
+package configuration;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class GameConfig {
+	public static final int FULLSCREEN = 1;
+	
+	private static final Map<Integer, Config> configuration = new HashMap<>();
+	private static final Map<Integer, Float> configurationf = new HashMap<>();
+	
+	static {
+		configuration.put(FULLSCREEN, Config.FALSE);
+	}
+	
+	public static void setConfig(int key, Config value) {
+		configuration.replace(key, value);
+	}
+	
+	public static void setConfigf(int key, float value) {
+		configurationf.replace(key, value);
+	}
+	
+	public static Config getConfig(int key) {
+		return configuration.get(key);
+	}
+	
+	public static float getConfigurationf(int key) {
+		return configurationf.get(key);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/customFileFormat/AudFile.java b/saveData/gameEngine/customFileFormat/AudFile.java
new file mode 100644
index 0000000..3107a5f
--- /dev/null
+++ b/saveData/gameEngine/customFileFormat/AudFile.java
@@ -0,0 +1,51 @@
+package customFileFormat;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.openal.AL10;
+
+import exceptions.LoadingException;
+import openALObjects.Buffer;
+import res.Resource;
+import utils.GU;
+
+public class AudFile implements File {
+	private String location;
+	
+	public AudFile(String location) {
+		this.location = location;
+	}
+	
+	@Override
+	public Buffer load() throws LoadingException {
+		int id = AL10.alGenBuffers();
+		BufferedReader reader = GU.open(new Resource(location));
+		String line;
+		try {
+			line = reader.readLine();
+			String[] pts = line.split(" ");
+			int format = Integer.parseInt(pts[0]);
+			int size = Integer.parseInt(pts[1]);
+			ByteBuffer data = BufferUtils.createByteBuffer(size);
+			int freq = Integer.parseInt(pts[2]);
+			line = reader.readLine();
+			pts = line.split(" ");
+			for(int idx = 0; idx < size; idx++)
+				data.put(Byte.parseByte(pts[idx]));
+			data.flip();
+			AL10.alBufferData(id, format, data, freq);
+		} catch (IOException e) {
+			e.printStackTrace();
+			return null;
+		} finally {
+			try {
+				reader.close();
+			} catch (IOException e) {
+			}
+		}
+		return new Buffer(id);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/customFileFormat/File.java b/saveData/gameEngine/customFileFormat/File.java
new file mode 100644
index 0000000..68e66e6
--- /dev/null
+++ b/saveData/gameEngine/customFileFormat/File.java
@@ -0,0 +1,8 @@
+package customFileFormat;
+
+import exceptions.LoadingException;
+
+public interface File {
+	
+	public abstract Object load() throws LoadingException;
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/customFileFormat/FileFormat.java b/saveData/gameEngine/customFileFormat/FileFormat.java
new file mode 100644
index 0000000..c177c15
--- /dev/null
+++ b/saveData/gameEngine/customFileFormat/FileFormat.java
@@ -0,0 +1,32 @@
+package customFileFormat;
+
+import java.lang.reflect.InvocationTargetException;
+
+import exceptions.LoadingException;
+
+public enum FileFormat {
+	TEXTURE("tex", TexFile.class);
+
+	private String extension;
+	private Class<? extends File> representingClass;
+
+	private FileFormat(String extension, Class<? extends File> representingClass) {
+		this.extension = extension;
+		this.representingClass = representingClass;
+	}
+
+	public String getExtension() {
+		return extension;
+	}
+
+	public Object load(String location) throws LoadingException {
+		try {
+			File f = representingClass.getConstructor(String.class).newInstance(location);
+			return f.load();
+		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
+				| NoSuchMethodException | SecurityException e) {
+			e.printStackTrace();
+		}
+		return null;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/customFileFormat/TexFile.java b/saveData/gameEngine/customFileFormat/TexFile.java
new file mode 100644
index 0000000..4fde738
--- /dev/null
+++ b/saveData/gameEngine/customFileFormat/TexFile.java
@@ -0,0 +1,64 @@
+package customFileFormat;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+
+import exceptions.CorruptFileException;
+import exceptions.LoadingException;
+import openglObjects.Texture;
+import res.Resource;
+import utils.GU;
+
+public class TexFile implements File {
+	private String location;
+
+	public TexFile(String location) {
+		this.location = location;
+	}
+
+	@Override
+	public Texture load() throws LoadingException {
+		BufferedReader reader = GU.open(new Resource(location));
+		int id = 0;
+		try {
+			String line = reader.readLine();
+			String[] pts = line.split(" ");
+			int width = Integer.parseInt(pts[0]);
+			int height = Integer.parseInt(pts[1]);
+			ByteBuffer pixels = BufferUtils.createByteBuffer(width * height * 4);
+			for (int y = height - 1; y >= 0; y--) {
+				line = reader.readLine();
+				pts = line.split(" ");
+				for (int x = 0; x < width; x++) {
+					try {
+						int pixel = Integer.parseInt(pts[x]);
+						pixels.put((byte) ((pixel >> 16) & 0xFF));
+						pixels.put((byte) ((pixel >> 8) & 0xFF));
+						pixels.put((byte) (pixel & 0xFF));
+						pixels.put((byte) ((pixel >> 24) & 0xFF));
+					} catch (NumberFormatException e) {
+						throw new CorruptFileException("File at " + location + " is corrupt(found: " + pts[x] + " while expecting an int)");
+					}
+				}
+			}
+			pixels.flip();
+
+			id = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0, GL11.GL_RGBA,
+					GL11.GL_UNSIGNED_BYTE, pixels);
+
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return (id == 0 ? null : new Texture(id));
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/entities/Entity.java b/saveData/gameEngine/entities/Entity.java
new file mode 100644
index 0000000..0c4b89e
--- /dev/null
+++ b/saveData/gameEngine/entities/Entity.java
@@ -0,0 +1,90 @@
+package entities;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import components.Blueprint;
+import components.CustomColorsComponent;
+import openglObjects.VAO;
+import world.World;
+import worldSave.EntityData;
+import worldSave.SerializableWorldObject;
+
+public class Entity implements SerializableWorldObject {
+
+	private Blueprint blueprint;
+	
+	private Vector3f position;
+	private float rotX;
+	private float rotY;
+	private float rotZ;
+	private float scale;
+
+	public Entity(Blueprint blueprint, Vector3f position) {
+		this.blueprint = blueprint;
+		this.position = position;
+		this.rotX = 0;
+		this.rotY = 0;
+		this.rotZ = 0;
+		this.scale = 1;
+	}
+
+	public VAO getModel() {
+		return blueprint.getModel().getModel();
+	}
+
+	public Vector3f getPosition() {
+		return position;
+	}
+
+	public float getRotX() {
+		return rotX;
+	}
+
+	public float getRotY() {
+		return rotY;
+	}
+
+	public float getRotZ() {
+		return rotZ;
+	}
+
+	public float getScale() {
+		return scale;
+	}
+	
+	public void increasePosition(float dx, float dy, float dz) {
+		this.position.x += dx;
+		this.position.y += dy;
+		this.position.z += dz;
+	}
+	
+	public void rotate(float dx, float dy, float dz) {
+		this.rotX += dx;
+		this.rotY += dy;
+		this.rotZ += dz;
+	}
+
+	public components.BiomeSpreadComponent getBiomeSpreadComponent() {
+		return blueprint.getBiomeSpread();
+	}
+	
+	public void update(World w) {
+		blueprint.move(this, w);
+	}
+
+	public CustomColorsComponent getCustomColors() {
+		return blueprint.getCustomColors();
+	}
+
+	public void setRotY(float rotY) {
+		this.rotY = rotY;
+	}
+
+	@Override
+	public EntityData asData() {
+		EntityData data = new EntityData();
+		data.setPosition(position);
+		data.setBlueprintData(blueprint.asData());
+		return data;
+	}
+}
diff --git a/saveData/gameEngine/entities/Light.java b/saveData/gameEngine/entities/Light.java
new file mode 100644
index 0000000..037873a
--- /dev/null
+++ b/saveData/gameEngine/entities/Light.java
@@ -0,0 +1,32 @@
+package entities;
+
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+public class Light {
+	public static Light sun;
+	
+	public Vector3f dir;
+	public Vector3f color;
+	public Vector2f bias;
+
+	public Light(Vector3f dir, Vector3f color, Vector2f bias) {
+		this.dir = dir;
+		this.color = color;
+		this.bias = bias;
+		if(sun == null)
+			sun = this;
+	}
+
+	public Vector3f getDir() {
+		return dir;
+	}
+
+	public Vector3f getColor() {
+		return color;
+	}
+
+	public Vector2f getBias() {
+		return bias;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/exceptions/CorruptFileException.java b/saveData/gameEngine/exceptions/CorruptFileException.java
new file mode 100644
index 0000000..b4f0160
--- /dev/null
+++ b/saveData/gameEngine/exceptions/CorruptFileException.java
@@ -0,0 +1,9 @@
+package exceptions;
+
+public class CorruptFileException extends LoadingException {
+	private static final long serialVersionUID = -2524782042036254798L;
+
+	public CorruptFileException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/exceptions/GameException.java b/saveData/gameEngine/exceptions/GameException.java
new file mode 100644
index 0000000..0f0171d
--- /dev/null
+++ b/saveData/gameEngine/exceptions/GameException.java
@@ -0,0 +1,9 @@
+package exceptions;
+
+public abstract class GameException extends RuntimeException {
+	private static final long serialVersionUID = 2404478978308821651L;
+
+	public GameException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/exceptions/LoadingException.java b/saveData/gameEngine/exceptions/LoadingException.java
new file mode 100644
index 0000000..a2e55cc
--- /dev/null
+++ b/saveData/gameEngine/exceptions/LoadingException.java
@@ -0,0 +1,9 @@
+package exceptions;
+
+public abstract class LoadingException extends GameException {
+	private static final long serialVersionUID = 1320557239316445228L;
+
+	public LoadingException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/mainMenu/MainMenu.java b/saveData/gameEngine/mainMenu/MainMenu.java
new file mode 100644
index 0000000..5811caf
--- /dev/null
+++ b/saveData/gameEngine/mainMenu/MainMenu.java
@@ -0,0 +1,38 @@
+package mainMenu;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.input.Mouse;
+
+import entities.Entity;
+
+public class MainMenu {
+	private List<MainMenuButton> buttons = new ArrayList<>();
+	private Entity DNA;
+	
+	public MainMenu(List<MainMenuButton> buttons, Entity DNA) {
+		this.buttons = buttons;
+		this.DNA = DNA;
+	}
+	
+	public void update() {
+		int idx = 0;
+		for(MainMenuButton button : buttons) {
+			if(button.isMouseOver()) {
+				DNA.setRotY(idx * 36f);
+				if(Mouse.isButtonDown(0))
+					button.executeAction();
+			}
+			idx++;
+		}
+	}
+
+	public List<MainMenuButton> getButtons() {
+		return buttons;
+	}
+
+	public Entity getDNA() {
+		return DNA;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/mainMenu/MainMenuButton.java b/saveData/gameEngine/mainMenu/MainMenuButton.java
new file mode 100644
index 0000000..ecb6098
--- /dev/null
+++ b/saveData/gameEngine/mainMenu/MainMenuButton.java
@@ -0,0 +1,31 @@
+package mainMenu;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import openglObjects.Texture;
+import ui.Action;
+import ui.Button;
+
+public class MainMenuButton extends Button {
+	private Action action;
+	private Texture tex;
+
+	public MainMenuButton(Vector2f center, Vector2f scale, Action action, Texture texture) {
+		super(center, scale);
+		this.action = action;
+		this.tex = texture;
+	}
+	
+	public void update() {
+		if(super.clicked())
+			action.execute();
+	}
+
+	public Texture getTex() {
+		return tex;
+	}
+
+	public void executeAction() {
+		action.execute();
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/mainMenu/MenuMaster.java b/saveData/gameEngine/mainMenu/MenuMaster.java
new file mode 100644
index 0000000..51ca309
--- /dev/null
+++ b/saveData/gameEngine/mainMenu/MenuMaster.java
@@ -0,0 +1,32 @@
+package mainMenu;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import components.Blueprint;
+import components.BlueprintCreator;
+import customFileFormat.TexFile;
+import entities.Entity;
+import mainEngine.GS;
+import mainEngine.MainGameLoop;
+import ui.Action;
+
+public class MenuMaster {
+	public static MainMenu menu;
+
+	public static MainMenu createMainMenu() {
+		List<MainMenuButton> buttons = new ArrayList<>();
+		buttons.add(new MainMenuButton(new Vector2f(0f, 0.5f), new Vector2f(0.1f, 0.05f), new Action() {
+			@Override
+			public void execute() {
+				MainGameLoop.state = GS.GAME;
+			}
+		}, new TexFile("res/textures/buttonTextures/mainMenu_Start.tex").load()));
+		Blueprint dnaBlueprint = BlueprintCreator.createBlueprintFor("menuDNA");
+		menu = new MainMenu(buttons, new Entity(dnaBlueprint, new Vector3f(1f, -5f, -8.1f)));
+		return menu;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/parallelComputing/CreateVAORequest.java b/saveData/gameEngine/parallelComputing/CreateVAORequest.java
new file mode 100644
index 0000000..b8b60f4
--- /dev/null
+++ b/saveData/gameEngine/parallelComputing/CreateVAORequest.java
@@ -0,0 +1,22 @@
+package parallelComputing;
+
+import openglObjects.VAO;
+import openglWorkers.DataPacking;
+import openglWorkers.VBOData;
+
+public class CreateVAORequest extends Request {
+
+	private VAO vao;
+	private VBOData[] args;
+
+	public CreateVAORequest(String request, VBOData[] args, VAO vao) {
+		super(request, args);
+		this.args = args;
+		this.vao = vao;
+	}
+
+	@Override
+	public void execute() {
+		DataPacking.createVAOAndStore(vao, args);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/parallelComputing/Request.java b/saveData/gameEngine/parallelComputing/Request.java
new file mode 100644
index 0000000..0191b51
--- /dev/null
+++ b/saveData/gameEngine/parallelComputing/Request.java
@@ -0,0 +1,12 @@
+package parallelComputing;
+
+public abstract class Request {
+	protected String request;
+	protected Object[] args;
+
+	public Request(String request, Object[] args) {
+		this.request = request;
+	}
+	
+	public abstract void execute();
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/parallelComputing/Thread.java b/saveData/gameEngine/parallelComputing/Thread.java
new file mode 100644
index 0000000..73f79c1
--- /dev/null
+++ b/saveData/gameEngine/parallelComputing/Thread.java
@@ -0,0 +1,36 @@
+package parallelComputing;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Exchanger;
+
+public class Thread extends java.lang.Thread {
+	public List<Request> toCarryOutRequests = new ArrayList<>();
+	public List<CreateVAORequest> vaoCreateRequests = new ArrayList<>();
+
+	public Thread(String name, Runnable runnable) {
+		super(runnable, name);
+	}
+
+	public void setToCarryOutRequest(Request request) {
+		if(request instanceof CreateVAORequest) {
+			vaoCreateRequests.add((CreateVAORequest) request);
+			return;
+		}
+		this.toCarryOutRequests.add(request);
+	}
+
+	public <T> T exchange(T toExchange) {
+		Exchanger<T> exchanger = new Exchanger<>();
+		try {
+			return exchanger.exchange(toExchange);
+		} catch (InterruptedException e) {
+		}
+		return null;
+	}
+
+	public void clearRequests() {
+		this.toCarryOutRequests.clear();
+		this.vaoCreateRequests.clear();
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/parallelComputing/ThreadMaster.java b/saveData/gameEngine/parallelComputing/ThreadMaster.java
new file mode 100644
index 0000000..3882a9d
--- /dev/null
+++ b/saveData/gameEngine/parallelComputing/ThreadMaster.java
@@ -0,0 +1,22 @@
+package parallelComputing;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ThreadMaster {
+	private static Map<String, Thread> threads = new HashMap<>();
+	
+	public static void addThread(Thread thread) {
+		threads.put(thread.getName(), thread);
+	}
+	
+	public static Thread getThread(String name) {
+		return threads.get(name);
+	}
+	
+	public static Thread createThread(Runnable runnable, String name) {
+		Thread th = new Thread(name, runnable);
+		threads.put(name, th);
+		return th;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/parallelComputing/VAOUpdateRequest.java b/saveData/gameEngine/parallelComputing/VAOUpdateRequest.java
new file mode 100644
index 0000000..096b95d
--- /dev/null
+++ b/saveData/gameEngine/parallelComputing/VAOUpdateRequest.java
@@ -0,0 +1,21 @@
+package parallelComputing;
+
+import openglObjects.VAO;
+import openglWorkers.VBOUpdateData;
+
+public class VAOUpdateRequest extends Request {
+
+	private VAO vao;
+	private VBOUpdateData data;
+
+	public VAOUpdateRequest(String request, VBOUpdateData arg, VAO vao) {
+		super(request, new Object[] { arg });
+		this.vao = vao;
+		this.data = arg;
+	}
+
+	@Override
+	public void execute() {
+		data.updateWithin(vao);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/terrain/HeightsGenerator.java b/saveData/gameEngine/terrain/HeightsGenerator.java
new file mode 100644
index 0000000..ca9633a
--- /dev/null
+++ b/saveData/gameEngine/terrain/HeightsGenerator.java
@@ -0,0 +1,69 @@
+package terrain;
+
+import java.util.Random;
+
+public class HeightsGenerator {
+	private static final float AMPLITUDE = 300f;
+	private static final int OCTAVES = 6;
+	private static final float ROUGHNESS = 0.25f;
+
+	private Random random = new Random();
+	private int seed;
+
+	public HeightsGenerator() {
+		this.seed = random.nextInt(1000000000);
+	}
+
+	public HeightsGenerator(int seed) {
+		this.seed = seed;
+	}
+
+	public float generateHeight(int x, int z) {
+		float total = 0;
+		float d = (float) Math.pow(2, OCTAVES - 1);
+		for (int i = 0; i < OCTAVES; i++) {
+			float freq = (float) (Math.pow(2, i) / d);
+			float amp = (float) Math.pow(ROUGHNESS, i) * AMPLITUDE;
+			total += getInterpolatedNoise(x * freq, z * freq) * amp;
+		}
+		return total;
+	}
+
+	private float getInterpolatedNoise(float x, float z) {
+		int intX = (int) x;
+		int intZ = (int) z;
+		float fracX = x - intX;
+		float fracZ = z - intZ;
+
+		float v1 = getSmoothNoise(intX, intZ);
+		float v2 = getSmoothNoise(intX + 1, intZ);
+		float v3 = getSmoothNoise(intX, intZ + 1);
+		float v4 = getSmoothNoise(intX + 1, intZ + 1);
+		float i1 = interpolate(v1, v2, fracX);
+		float i2 = interpolate(v3, v4, fracX);
+		return interpolate(i1, i2, fracZ);
+	}
+
+	private float interpolate(float a, float b, float blend) {
+		double theta = blend * Math.PI;
+		float f = (float) (1f - Math.cos(theta)) * 0.5f;
+		return a * (1f - f) + b * f;
+	}
+
+	private float getSmoothNoise(int x, int z) {
+		float corners = (getNoise(x - 1, z - 1) + getNoise(x + 1, z - 1) + getNoise(x - 1, z + 1)
+				+ getNoise(x + 1, z + 1)) / 16f;
+		float sides = (getNoise(x - 1, z) + getNoise(x + 1, z) + getNoise(x, z - 1) + getNoise(x, z + 1)) / 8f;
+		float center = getNoise(x, z) / 4f;
+		return corners + sides + center;
+	}
+
+	private float getNoise(int x, int z) {
+		random.setSeed(x * 49632 + z * 325176 + seed);
+		return random.nextFloat() * 2f - 1f;
+	}
+	
+	public int getSeed() {
+		return seed;
+	}
+}
diff --git a/saveData/gameEngine/terrain/Terrain.java b/saveData/gameEngine/terrain/Terrain.java
new file mode 100644
index 0000000..4c39072
--- /dev/null
+++ b/saveData/gameEngine/terrain/Terrain.java
@@ -0,0 +1,211 @@
+package terrain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import components.BiomeSpreadComponent;
+import entities.Entity;
+import openglObjects.VAO;
+import openglWorkers.DataPacking;
+import openglWorkers.VBOData;
+import utils.Maths;
+import worldSave.SerializableWorldObject;
+import worldSave.TerrainData;
+
+public class Terrain implements SerializableWorldObject{
+	public static final float SIZE = 2400;
+	public static final int VERTEX_COUNT = (int) (256f * (SIZE / 1200f));
+	private VAO model;
+	private float x, z;
+	private HeightsGenerator generator;
+	private float[][] heights;
+	private List<TerrainVertex> vertices;
+
+	public Terrain() {
+		x = -(SIZE / 2f);
+		z = -(SIZE / 2f);
+		vertices = new ArrayList<>();
+		generator = new HeightsGenerator();
+		model = initModel();
+	}
+
+	public Terrain(int seed) {
+		x = -(SIZE / 2f);
+		z = -(SIZE / 2f);
+		vertices = new ArrayList<>();
+		generator = new HeightsGenerator(seed);
+		model = initModel();
+	}
+
+	public void initColors(List<Entity> entities) {
+		for (TerrainVertex vertex : vertices) {
+			for (Entity e : entities) {
+				BiomeSpreadComponent comp = e.getBiomeSpreadComponent();
+				if (comp != null) {
+					Vector3f pos = posRelToTerrain(e.getPosition());
+					float len = Vector3f.sub(pos, vertex.position, null).length();
+					Vector2f minMax = comp.getMinMax();
+					Vector3f cl = new Vector3f();
+					if (len < minMax.x) {
+						cl = comp.getBiome().getColor();
+					} else if (len < minMax.y) {
+						Vector3f bcl = new Vector3f(comp.getBiome().getColor());
+						float fac = (len - minMax.x) / (minMax.y - minMax.x);
+						bcl.scale(1.0f - fac);
+						Vector3f prevC = new Vector3f(vertex.color);
+						prevC.scale(fac);
+						cl = new Vector3f(Vector3f.add(bcl, prevC, null));
+					}
+					if (!(cl.x == 0 && cl.y == 0 && cl.z == 0))
+						vertex.color = cl;
+				}
+			}
+		}
+		float[] cls = new float[VERTEX_COUNT * VERTEX_COUNT * 3];
+		int ptr = 0;
+		for (TerrainVertex vertex : vertices) {
+			cls[ptr++] = vertex.color.x;
+			cls[ptr++] = vertex.color.y;
+			cls[ptr++] = vertex.color.z;
+		}
+		DataPacking.replace(model, 2, cls);
+	}
+
+	private Vector3f posRelToTerrain(Vector3f position) {
+		return new Vector3f(position.x - this.x, position.y, position.z - this.z);
+	}
+
+	private VAO initModel() {
+		heights = new float[VERTEX_COUNT][VERTEX_COUNT];
+		for (int i = 0; i < VERTEX_COUNT; i++)
+			for (int j = 0; j < VERTEX_COUNT; j++)
+				heights[i][j] = -100f;
+		int count = VERTEX_COUNT * VERTEX_COUNT;
+		float[] vao_vertices = new float[3 * count];
+		float[] vao_normals = new float[3 * count];
+		float[] vao_colors = new float[3 * count];
+		int vertexPointer = 0;
+		for (int z = 0; z < VERTEX_COUNT; z++) {
+			for (int x = 0; x < VERTEX_COUNT; x++) {
+				vao_vertices[3 * vertexPointer] = ((float) x / ((float) VERTEX_COUNT - 1)) * SIZE;
+				vao_vertices[3 * vertexPointer + 1] = getHeight(x, z);
+				vao_vertices[3 * vertexPointer + 2] = ((float) z / ((float) VERTEX_COUNT - 1)) * SIZE;
+
+				Vector3f normal = getNormal(x, z);
+				vao_normals[3 * vertexPointer] = normal.x;
+				vao_normals[3 * vertexPointer + 1] = normal.y;
+				vao_normals[3 * vertexPointer + 2] = normal.z;
+
+				vao_colors[3 * vertexPointer] = 1.0f;
+				vao_colors[3 * vertexPointer + 1] = 0.766f;
+				vao_colors[3 * vertexPointer + 2] = 0.061f;
+
+				vertices.add(new TerrainVertex(
+						new Vector3f(vao_vertices[3 * vertexPointer], vao_vertices[3 * vertexPointer + 1],
+								vao_vertices[3 * vertexPointer + 2]),
+						new Vector3f(vao_colors[3 * vertexPointer], vao_colors[3 * vertexPointer + 1],
+								vao_colors[3 * vertexPointer + 2])));
+
+				vertexPointer++;
+			}
+		}
+		int[] indices = new int[6 * (VERTEX_COUNT - 1) * (VERTEX_COUNT - 1)];
+		int pointer = 0;
+		for (int z = 0; z < VERTEX_COUNT - 1; z++) {
+			for (int x = 0; x < VERTEX_COUNT - 1; x++) {
+				int topLeft = z * VERTEX_COUNT + x;
+				int topRight = topLeft + 1;
+				int bottomLeft = (z + 1) * VERTEX_COUNT + x;
+				int bottomRight = bottomLeft + 1;
+				if ((x + z) % 2 == 0) {
+					indices[pointer++] = topLeft;
+					indices[pointer++] = bottomLeft;
+					indices[pointer++] = bottomRight;
+					indices[pointer++] = topRight;
+					indices[pointer++] = topLeft;
+					indices[pointer++] = bottomRight;
+				} else {
+					indices[pointer++] = topLeft;
+					indices[pointer++] = bottomLeft;
+					indices[pointer++] = topRight;
+					indices[pointer++] = topRight;
+					indices[pointer++] = bottomLeft;
+					indices[pointer++] = bottomRight;
+				}
+			}
+		}
+		return DataPacking.storeDataInVAO(new VBOData(vao_vertices).withAttributeNumber(0).withDimensions(3),
+				new VBOData(vao_normals).withAttributeNumber(1).withDimensions(3),
+				new VBOData(vao_colors).withAttributeNumber(2).withDimensions(3).withUsage(GL15.GL_DYNAMIC_DRAW),
+				new VBOData(indices).isIndices(true));
+	}
+
+	public float getHeight(float worldX, float worldZ) {
+		float terrainx = worldX - this.x;
+		float terrainz = worldZ - this.z;
+		float gridSquareSize = SIZE / ((float) heights.length - 1);
+		int gridX = (int) Math.floor(terrainx / gridSquareSize);
+		int gridZ = (int) Math.floor(terrainz / gridSquareSize);
+		if (gridX >= heights.length - 1 || gridZ >= heights.length - 1 || gridX < 0 || gridZ < 0)
+			return 0;
+		float xCoord = (terrainx % gridSquareSize) / gridSquareSize;
+		float zCoord = (terrainz % gridSquareSize) / gridSquareSize;
+		float answer;
+		if (xCoord <= (1 - zCoord)) {
+			answer = Maths.barryCentric(new Vector3f(0, heights[gridX][gridZ], 0),
+					new Vector3f(1, heights[gridX + 1][gridZ], 0), new Vector3f(0, heights[gridX][gridZ + 1], 1),
+					new Vector2f(xCoord, zCoord));
+		} else {
+			answer = Maths.barryCentric(new Vector3f(1, heights[gridX + 1][gridZ], 0),
+					new Vector3f(1, heights[gridX + 1][gridZ + 1], 1), new Vector3f(0, heights[gridX][gridZ + 1], 1),
+					new Vector2f(xCoord, zCoord));
+		}
+		return answer;
+	}
+
+	private float getHeight(int x, int z) {
+		x = (x < 0 ? 0 : x);
+		x = (x > VERTEX_COUNT - 1 ? VERTEX_COUNT - 1 : x);
+		z = (z < 0 ? 0 : z);
+		z = (z > VERTEX_COUNT - 1 ? VERTEX_COUNT - 1 : z);
+		if (heights[x][z] == -100f) {
+			float height = generator.generateHeight(x, z);
+			heights[x][z] = height;
+			return height;
+		} else
+			return heights[x][z];
+	}
+
+	private Vector3f getNormal(int x, int z) {
+		float up = getHeight(x, z + 1);
+		float down = getHeight(x, z - 1);
+		float left = getHeight(x - 1, z);
+		float right = getHeight(x + 1, z);
+		Vector3f normal = new Vector3f(left - right, 2f, down - up);
+		normal.normalise();
+		return normal;
+	}
+
+	public float getX() {
+		return x;
+	}
+
+	public float getZ() {
+		return z;
+	}
+
+	public VAO getModel() {
+		return model;
+	}
+
+	@Override
+	public TerrainData asData() {
+		TerrainData data = new TerrainData();
+		data.setSeed(generator.getSeed());
+		return data;
+	}
+}
diff --git a/saveData/gameEngine/terrain/TerrainVertex.java b/saveData/gameEngine/terrain/TerrainVertex.java
new file mode 100644
index 0000000..75c36e3
--- /dev/null
+++ b/saveData/gameEngine/terrain/TerrainVertex.java
@@ -0,0 +1,13 @@
+package terrain;
+
+import org.lwjgl.util.vector.Vector3f;
+
+public class TerrainVertex {
+	protected Vector3f position;
+	protected Vector3f color;
+	
+	public TerrainVertex(Vector3f position, Vector3f color) {
+		this.position = position;
+		this.color = color;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/ui/Action.java b/saveData/gameEngine/ui/Action.java
new file mode 100644
index 0000000..28eb187
--- /dev/null
+++ b/saveData/gameEngine/ui/Action.java
@@ -0,0 +1,5 @@
+package ui;
+
+public interface Action {
+	public abstract void execute();
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/ui/Button.java b/saveData/gameEngine/ui/Button.java
new file mode 100644
index 0000000..ba7dd99
--- /dev/null
+++ b/saveData/gameEngine/ui/Button.java
@@ -0,0 +1,34 @@
+package ui;
+
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.util.vector.Vector2f;
+
+public class Button {
+	private Vector2f center;
+	private Vector2f scale;
+
+	public Button(Vector2f center, Vector2f scale) {
+		this.center = center;
+		this.scale = scale;
+	}
+	
+	public boolean isMouseOver() {
+		double normalizedX = -1.0 + 2.0 * (double)Mouse.getX() / Display.getWidth(); 
+		double normalizedY = -(1.0 - 2.0 * (double)Mouse.getY() / Display.getHeight());
+		Vector2f relToButtonLocation = Vector2f.sub(center, new Vector2f((float) normalizedX, (float) normalizedY), null);
+		return (Math.abs(relToButtonLocation.x) <= scale.x && Math.abs(relToButtonLocation.y) <= scale.y);
+	}
+	
+	public boolean clicked() {
+		return isMouseOver() && Mouse.isButtonDown(0);
+	}
+
+	public Vector2f getCenter() {
+		return center;
+	}
+
+	public Vector2f getScale() {
+		return scale;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/ui/GUITexture.java b/saveData/gameEngine/ui/GUITexture.java
new file mode 100644
index 0000000..5c6a39a
--- /dev/null
+++ b/saveData/gameEngine/ui/GUITexture.java
@@ -0,0 +1,37 @@
+package ui;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import openglObjects.Texture;
+
+public class GUITexture {
+	private Vector2f center;
+	private Vector2f scale;
+	private Texture texture;
+
+	public GUITexture(Vector2f center, Vector2f scale, Texture texture) {
+		this.center = center;
+		this.scale = scale;
+		this.texture = texture;
+	}
+
+	public Vector2f getCenter() {
+		return center;
+	}
+
+	public void setCenter(Vector2f center) {
+		this.center = center;
+	}
+
+	public Vector2f getScale() {
+		return scale;
+	}
+
+	public void setScale(Vector2f scale) {
+		this.scale = scale;
+	}
+	
+	public Texture getTexture() {
+		return texture;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/utils/GU.java b/saveData/gameEngine/utils/GU.java
new file mode 100644
index 0000000..84a92e8
--- /dev/null
+++ b/saveData/gameEngine/utils/GU.java
@@ -0,0 +1,32 @@
+package utils;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+
+import res.Resource;
+import res.WritingResource;
+
+public class GU {
+	public static final Random random = new Random();
+
+	public static BufferedReader open(Resource resource) {
+		return new BufferedReader(new InputStreamReader(resource.asInputStream()));
+	}
+
+	public static PrintWriter open(WritingResource resource) {
+		return new PrintWriter(resource.asOutputStream());
+	}
+
+	public static class Random {
+		private final java.util.Random random = new java.util.Random();
+
+		public int genInt(int max) {
+			return random.nextInt(max);
+		}
+
+		public float genFloat() {
+			return random.nextFloat();
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/utils/GameLibrary.java b/saveData/gameEngine/utils/GameLibrary.java
new file mode 100644
index 0000000..a004475
--- /dev/null
+++ b/saveData/gameEngine/utils/GameLibrary.java
@@ -0,0 +1,4 @@
+package utils;
+
+public class GameLibrary {
+}
diff --git a/saveData/gameEngine/utils/Maths.java b/saveData/gameEngine/utils/Maths.java
new file mode 100644
index 0000000..80d0af5
--- /dev/null
+++ b/saveData/gameEngine/utils/Maths.java
@@ -0,0 +1,54 @@
+package utils;
+
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import camera.ICamera;
+import entities.Entity;
+
+public final class Maths {
+	private Maths() {
+	}
+	
+	public static float barryCentric(Vector3f p1, Vector3f p2, Vector3f p3, Vector2f pos) {
+		float det = (p2.z - p3.z) * (p1.x - p3.x) + (p3.x - p2.x) * (p1.z - p3.z);
+		float l1 = ((p2.z - p3.z) * (pos.x - p3.x) + (p3.x - p2.x) * (pos.y - p3.z)) / det;
+		float l2 = ((p3.z - p1.z) * (pos.x - p3.x) + (p1.x - p3.x) * (pos.y - p3.z)) / det;
+		float l3 = 1.0f - l1 - l2;
+		return l1 * p1.y + l2 * p2.y + l3 * p3.y;
+	}
+	
+	public static Matrix4f createTransformationMatrix(Vector3f position, float rotx, float roty, float rotz, float scale) {
+		Matrix4f matrix = new Matrix4f();
+		matrix.translate(position);
+		matrix.rotate((float) Math.toRadians(rotx), new Vector3f(1, 0, 0));
+		matrix.rotate((float) Math.toRadians(roty), new Vector3f(0, 1, 0));
+		matrix.rotate((float) Math.toRadians(rotz), new Vector3f(0, 0, 1));
+		matrix.scale(new Vector3f(scale, scale, scale));
+		return matrix;
+	}
+	
+	public static Matrix4f createTreansformationMatrix(Entity e) {
+		return createTransformationMatrix(e.getPosition(), e.getRotX(), e.getRotY(), e.getRotZ(), e.getScale());
+	}
+	
+	public static Matrix4f createViewMatrix(ICamera camera) {
+		Matrix4f matrix = new Matrix4f();
+		matrix.setIdentity();
+		matrix.rotate((float) Math.toRadians(camera.getRotX()), new Vector3f(1, 0, 0));
+		matrix.rotate((float) Math.toRadians(camera.getRotY()), new Vector3f(0, 1, 0));
+		matrix.rotate((float) Math.toRadians(camera.getRotZ()), new Vector3f(0, 0, 1));
+		Vector3f camPos = camera.getPosition();
+		Vector3f negCamPos = new Vector3f(-camPos.x, -camPos.y, -camPos.z);
+		matrix.translate(negCamPos);
+		return matrix;
+	}
+
+	public static Matrix4f createTransformationMatrix(Vector2f center, Vector2f scale) {
+		Matrix4f matrix = new Matrix4f();
+		matrix.translate(center);
+		matrix.scale(new Vector3f(scale.x, scale.y, 0.0f));
+		return matrix;
+	}
+}
diff --git a/saveData/gameEngine/water/WaterFBOs.java b/saveData/gameEngine/water/WaterFBOs.java
new file mode 100644
index 0000000..215abde
--- /dev/null
+++ b/saveData/gameEngine/water/WaterFBOs.java
@@ -0,0 +1,34 @@
+package water;
+
+import openglObjects.FBO;
+
+public class WaterFBOs {
+	private FBO reflexion;
+	private FBO refraction;
+	
+	public WaterFBOs() {
+		reflexion = new FBO(1200, 800, (FBO.COLOR_TEXTURE | FBO.DEPTH_RENDERBUFFER)).create();
+		refraction = new FBO(1200, 800, (FBO.COLOR_TEXTURE | FBO.DEPTH_TEXTURE)).create();
+	}
+
+	public FBO getReflexion() {
+		return reflexion;
+	}
+
+	public FBO getRefraction() {
+		return refraction;
+	}
+	
+	public void bindReflexion() {
+		reflexion.bind();
+	}
+	
+	public void bindRefraction() {
+		refraction.bind();
+	}
+	
+	public void cleanUp() {
+		reflexion.cleanUp();
+		refraction.cleanUp();
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/water/WaterTile.java b/saveData/gameEngine/water/WaterTile.java
new file mode 100644
index 0000000..f288eb7
--- /dev/null
+++ b/saveData/gameEngine/water/WaterTile.java
@@ -0,0 +1,110 @@
+package water;
+
+import openglObjects.VAO;
+import openglWorkers.DataPacking;
+import openglWorkers.VBOData;
+import terrain.Terrain;
+
+public class WaterTile {
+	public static WaterTile tile;
+	
+	private static final float TILE_SIZE = Terrain.SIZE / 2f;
+	private static final int VERTEX_COUNT = (int) (128f * (TILE_SIZE / 600f));
+
+	private float x, y, height;
+	private VAO model;
+
+	public WaterTile(float x, float y) {
+		this.x = x;
+		this.y = y;
+		model = createModel();
+		tile = this;
+	}
+
+	private VAO createModel() {
+		float[] vao_pos = new float[(VERTEX_COUNT - 1) * (VERTEX_COUNT - 1) * 12];
+		byte[] vao_indicators = new byte[vao_pos.length * 2];
+		int vertexPointer = 0;
+		for (int z = 0; z < VERTEX_COUNT - 1; z++) {
+			for (int x = 0; x < VERTEX_COUNT - 1; x++) {
+				vao_pos[vertexPointer * 12] = ((float) x / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 1] = ((float) z / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 2] = ((float) x / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 3] = (((float) z + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 4] = (((float) x + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 5] = ((float) z / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 6] = (((float) x + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 7] = ((float) z / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 8] = ((float) x / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 9] = (((float) z + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2 * TILE_SIZE;
+
+				vao_pos[vertexPointer * 12 + 10] = (((float) x + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2
+						* TILE_SIZE;
+				vao_pos[vertexPointer * 12 + 11] = (((float) z + 1) / ((float) VERTEX_COUNT - 1) - 0.5f) * 2
+						* TILE_SIZE;
+
+				vao_indicators[vertexPointer * 24] = 0;
+				vao_indicators[vertexPointer * 24 + 1] = 1;
+				vao_indicators[vertexPointer * 24 + 2] = 1;
+				vao_indicators[vertexPointer * 24 + 3] = 0;
+
+				vao_indicators[vertexPointer * 24 + 4] = 0;
+				vao_indicators[vertexPointer * 24 + 5] = -1;
+				vao_indicators[vertexPointer * 24 + 6] = 1;
+				vao_indicators[vertexPointer * 24 + 7] = -1;
+
+				vao_indicators[vertexPointer * 24 + 8] = -1;
+				vao_indicators[vertexPointer * 24 + 9] = 0;
+				vao_indicators[vertexPointer * 24 + 10] = -1;
+				vao_indicators[vertexPointer * 24 + 11] = 1;
+
+				vao_indicators[vertexPointer * 24 + 12] = -1;
+				vao_indicators[vertexPointer * 24 + 13] = 1;
+				vao_indicators[vertexPointer * 24 + 14] = 0;
+				vao_indicators[vertexPointer * 24 + 15] = 1;
+
+				vao_indicators[vertexPointer * 24 + 16] = 1;
+				vao_indicators[vertexPointer * 24 + 17] = -1;
+				vao_indicators[vertexPointer * 24 + 18] = 1;
+				vao_indicators[vertexPointer * 24 + 19] = 0;
+
+				vao_indicators[vertexPointer * 24 + 20] = 0;
+				vao_indicators[vertexPointer * 24 + 21] = -1;
+				vao_indicators[vertexPointer * 24 + 22] = -1;
+				vao_indicators[vertexPointer * 24 + 23] = 0;
+
+				vertexPointer++;
+			}
+		}
+		return DataPacking.storeDataInVAO(new VBOData(vao_pos).withAttributeNumber(0).withDimensions(2),
+				new VBOData(vao_indicators).withAttributeNumber(1).withDimensions(4));
+	}
+
+	public static float getTileSize() {
+		return TILE_SIZE;
+	}
+
+	public float getX() {
+		return x;
+	}
+
+	public float getY() {
+		return y;
+	}
+
+	public float getHeight() {
+		return height;
+	}
+
+	public VAO getModel() {
+		return model;
+	}
+
+	public static int getVertexCount() {
+		return VERTEX_COUNT;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/world/Biome.java b/saveData/gameEngine/world/Biome.java
new file mode 100644
index 0000000..4634446
--- /dev/null
+++ b/saveData/gameEngine/world/Biome.java
@@ -0,0 +1,25 @@
+package world;
+
+import org.lwjgl.util.vector.Vector3f;
+
+public enum Biome {
+	
+	FOREST(1, new Vector3f(0.02f, 0.678f, 0.22f)),
+	;
+	
+	private int biomeId;
+	private Vector3f color;
+	
+	private Biome(int biomeId, Vector3f color) {
+		this.biomeId = biomeId;
+		this.color = color;
+	}
+	
+	public int getId() {
+		return biomeId;
+	}
+
+	public Vector3f getColor() {
+		return color;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/world/World.java b/saveData/gameEngine/world/World.java
new file mode 100644
index 0000000..83a68e9
--- /dev/null
+++ b/saveData/gameEngine/world/World.java
@@ -0,0 +1,29 @@
+package world;
+
+import java.util.List;
+
+import entities.Entity;
+import terrain.Terrain;
+
+public class World {
+	private List<Entity> entities;
+	private Terrain terrain;
+
+	public World(List<Entity> entities, Terrain terrain) {
+		this.entities = entities;
+		this.terrain = terrain;
+	}
+	
+	public void update() {
+		for(Entity e : entities)
+			e.update(this);
+	}
+
+	public List<Entity> getEntities() {
+		return entities;
+	}
+
+	public Terrain getTerrain() {
+		return terrain;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/world/WorldGenerator.java b/saveData/gameEngine/world/WorldGenerator.java
new file mode 100644
index 0000000..11f0070
--- /dev/null
+++ b/saveData/gameEngine/world/WorldGenerator.java
@@ -0,0 +1,52 @@
+package world;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import components.Blueprint;
+import components.BlueprintCreator;
+import entities.Entity;
+import res.Resource;
+import terrain.Terrain;
+import utils.GU;
+import worldSave.LoadWorldMaster;
+
+public class WorldGenerator {
+	public static World generatedWorld = null;
+	private static final float TS = Terrain.SIZE / 2f;
+
+	public static World generateWorld() {
+		Resource resource = new Resource("saveData/save0.sav");
+		if (resource.exists()) {
+			generatedWorld = LoadWorldMaster.loadWorld(resource);
+			generatedWorld.getTerrain().initColors(generatedWorld.getEntities());
+		} else {
+			System.out.println("Save not found, generating new");
+			Terrain terrain = new Terrain();
+			List<Entity> entities = createEntities(terrain);
+			terrain.initColors(entities);
+			generatedWorld = new World(entities, terrain);
+		}
+		return generatedWorld;
+	}
+
+	private static List<Entity> createEntities(Terrain terrain) {
+		List<Entity> entities = new ArrayList<>();
+		Random random = new Random();
+		for (int i = 0; i < 1000; i++) {
+			float x = random.nextFloat() * 2f - 1f;
+			float z = random.nextFloat() * 2f - 1f;
+			x *= TS;
+			z *= TS;
+			float y = terrain.getHeight(x, z);
+			Vector3f pos = new Vector3f(x, y, z);
+			int type = GU.random.genInt(2);
+			Blueprint b = BlueprintCreator.createBlueprintFor(Integer.toString(1000 + type));
+			entities.add(new Entity(b, pos));
+		}
+		return entities;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/BlueprintData.java b/saveData/gameEngine/worldSave/BlueprintData.java
new file mode 100644
index 0000000..68ba809
--- /dev/null
+++ b/saveData/gameEngine/worldSave/BlueprintData.java
@@ -0,0 +1,19 @@
+package worldSave;
+
+import components.Blueprint;
+import components.BlueprintCreator;
+
+public class BlueprintData extends Data {
+	private static final long serialVersionUID = 8067084958250932904L;
+
+	private String objectName;
+
+	public void setObjectName(String objectName) {
+		this.objectName = objectName;
+	}
+
+	@Override
+	public Blueprint asInstance() {
+		return BlueprintCreator.createBlueprintFor(objectName);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/Data.java b/saveData/gameEngine/worldSave/Data.java
new file mode 100644
index 0000000..7dd1909
--- /dev/null
+++ b/saveData/gameEngine/worldSave/Data.java
@@ -0,0 +1,9 @@
+package worldSave;
+
+import java.io.Serializable;
+
+public abstract class Data implements Serializable {
+	private static final long serialVersionUID = -6430168927862876997L;
+	
+	public abstract Object asInstance();
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/EndObject.java b/saveData/gameEngine/worldSave/EndObject.java
new file mode 100644
index 0000000..8005270
--- /dev/null
+++ b/saveData/gameEngine/worldSave/EndObject.java
@@ -0,0 +1,7 @@
+package worldSave;
+
+import java.io.Serializable;
+
+class EndObject implements Serializable {
+	private static final long serialVersionUID = 512084690503224131L;
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/EntityData.java b/saveData/gameEngine/worldSave/EntityData.java
new file mode 100644
index 0000000..df55f87
--- /dev/null
+++ b/saveData/gameEngine/worldSave/EntityData.java
@@ -0,0 +1,25 @@
+package worldSave;
+
+import org.lwjgl.util.vector.Vector3f;
+
+import entities.Entity;
+
+public class EntityData extends Data {
+	private static final long serialVersionUID = -2117931221477865196L;
+	
+	private BlueprintData blueprintData;
+	private Vector3f position;
+
+	public void setBlueprintData(BlueprintData blueprintData) {
+		this.blueprintData = blueprintData;
+	}
+
+	public void setPosition(Vector3f position) {
+		this.position = position;
+	}
+
+	@Override
+	public Entity asInstance() {
+		return new Entity(blueprintData.asInstance(), position);
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/LoadWorldMaster.java b/saveData/gameEngine/worldSave/LoadWorldMaster.java
new file mode 100644
index 0000000..bbe9122
--- /dev/null
+++ b/saveData/gameEngine/worldSave/LoadWorldMaster.java
@@ -0,0 +1,37 @@
+package worldSave;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import entities.Entity;
+import res.Resource;
+import terrain.Terrain;
+import world.World;
+
+public class LoadWorldMaster {
+	public static  World loadWorld(Resource res) {
+		World world = null;
+		try {
+			ObjectInputStream stream = new ObjectInputStream(res.asInputStream());
+			Object o;
+			List<Entity> entities = new ArrayList<>();
+			Terrain terrain = null;
+			while(true) {
+				o = stream.readObject();
+				System.out.println(o);
+				if(o instanceof EntityData)
+					entities.add(((EntityData) o).asInstance());
+				else if(o instanceof TerrainData)
+					terrain = ((TerrainData) o).asInstance();
+				else if(o instanceof EndObject)
+					break;
+			}
+			world = new World(entities, terrain);
+		} catch (IOException | ClassNotFoundException e) {
+			e.printStackTrace();
+		}
+		return world;
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/SaveWorldMaster.java b/saveData/gameEngine/worldSave/SaveWorldMaster.java
new file mode 100644
index 0000000..d06c904
--- /dev/null
+++ b/saveData/gameEngine/worldSave/SaveWorldMaster.java
@@ -0,0 +1,24 @@
+package worldSave;
+
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+
+import entities.Entity;
+import res.WritingResource;
+import world.World;
+
+public class SaveWorldMaster {
+	public static void save(World world, WritingResource resource) {
+		ObjectOutputStream stream = null;
+		try {
+			stream = new ObjectOutputStream(resource.asOutputStream());
+			for (Entity entity : world.getEntities())
+				stream.writeObject(entity.asData());
+			stream.writeObject(world.getTerrain().asData());
+			stream.writeObject(new EndObject());
+			stream.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/SerializableWorldObject.java b/saveData/gameEngine/worldSave/SerializableWorldObject.java
new file mode 100644
index 0000000..6955c71
--- /dev/null
+++ b/saveData/gameEngine/worldSave/SerializableWorldObject.java
@@ -0,0 +1,5 @@
+package worldSave;
+
+public interface SerializableWorldObject {
+	public abstract Data asData();
+}
\ No newline at end of file
diff --git a/saveData/gameEngine/worldSave/TerrainData.java b/saveData/gameEngine/worldSave/TerrainData.java
new file mode 100644
index 0000000..03ec8b4
--- /dev/null
+++ b/saveData/gameEngine/worldSave/TerrainData.java
@@ -0,0 +1,18 @@
+package worldSave;
+
+import terrain.Terrain;
+
+public class TerrainData extends Data {
+	private static final long serialVersionUID = -7194655106968723919L;
+
+	private int seed;
+
+	public void setSeed(int seed) {
+		this.seed = seed;
+	}
+
+	@Override
+	public Terrain asInstance() {
+		return new Terrain(seed);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/display/DisplayManager.java b/saveData/renderEngine/display/DisplayManager.java
new file mode 100644
index 0000000..635d425
--- /dev/null
+++ b/saveData/renderEngine/display/DisplayManager.java
@@ -0,0 +1,55 @@
+package display;
+
+import org.lwjgl.LWJGLException;
+import org.lwjgl.Sys;
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.ContextAttribs;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
+import org.lwjgl.opengl.PixelFormat;
+
+import configuration.Config;
+import configuration.GameConfig;
+
+public class DisplayManager {
+
+	private static long lastFrameTime;
+	private static float delta;
+
+	public static void createDisplay() {
+		try {
+			if (GameConfig.getConfig(GameConfig.FULLSCREEN) == Config.TRUE)
+				Display.setFullscreen(true);
+			else
+				Display.setDisplayMode(new DisplayMode(1200, 800));
+			Display.setVSyncEnabled(true);
+			Display.create(new PixelFormat(),
+					new ContextAttribs(4, 3).withForwardCompatible(true).withProfileCore(true));
+			Mouse.create();
+			Keyboard.create();
+		} catch (LWJGLException e) {
+			e.printStackTrace();
+		}
+		lastFrameTime = getCurrentTime();
+	}
+
+	public static void updateDisplay() {
+		Display.update();
+		long currentTime = getCurrentTime();
+		delta = (currentTime - lastFrameTime) / 1000f;
+		lastFrameTime = currentTime;
+	}
+
+	public static void closeDisplay() {
+		Display.destroy();
+	}
+
+	private static long getCurrentTime() {
+		return Sys.getTime() * 1000 / Sys.getTimerResolution();
+	}
+
+	public static float getFrameTimeSeconds() {
+		return delta;
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/exceptions/FBOAttachmentException.java b/saveData/renderEngine/exceptions/FBOAttachmentException.java
new file mode 100644
index 0000000..5c45cc6
--- /dev/null
+++ b/saveData/renderEngine/exceptions/FBOAttachmentException.java
@@ -0,0 +1,19 @@
+package exceptions;
+
+import openglObjects.FBO;
+
+/**
+ * Thrown when attempting to render an effect from a FBO that doesn't have the right configuration
+ * @author Dinu B.
+ */
+public class FBOAttachmentException extends RenderException {
+	private static final long serialVersionUID = -4759771195837122461L;
+
+	public FBOAttachmentException(String message) {
+		super(message);
+	}
+	
+	public FBOAttachmentException(FBO fbo) {
+		this("The source got wrong configuration:" + fbo + " - configuration:" + fbo.getConfig());
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/exceptions/RenderException.java b/saveData/renderEngine/exceptions/RenderException.java
new file mode 100644
index 0000000..7dc3fd8
--- /dev/null
+++ b/saveData/renderEngine/exceptions/RenderException.java
@@ -0,0 +1,9 @@
+package exceptions;
+
+public abstract class RenderException extends RuntimeException {
+	private static final long serialVersionUID = -8430216383031558786L;
+
+	public RenderException(String message) {
+		super(message);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/openglObjects/FBO.java b/saveData/renderEngine/openglObjects/FBO.java
new file mode 100644
index 0000000..e21a034
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/FBO.java
@@ -0,0 +1,140 @@
+package openglObjects;
+
+import java.nio.ByteBuffer;
+
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL14;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL32;
+import org.lwjgl.util.vector.Vector2f;
+
+public class FBO implements IOpenGLObject {
+	public static final int COLOR_TEXTURE = 1; // 00000001
+	public static final int DEPTH_TEXTURE = 2; // 00000010
+	public static final int DEPTH_RENDERBUFFER = 4; // 00000100
+	
+	private final int id;
+	private int width;
+	private int height;
+	private int config;
+	private Texture tex;
+	private Texture depthTex;
+	private int depthRenderBufferId = -1;
+	
+	public FBO(int width, int height, int config) {
+		this.id = GL30.glGenFramebuffers();
+		this.width = width;
+		this.height = height;
+		this.config = config;
+	}
+	
+	public void init(int width, int height, int config) {
+		this.width = width;
+		this.height = height;
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, id);
+		GL11.glDrawBuffer(GL30.GL_COLOR_ATTACHMENT0);
+		if((config & COLOR_TEXTURE) != 0) {
+			int texId = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, texId);
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGB, width, height, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, (ByteBuffer) null);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+			GL32.glFramebufferTexture(GL30.GL_FRAMEBUFFER, GL30.GL_COLOR_ATTACHMENT0, texId, 0);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+			tex = new Texture(texId);
+		}
+		if((config & DEPTH_TEXTURE) != 0) {
+			int depthTexId = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, depthTexId);
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL14.GL_DEPTH_COMPONENT32, width, height, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (ByteBuffer) null);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+			GL32.glFramebufferTexture(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_ATTACHMENT, depthTexId, 0);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+			depthTex = new Texture(depthTexId);
+		}
+		if((config & DEPTH_RENDERBUFFER) != 0) {
+			depthRenderBufferId = GL30.glGenRenderbuffers();
+			GL30.glBindRenderbuffer(GL30.GL_RENDERBUFFER, depthRenderBufferId);
+			GL30.glRenderbufferStorage(GL30.GL_RENDERBUFFER, GL11.GL_DEPTH_COMPONENT, width, height);
+			GL30.glFramebufferRenderbuffer(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_ATTACHMENT, GL30.GL_RENDERBUFFER, depthRenderBufferId);
+			GL30.glBindRenderbuffer(GL30.GL_RENDERBUFFER, 0);
+		}
+		unbind();
+		this.config = config;
+	}
+	
+	public void bind() {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, id);
+		GL11.glViewport(0, 0, width, height);
+	}
+	
+	public static void unbind() {
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, 0);
+		GL11.glViewport(0, 0, Display.getWidth(), Display.getHeight());
+	}
+	
+	public Texture getTex() {
+		return tex;
+	}
+	
+	public Texture getDepthTex() {
+		return depthTex;
+	}
+	
+	public int getConfig() {
+		return config;
+	}
+	
+	public void cleanUp() {
+		if(tex != null)
+			tex.delete();
+		if(depthTex != null)
+			depthTex.delete();
+		if(depthRenderBufferId != -1)
+			GL30.glDeleteRenderbuffers(depthRenderBufferId);
+		GL30.glDeleteFramebuffers(id);
+	}
+
+	public Vector2f getSize() {
+		return new Vector2f(width, height);
+	}
+	
+	public void blitToScreen() {
+		GL30.glBindFramebuffer(GL30.GL_DRAW_FRAMEBUFFER, 0);
+		GL11.glDrawBuffer(GL11.GL_BACK);
+		GL30.glBindFramebuffer(GL30.GL_READ_FRAMEBUFFER, id);
+		GL11.glReadBuffer(GL30.GL_COLOR_ATTACHMENT0);
+		GL30.glBlitFramebuffer(0, 0, width, height, 0, 0, Display.getWidth(), Display.getHeight(),
+				GL11.GL_COLOR_BUFFER_BIT, GL11.GL_NEAREST);
+		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, 0);
+	}
+
+	public void clear(int mask) {
+		GL11.glClear(mask);
+	}
+
+	@Override
+	public FBO create() {
+		this.init(width, height, config);
+		return this;
+	}
+
+	@Override
+	public void delete() {
+		if(tex != null)
+			tex.delete();
+		if(depthTex != null)
+			depthTex.delete();
+		if(depthRenderBufferId != -1)
+			GL30.glDeleteRenderbuffers(depthRenderBufferId);
+		GL30.glDeleteFramebuffers(id);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/openglObjects/IOpenGLObject.java b/saveData/renderEngine/openglObjects/IOpenGLObject.java
new file mode 100644
index 0000000..222df33
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/IOpenGLObject.java
@@ -0,0 +1,9 @@
+package openglObjects;
+
+public interface IOpenGLObject {
+	public abstract IOpenGLObject create();
+
+	public abstract void delete();
+
+	public abstract int getID();
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/openglObjects/IRenderable.java b/saveData/renderEngine/openglObjects/IRenderable.java
new file mode 100644
index 0000000..888f664
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/IRenderable.java
@@ -0,0 +1,7 @@
+package openglObjects;
+
+public interface IRenderable {
+	public abstract void render();
+	
+	public abstract void batchRenderCall();
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/openglObjects/Texture.java b/saveData/renderEngine/openglObjects/Texture.java
new file mode 100644
index 0000000..2e1ac76
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/Texture.java
@@ -0,0 +1,92 @@
+package openglObjects;
+
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.imageio.ImageIO;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL13;
+
+import res.Resource;
+
+public class Texture implements IOpenGLObject {
+	private static List<Texture> textures = new ArrayList<>();
+
+	private Resource resource;
+	private int id;
+
+	public Texture(String location) {
+		this(new Resource(location));
+	}
+
+	public Texture(Resource resource) {
+		this.resource = resource;
+	}
+
+	public Texture(int id) {
+		this.id = id;
+	}
+
+	public Texture create() {
+		BufferedImage asImage = null;
+		if (resource.exists()) {
+			try {
+				asImage = ImageIO.read(resource.asInputStream());
+			} catch (IOException e) {
+				e.printStackTrace();
+				return null;
+			}
+			int width = asImage.getWidth();
+			int height = asImage.getHeight();
+			int[] pixels_raw = asImage.getRGB(0, 0, width, height, null, 0, height);
+			ByteBuffer pixels = BufferUtils.createByteBuffer(width * height * 4);
+			for (int y = height - 1; y >= 0; y--)
+				for (int x = 0; x < width; x++) {
+					int pixel = pixels_raw[y * width + x];
+					pixels.put((byte) ((pixel >> 16) & 0xFF));
+					pixels.put((byte) ((pixel >> 8) & 0xFF));
+					pixels.put((byte) (pixel & 0xFF));
+					pixels.put((byte) ((pixel >> 24) & 0xFF));
+				}
+			pixels.flip();
+
+			id = GL11.glGenTextures();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0, GL11.GL_RGBA,
+					GL11.GL_UNSIGNED_BYTE, pixels);
+			
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+
+			return this;
+		} else
+			return null;
+	}
+
+	public void bindToTextureUnit(int texUnit) {
+		GL13.glActiveTexture(GL13.GL_TEXTURE0 + texUnit);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+	}
+	
+	@Override
+	public void delete() {
+		GL11.glDeleteTextures(id);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+	
+	public static void cleanUp() {
+		for(Texture tex : textures)
+			tex.delete();
+	}
+}
diff --git a/saveData/renderEngine/openglObjects/TexturedVAO.java b/saveData/renderEngine/openglObjects/TexturedVAO.java
new file mode 100644
index 0000000..6e5d453
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/TexturedVAO.java
@@ -0,0 +1,28 @@
+package openglObjects;
+
+public class TexturedVAO extends VAO {
+
+	private Texture texture;
+
+	public TexturedVAO(Texture texture, VAO vao) {
+		super(vao.getId(), vao.getVertexCount(), vao.getBuffers(), vao.hasIndices());
+		this.texture = texture;
+	}
+
+	public Texture getTexture() {
+		return texture;
+	}
+	
+	@Override
+	public void render() {
+		bind();
+		batchRenderCall();
+		unbind();
+	}
+	
+	@Override
+	public void bind() {
+		super.bind();
+		texture.bindToTextureUnit(0);
+	}
+}
diff --git a/saveData/renderEngine/openglObjects/VAO.java b/saveData/renderEngine/openglObjects/VAO.java
new file mode 100644
index 0000000..836762c
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/VAO.java
@@ -0,0 +1,118 @@
+package openglObjects;
+
+import java.util.Map;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL30;
+
+public class VAO implements IOpenGLObject, IRenderable {
+	private static int nextId = 1;
+	
+	private int id;
+	private int vertexCount;
+	private Map<Integer, Integer> vbos;
+
+	private boolean hasIndices;
+
+	public VAO(int id, int vertexCount, Map<Integer, Integer> current, boolean hasIndices) {
+		this.id = id;
+		this.vertexCount = vertexCount;
+		this.vbos = current;
+		this.hasIndices = hasIndices;
+	}
+
+	public VAO() {
+	}
+
+	public int getId() {
+		return id;
+	}
+
+	public int getVertexCount() {
+		return vertexCount;
+	}
+
+	public void setId(int id) {
+		this.id = id;
+	}
+
+	public void setVertexCount(int vertexCount) {
+		this.vertexCount = vertexCount;
+	}
+
+	public void setVbos(Map<Integer, Integer> vbos) {
+		this.vbos = vbos;
+	}
+	
+	public void setHasIndices(boolean hasIndices) {
+		this.hasIndices = hasIndices;
+	}
+
+	public void cleanUp() {
+		GL30.glDeleteVertexArrays(id);
+		for (int buffer : vbos.values())
+			GL15.glDeleteBuffers(buffer);
+	}
+
+	public Map<Integer, Integer> getBuffers() {
+		return vbos;
+	}
+
+	public void bind() {
+		GL30.glBindVertexArray(id);
+		for (int attn : vbos.keySet())
+			GL20.glEnableVertexAttribArray(attn);
+	}
+
+	public void unbind() {
+		for (int attn : vbos.keySet())
+			GL20.glDisableVertexAttribArray(attn);
+		GL30.glBindVertexArray(0);
+	}
+
+	public static int getNext() {
+		return nextId;
+	}
+
+	public static void addOneToNext() {
+		nextId = nextId + 1;
+	}
+
+	@Override
+	public VAO create() {
+		return this;
+	}
+
+	@Override
+	public void delete() {
+		GL30.glDeleteVertexArrays(id);
+		for (int buffer : vbos.values())
+			GL15.glDeleteBuffers(buffer);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+
+	@Override
+	public void render() {
+		bind();
+		batchRenderCall();
+		unbind();
+	}
+
+	@Override
+	public void batchRenderCall() {
+		if(hasIndices)
+			GL11.glDrawElements(GL11.GL_TRIANGLES, vertexCount, GL11.GL_UNSIGNED_INT, 0);
+		else
+			GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, vertexCount);
+	}
+
+	public boolean hasIndices() {
+		return hasIndices;
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/openglObjects/VBO.java b/saveData/renderEngine/openglObjects/VBO.java
new file mode 100644
index 0000000..483f968
--- /dev/null
+++ b/saveData/renderEngine/openglObjects/VBO.java
@@ -0,0 +1,30 @@
+package openglObjects;
+
+import org.lwjgl.opengl.GL15;
+
+public class VBO implements IOpenGLObject {
+	private final int id;
+
+	public VBO(int id) {
+		this.id = id;
+	}
+
+	public int getId() {
+		return id;
+	}
+
+	@Override
+	public IOpenGLObject create() {
+		return this;
+	}
+
+	@Override
+	public void delete() {
+		GL15.glDeleteBuffers(id);
+	}
+
+	@Override
+	public int getID() {
+		return id;
+	}
+}
diff --git a/saveData/renderEngine/openglWorkers/DataPacking.java b/saveData/renderEngine/openglWorkers/DataPacking.java
new file mode 100644
index 0000000..cf8f951
--- /dev/null
+++ b/saveData/renderEngine/openglWorkers/DataPacking.java
@@ -0,0 +1,136 @@
+package openglWorkers;
+
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL30;
+
+import openglObjects.VAO;
+import openglObjects.VBO;
+import parallelComputing.CreateVAORequest;
+import parallelComputing.ThreadMaster;
+import parallelComputing.VAOUpdateRequest;
+
+public class DataPacking {
+	private static final Map<Integer, Map<Integer, Integer>> vaos = new HashMap<>();
+	private static final List<Integer> vbos = new ArrayList<>();
+
+	public static VAO storeDataInVAO(VBOData... data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			int vaoId = GL30.glGenVertexArrays(), vertexCount = -1;
+			boolean hasIndices = false;
+			Map<Integer, Integer> current = new HashMap<>();
+			vaos.put(vaoId, current);
+			GL30.glBindVertexArray(vaoId);
+			for (VBOData d : data) {
+				int vboId = GL15.glGenBuffers();
+				current.put(d.getAttributeNumber(), vboId);
+				VBO vbo = new VBO(vboId);
+				d.store(vbo);
+				if (d.isIndices()) {
+					hasIndices = true;
+					vertexCount = d.getLength();
+				}
+			}
+			if (vertexCount == -1)
+				vertexCount = data[0].getLength() / data[0].getDimensions();
+			GL30.glBindVertexArray(0);
+			return new VAO(vaoId, vertexCount, current, hasIndices);
+		} else {
+			VAO target = new VAO();
+			ThreadMaster.getThread("main thread")
+					.setToCarryOutRequest(new CreateVAORequest("create vao", data, target));
+			return target;
+		}
+	}
+
+	public static void cleanUp() {
+		for (int vao : vaos.keySet()) {
+			GL30.glDeleteVertexArrays(vao);
+			for (int vbo : vaos.get(vao).values())
+				GL15.glDeleteBuffers(vbo);
+		}
+		for (int vbo : vbos)
+			GL15.glDeleteBuffers(vbo);
+	}
+
+	public static void replace(VAO model, int attn, float[] data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vaos.get(model.getId()).get(attn));
+			FloatBuffer dt = storeDataInFloatBuffer(data);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, 0, dt);
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+		} else {
+			ThreadMaster.getThread("main thread").setToCarryOutRequest(
+					new VAOUpdateRequest("update vao", new VBOUpdateData(data).withAttToWriteTo(attn), model));
+		}
+	}
+
+	public static void replace(VAO model, int attn, int[] data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vaos.get(model.getId()).get(attn));
+			IntBuffer dt = storeDataInIntBuffer(data);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, 0, dt);
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+		} else {
+			ThreadMaster.getThread("main thread").setToCarryOutRequest(
+					new VAOUpdateRequest("update vao", new VBOUpdateData(data).withAttToWriteTo(attn), model));
+		}
+	}
+
+	public static void replace(VAO model, int attn, byte[] data) {
+		if (Thread.currentThread().getName().equals("main thread")) {
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vaos.get(model.getId()).get(attn));
+			ByteBuffer dt = storeDataInByteBuffer(data);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, 0, dt);
+			GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+		} else {
+			ThreadMaster.getThread("main thread").setToCarryOutRequest(
+					new VAOUpdateRequest("update vao", new VBOUpdateData(data).withAttToWriteTo(attn), model));
+		}
+	}
+
+	public static void createVAOAndStore(VAO vao, VBOData... data) {
+		int vaoId = GL30.glGenVertexArrays(), vertexCount = -1;
+		boolean hasIndices = false;
+		Map<Integer, Integer> current = new HashMap<>();
+		vaos.put(vaoId, current);
+		GL30.glBindVertexArray(vaoId);
+		for (VBOData d : data) {
+			int vboId = GL15.glGenBuffers();
+			current.put(d.getAttributeNumber(), vboId);
+			VBO vbo = new VBO(vboId);
+			d.store(vbo);
+			if (d.isIndices()) {
+				vertexCount = d.getLength();
+				hasIndices = true;
+			}
+		}
+		if (vertexCount == -1)
+			vertexCount = data[0].getLength() / data[0].getDimensions();
+		GL30.glBindVertexArray(0);
+		vao.setId(vaoId);
+		vao.setVertexCount(vertexCount);
+		vao.setVbos(current);
+		vao.setHasIndices(hasIndices);
+	}
+
+	private static FloatBuffer storeDataInFloatBuffer(float[] data) {
+		return (FloatBuffer) BufferUtils.createFloatBuffer(data.length).put(data).flip();
+	}
+
+	private static IntBuffer storeDataInIntBuffer(int[] data) {
+		return (IntBuffer) BufferUtils.createIntBuffer(data.length).put(data).flip();
+	}
+
+	private static ByteBuffer storeDataInByteBuffer(byte[] data) {
+		return (ByteBuffer) BufferUtils.createByteBuffer(data.length).put(data).flip();
+	}
+}
diff --git a/saveData/renderEngine/openglWorkers/ModelsLibrary.java b/saveData/renderEngine/openglWorkers/ModelsLibrary.java
new file mode 100644
index 0000000..b23d815
--- /dev/null
+++ b/saveData/renderEngine/openglWorkers/ModelsLibrary.java
@@ -0,0 +1,30 @@
+package openglWorkers;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import obj.OBJLoader;
+import openglObjects.VAO;
+
+public class ModelsLibrary {
+	private static Map<String, VAO> models = new HashMap<>();
+	
+	public static VAO createEmptyVAO(String objFile) {
+		return getModel(objFile);
+	}
+	
+	public static void cleanUp() {
+		for(VAO vao : models.values()) {
+			vao.cleanUp();
+		}
+	}
+
+	public static VAO getModel(String name) {
+		VAO model = models.get(name);
+		if(model == null) {
+			model = OBJLoader.loadObj(name);
+			models.put(name, model);
+		}
+		return model;
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/openglWorkers/VBOData.java b/saveData/renderEngine/openglWorkers/VBOData.java
new file mode 100644
index 0000000..5387920
--- /dev/null
+++ b/saveData/renderEngine/openglWorkers/VBOData.java
@@ -0,0 +1,121 @@
+package openglWorkers;
+
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20;
+
+import openglObjects.VBO;
+
+public class VBOData {
+	private final float[] dataf;
+	private final int[] datai;
+	private final byte[] datab;
+	
+	private final int type;
+	private int attNumber = -1;
+	private boolean isIndices;
+	private int gl_type;
+	private int dimensions;
+	private int usage = GL15.GL_STATIC_DRAW;
+	
+	public VBOData(float[] data) {
+		dataf = data;
+		datai = null;
+		datab = null;
+		type = 0;
+		gl_type = GL11.GL_FLOAT;
+	}
+	
+	public VBOData(int[] data) {
+		dataf = null;
+		datai = data;
+		datab = null;
+		type = 1;
+		gl_type = GL11.GL_INT;
+	}
+	
+	public VBOData(byte[] data) {
+		dataf = null;
+		datai = null;
+		datab = data;
+		type = 2;
+		gl_type = GL11.GL_BYTE;
+	}
+	
+	public VBOData withUsage(int usage) {
+		this.usage = usage;
+		return this;
+	}
+	
+	public VBOData withDimensions(int dimensions) {
+		this.dimensions = dimensions;
+		return this;
+	}
+	
+	public VBOData isIndices(boolean isIndices) {
+		this.isIndices = isIndices;
+		return this;
+	}
+	
+	public VBOData withAttributeNumber(int attributeNumber) {
+		this.attNumber = attributeNumber;
+		return this;
+	}
+	
+	public void store(VBO vbo) {
+		int type = (isIndices ? GL15.GL_ELEMENT_ARRAY_BUFFER : GL15.GL_ARRAY_BUFFER);
+		GL15.glBindBuffer(type, vbo.getId());
+		if(this.type == 0) {
+			FloatBuffer data = storeDataInFloatBuffer(dataf);
+			GL15.glBufferData(type, data, usage);
+			data.clear();
+		}
+		else if(this.type == 1) {
+			IntBuffer data = storeDataInIntBuffer(datai);
+			GL15.glBufferData(type, data, usage);
+			data.clear();
+		}
+		else if(this.type == 2) {
+			ByteBuffer data = storeDataInByteBuffer(datab);
+			GL15.glBufferData(type, data, usage);
+			data.clear();
+		}
+		if(attNumber != -1) {
+			GL20.glVertexAttribPointer(attNumber, dimensions, this.gl_type, false, 0, 0);
+			GL15.glBindBuffer(type, 0);
+		}
+	}
+
+	private FloatBuffer storeDataInFloatBuffer(float[] data) {
+		return (FloatBuffer) BufferUtils.createFloatBuffer(data.length).put(data).flip();
+	}
+
+	private IntBuffer storeDataInIntBuffer(int[] data) {
+		return (IntBuffer) BufferUtils.createIntBuffer(data.length).put(data).flip();
+	}
+
+	private ByteBuffer storeDataInByteBuffer(byte[] data) {
+		return (ByteBuffer) BufferUtils.createByteBuffer(data.length).put(data).flip();
+	}
+
+	public boolean isIndices() {
+		return isIndices;
+	}
+
+	public int getLength() {
+		return (dataf != null ? dataf.length : (datab != null ? datab.length : datai.length));
+	}
+
+	public int getDimensions() {
+		return dimensions;
+	}
+
+	public int getAttributeNumber() {
+		return attNumber;
+	}
+}
diff --git a/saveData/renderEngine/openglWorkers/VBOUpdateData.java b/saveData/renderEngine/openglWorkers/VBOUpdateData.java
new file mode 100644
index 0000000..073f4f3
--- /dev/null
+++ b/saveData/renderEngine/openglWorkers/VBOUpdateData.java
@@ -0,0 +1,78 @@
+package openglWorkers;
+
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL15;
+
+import openglObjects.VAO;
+
+public class VBOUpdateData {
+	private final float[] dataf;
+	private final int[] datai;
+	private final byte[] datab;
+	private final int type;
+	
+	private int attToWriteTo;
+	private long begin;
+
+	public VBOUpdateData(float[] data) {
+		this.dataf = data;
+		this.datai = null;
+		this.datab = null;
+		type = 0;
+	}
+
+	public VBOUpdateData(int[] data) {
+		this.dataf = null;
+		this.datai = data;
+		this.datab = null;
+		type = 1;
+	}
+
+	public VBOUpdateData(byte[] data) {
+		this.dataf = null;
+		this.datai = null;
+		this.datab = data;
+		type = 2;
+	}
+	
+	public VBOUpdateData withAttToWriteTo(int attToWriteTo) {
+		this.attToWriteTo = attToWriteTo;
+		return this;
+	}
+	
+	public void updateWithin(VAO vao) {
+		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vao.getBuffers().get(attToWriteTo));
+		if(type == 0) {
+			FloatBuffer buffer = storeDataInFloatBuffer(dataf);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, begin, buffer);
+			buffer.clear();
+		}
+		if(type == 1) {
+			IntBuffer buffer = storeDataInIntBuffer(datai);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, begin, buffer);
+			buffer.clear();
+		}
+		if(type == 2) {
+			ByteBuffer buffer = storeDataInByteBuffer(datab);
+			GL15.glBufferSubData(GL15.GL_ARRAY_BUFFER, begin, buffer);
+			buffer.clear();
+		}
+		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+	}
+
+	private static FloatBuffer storeDataInFloatBuffer(float[] data) {
+		return (FloatBuffer) BufferUtils.createFloatBuffer(data.length).put(data).flip();
+	}
+
+	private static IntBuffer storeDataInIntBuffer(int[] data) {
+		return (IntBuffer) BufferUtils.createIntBuffer(data.length).put(data).flip();
+	}
+
+	private static ByteBuffer storeDataInByteBuffer(byte[] data) {
+		return (ByteBuffer) BufferUtils.createByteBuffer(data.length).put(data).flip();
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/renderers/Blurer.java b/saveData/renderEngine/renderers/Blurer.java
new file mode 100644
index 0000000..af0a5a7
--- /dev/null
+++ b/saveData/renderEngine/renderers/Blurer.java
@@ -0,0 +1,108 @@
+package renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL30;
+
+import exceptions.FBOAttachmentException;
+import openglObjects.FBO;
+import openglObjects.VAO;
+import shaders.HBlurShader;
+import shaders.VBlurShader;
+
+public class Blurer extends EffectRenderer {
+
+	private FBO helper;
+	private VBlurer vblurer;
+	private HBlurer hblurer;
+
+	public Blurer(VAO quad) {
+		super(null, quad);
+		helper = new FBO(1200, 800, (FBO.COLOR_TEXTURE)).create();
+		vblurer = new VBlurer(new VBlurShader(), quad);
+		hblurer = new HBlurer(new HBlurShader(), quad);
+	}
+
+	@Override
+	public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+		if ((source.getConfig() & 1) != 1)
+			throw new FBOAttachmentException(source);
+		hblurer.apply(source, helper);
+		vblurer.apply(helper, destination);
+	}
+
+	@Override
+	public void cleanUp() {
+		helper.cleanUp();
+		vblurer.cleanUp();
+		hblurer.cleanUp();
+	}
+
+	private class VBlurer extends EffectRenderer {
+		private VBlurShader shader;
+
+		VBlurer(VBlurShader shader, VAO quad) {
+			super(shader, quad);
+			this.shader = shader;
+		}
+
+		@Override
+		public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+			if (destination != null) {
+				destination.bind();
+			} else {
+				FBO.unbind();
+			}
+			MasterRenderer.prepare();
+
+			shader.start();
+			shader.size.load(source.getSize());
+
+			GL30.glBindVertexArray(quad.getId());
+			GL20.glEnableVertexAttribArray(0);
+
+			source.getTex().bindToTextureUnit(0);
+
+			GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+
+			GL20.glDisableVertexAttribArray(0);
+			GL30.glBindVertexArray(0);
+
+			shader.stop();
+
+			if (destination != null)
+				FBO.unbind();
+		}
+	}
+
+	private class HBlurer extends EffectRenderer {
+		private HBlurShader shader;
+
+		HBlurer(HBlurShader shader, VAO quad) {
+			super(shader, quad);
+			this.shader = shader;
+		}
+
+		@Override
+		public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+			destination.bind();
+			MasterRenderer.prepare();
+
+			shader.start();
+			shader.size.load(source.getSize());
+
+			GL30.glBindVertexArray(quad.getId());
+			GL20.glEnableVertexAttribArray(0);
+
+			source.getTex().bindToTextureUnit(0);
+
+			GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+			GL20.glDisableVertexAttribArray(0);
+			GL30.glBindVertexArray(0);
+
+			shader.stop();
+
+			FBO.unbind();
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/renderers/DepthFieldBlurRenderer.java b/saveData/renderEngine/renderers/DepthFieldBlurRenderer.java
new file mode 100644
index 0000000..108750e
--- /dev/null
+++ b/saveData/renderEngine/renderers/DepthFieldBlurRenderer.java
@@ -0,0 +1,55 @@
+package renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Vector2f;
+
+import exceptions.FBOAttachmentException;
+import openglObjects.FBO;
+import openglObjects.Texture;
+import openglObjects.VAO;
+import shaders.DepthFieldBlurShader;
+
+public class DepthFieldBlurRenderer extends EffectRenderer {
+	private DepthFieldBlurShader shader;
+	private Texture bluredTexture;
+
+	public DepthFieldBlurRenderer(DepthFieldBlurShader shader, VAO quad) {
+		super(shader, quad);
+		this.shader = shader;
+		shader.start();
+		shader.connectTextureUnits();
+		shader.nearFarPlanes.load(new Vector2f(MasterRenderer.NEAR_PLANE, MasterRenderer.FAR_PLANE));
+		shader.stop();
+	}
+
+	public void setBluredTexture(Texture bluredTexture) {
+		this.bluredTexture = bluredTexture;
+	}
+
+	@Override
+	public void apply(FBO source, FBO destination) throws FBOAttachmentException {
+		if (destination != null) {
+			destination.bind();
+		} else
+			FBO.unbind();
+		MasterRenderer.prepare();
+		if ((source.getConfig() & 3) != 3)
+			throw new FBOAttachmentException(
+					"The source got wrong configuration:" + source + " - configuration:" + source.getConfig());
+
+		shader.start();
+		
+		source.getTex().bindToTextureUnit(0);
+		source.getDepthTex().bindToTextureUnit(1);
+		bluredTexture.bindToTextureUnit(2);
+		
+		quad.bind();
+		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+		quad.unbind();
+
+		shader.stop();
+
+		if (destination != null)
+			FBO.unbind();
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/renderers/EffectRenderer.java b/saveData/renderEngine/renderers/EffectRenderer.java
new file mode 100644
index 0000000..c599c92
--- /dev/null
+++ b/saveData/renderEngine/renderers/EffectRenderer.java
@@ -0,0 +1,22 @@
+package renderers;
+
+import exceptions.FBOAttachmentException;
+import openglObjects.FBO;
+import openglObjects.VAO;
+import shaders.ShaderProgram;
+
+public abstract class EffectRenderer {
+	protected ShaderProgram shader;
+	protected VAO quad;
+	
+	public EffectRenderer(ShaderProgram shader, VAO quad) {
+		this.shader = shader;
+		this.quad = quad;
+	}
+	
+	public void cleanUp() {
+		shader.cleanUp();
+	}
+	
+	public abstract void apply(FBO source, FBO destination) throws FBOAttachmentException;
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/renderers/GUIRenderer.java b/saveData/renderEngine/renderers/GUIRenderer.java
new file mode 100644
index 0000000..f87b798
--- /dev/null
+++ b/saveData/renderEngine/renderers/GUIRenderer.java
@@ -0,0 +1,52 @@
+package renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import openglObjects.Texture;
+import openglObjects.VAO;
+import shaders.GUIShader;
+import ui.GUITexture;
+import utils.Maths;
+
+public class GUIRenderer {
+	public static final Vector3f TRANSPARENCY = new Vector3f(1.0f, 0.016f, 0.839f);
+	private GUIShader shader;
+	private VAO quad;
+	
+	public GUIRenderer(GUIShader shader, VAO quad) {
+		this.shader = shader;
+		this.quad = quad;
+	}
+	
+	public void render(GUITexture texture) {
+		bind();
+		batchRenderCall(texture);
+		unbind();
+	}
+	
+	protected void batchRenderCall(GUITexture texture) {
+		texture.getTexture().bindToTextureUnit(0);
+		shader.transformationMatrix.load(Maths.createTransformationMatrix(texture.getCenter(), texture.getScale()));
+		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+	}
+	
+	protected void batchRenderCall(Vector2f center, Vector2f scale, Texture tex) {
+		tex.bindToTextureUnit(0);
+		shader.transformationMatrix.load(Maths.createTransformationMatrix(center, scale));
+		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+	}
+	
+	protected void bind() {
+		GL11.glDisable(GL11.GL_DEPTH_TEST);
+		shader.start();
+		quad.bind();
+	}
+	
+	protected void unbind() {
+		quad.unbind();
+		shader.stop();
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/renderers/MainMenuRenderer.java b/saveData/renderEngine/renderers/MainMenuRenderer.java
new file mode 100644
index 0000000..5ac537f
--- /dev/null
+++ b/saveData/renderEngine/renderers/MainMenuRenderer.java
@@ -0,0 +1,49 @@
+package renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Vector2f;
+
+import entities.Entity;
+import mainMenu.MainMenu;
+import mainMenu.MainMenuButton;
+import openglObjects.FBO;
+import shaders.MenuDNAShader;
+import utils.Maths;
+
+public class MainMenuRenderer {
+	private GUIRenderer guiRenderer;
+	private FBO DNAFBO;
+	private MenuDNAShader shader;
+
+	public MainMenuRenderer(GUIRenderer guiRenderer) {
+		this.guiRenderer = guiRenderer;
+		DNAFBO = new FBO(600, 800, FBO.COLOR_TEXTURE | FBO.DEPTH_RENDERBUFFER).create();
+		shader = new MenuDNAShader();
+		shader.start();
+		shader.projectionMatrix.load(MasterRenderer.instance.getProjectionMatrix());
+		shader.stop();
+	}
+
+	public void render(MainMenu menu) {
+		DNAFBO.bind();
+		GL11.glClearColor(GUIRenderer.TRANSPARENCY.x, GUIRenderer.TRANSPARENCY.y, GUIRenderer.TRANSPARENCY.z, 0f);
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+		shader.start();
+		Entity DNA = menu.getDNA();
+		DNA.getModel().bind();
+		shader.transformationMatrix.load(Maths.createTreansformationMatrix(DNA));
+		DNA.getModel().batchRenderCall();
+		DNA.getModel().unbind();
+		shader.stop();
+		FBO.unbind();
+		guiRenderer.bind();
+		guiRenderer.batchRenderCall(new Vector2f(-0.8f, 0.0f), new Vector2f(0.4f, 1f), DNAFBO.getTex());
+		for (MainMenuButton button : menu.getButtons())
+			guiRenderer.batchRenderCall(button.getCenter(), button.getScale(), button.getTex());
+		guiRenderer.unbind();
+	}
+
+	public void cleanUp() {
+		shader.cleanUp();
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/renderers/MasterRenderer.java b/saveData/renderEngine/renderers/MasterRenderer.java
new file mode 100644
index 0000000..2b789c9
--- /dev/null
+++ b/saveData/renderEngine/renderers/MasterRenderer.java
@@ -0,0 +1,173 @@
+package renderers;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import camera.ICamera;
+import display.DisplayManager;
+import entities.Entity;
+import entities.Light;
+import openglObjects.VAO;
+import openglWorkers.DataPacking;
+import openglWorkers.VBOData;
+import shaders.StaticShader;
+import shaders.TerrainShader;
+import terrain.Terrain;
+import utils.Maths;
+import world.World;
+
+public class MasterRenderer {
+	private static final float FOV = 70;
+	protected static final float NEAR_PLANE = 0.1f, FAR_PLANE = 1000f;
+	protected static final float RED = 0.435f, GREEN = 0.812f, BLUE = 1.0f;
+	protected static final Vector2f FOG_VALUES = new Vector2f(0.0015f, 5.0f);
+	
+	private static final float TIME_SPEED = 1f;
+	private static final float INCREASE_LIMIT = 1f;
+
+	public static final List<VAO> standardModels = new ArrayList<>();
+	public static MasterRenderer instance;
+
+	public static void initStandardModels() {
+		VAO vao = DataPacking.storeDataInVAO(
+				new VBOData(new float[] { -1, 1, -1, -1, 1, 1, 1, -1, }).withAttributeNumber(0).withDimensions(2));
+		standardModels.add(vao);
+	}
+
+	private StaticShader shader = new StaticShader();
+	private Renderer renderer;
+
+	private TerrainShader terrainShader = new TerrainShader();
+	private TerrainRenderer terrainRenderer;
+
+	private Matrix4f projectionMatrix;
+
+	private Map<VAO, List<Entity>> entities = new HashMap<>();
+
+	private Terrain terrain;
+	
+	private float time;
+	private boolean inc;
+
+	public MasterRenderer() {
+		instance = this;
+		createProjectionMatrix();
+		renderer = new Renderer(shader, projectionMatrix);
+		terrainRenderer = new TerrainRenderer(terrainShader, projectionMatrix);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+	}
+
+	public static void prepare() {
+		GL11.glClearColor(RED, GREEN, BLUE, 1.0f);
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+	}
+
+	public void renderScene(World world, ICamera camera, Light light, Vector4f clipPlane, boolean updateTime) {
+		prepare();
+		for (Entity e : world.getEntities())
+			process(e);
+		process(world.getTerrain());
+		render(camera, light, clipPlane, updateTime);
+	}
+
+	public void process(Entity e) {
+		VAO model = e.getModel();
+		List<Entity> bash = entities.get(model);
+		if (bash == null) {
+			bash = new ArrayList<>();
+			entities.put(model, bash);
+		}
+		bash.add(e);
+	}
+
+	public void process(Terrain terrain) {
+		this.terrain = terrain;
+	}
+
+	public void render(ICamera camera, Light sun, Vector4f clipPlane, boolean updateTime) {
+		Matrix4f viewMatrix = Maths.createViewMatrix(camera);
+		shader.start();
+		if(updateTime) {
+			time += TIME_SPEED * DisplayManager.getFrameTimeSeconds() * (inc ? 1f : -1f);
+			time = time(time);
+			shader.time.load(time);
+		}
+		shader.skyColor.load(new Vector3f(RED, GREEN, BLUE));
+		shader.fogValues.load(FOG_VALUES);
+		shader.light.load(sun);
+		shader.viewMatrix.load(viewMatrix);
+		shader.clipPlane.load(clipPlane);
+		renderer.render(entities);
+		shader.stop();
+		entities.clear();
+
+		terrainShader.start();
+		terrainShader.skyColor.load(new Vector3f(RED, GREEN, BLUE));
+		terrainShader.fogValues.load(FOG_VALUES);
+		terrainShader.light.load(sun);
+		terrainShader.viewMatrix.load(viewMatrix);
+		terrainShader.clipPlane.load(clipPlane);
+		terrainRenderer.render(terrain);
+		terrainShader.stop();
+		terrain = null;
+	}
+
+	private float time(float time) {
+		if(time > INCREASE_LIMIT) {
+			time = INCREASE_LIMIT;
+			inc = false;
+		}
+		else if(time < 0) {
+			time = 0;
+			inc = true;
+		}
+		return time;
+	}
+
+	private void createProjectionMatrix() {
+		projectionMatrix = new Matrix4f();
+		float aspectRatio = (float) Display.getWidth() / (float) Display.getHeight();
+
+		float y_scale = 1f / (float) Math.tan(FOV / 2f);
+		float x_scale = y_scale / aspectRatio;
+		float frustum_length = FAR_PLANE - NEAR_PLANE;
+
+		projectionMatrix.m00 = x_scale;
+		projectionMatrix.m11 = y_scale;
+		projectionMatrix.m22 = -((FAR_PLANE + NEAR_PLANE) / frustum_length);
+		projectionMatrix.m23 = -1;
+		projectionMatrix.m32 = -((2 * NEAR_PLANE * FAR_PLANE) / frustum_length);
+		projectionMatrix.m33 = 0;
+	}
+
+	public void cleanUp() {
+		shader.cleanUp();
+		terrainShader.cleanUp();
+	}
+
+	public Matrix4f getProjectionMatrix() {
+		return projectionMatrix;
+	}
+
+	public void prepareAndProcess(World world) {
+		prepare();
+		for(Entity e : world.getEntities())
+			process(e);
+		process(world.getTerrain());
+	}
+
+	public void process(World world) {
+		for(Entity e : world.getEntities())
+			process(e);
+		process(world.getTerrain());
+	}
+}
diff --git a/saveData/renderEngine/renderers/Renderer.java b/saveData/renderEngine/renderers/Renderer.java
new file mode 100644
index 0000000..17281df
--- /dev/null
+++ b/saveData/renderEngine/renderers/Renderer.java
@@ -0,0 +1,40 @@
+package renderers;
+
+import java.util.List;
+import java.util.Map;
+
+import org.lwjgl.util.vector.Matrix4f;
+
+import components.CustomColorsComponent;
+import entities.Entity;
+import openglObjects.VAO;
+import shaders.StaticShader;
+import utils.Maths;
+
+public class Renderer {
+
+	private StaticShader shader;
+
+	public Renderer(StaticShader shader, Matrix4f projectionMatrix) {
+		this.shader = shader;
+		shader.start();
+		shader.projectionMatrix.load(projectionMatrix);
+		shader.stop();
+	}
+
+	public void render(Map<VAO, List<Entity>> entities) {
+		for (VAO vao : entities.keySet()) {
+			vao.bind();
+			for (Entity e : entities.get(vao)) {
+				shader.transformationMatrix.load(Maths.createTreansformationMatrix(e));
+				CustomColorsComponent customColors = e.getCustomColors();
+				if(customColors != null)
+					for(int i = 0; i < customColors.getColors().size(); i++) {
+						shader.customColors[i].load(customColors.getColors().get(i));
+					}
+				vao.batchRenderCall();
+			}
+			vao.unbind();
+		}
+	}
+}
diff --git a/saveData/renderEngine/renderers/TerrainRenderer.java b/saveData/renderEngine/renderers/TerrainRenderer.java
new file mode 100644
index 0000000..5507999
--- /dev/null
+++ b/saveData/renderEngine/renderers/TerrainRenderer.java
@@ -0,0 +1,29 @@
+package renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector3f;
+
+import openglObjects.VAO;
+import shaders.TerrainShader;
+import terrain.Terrain;
+import utils.Maths;
+
+public class TerrainRenderer {
+	private TerrainShader shader;
+
+	public TerrainRenderer(TerrainShader shader, Matrix4f projectionMatrix) {
+		this.shader = shader;
+		shader.start();
+		this.shader.projectionMatrix.load(projectionMatrix);
+		shader.stop();
+	}
+	
+	public void render(Terrain terrain) {
+		VAO vao = terrain.getModel();
+		vao.bind();
+		shader.transformationMatrix.load(Maths.createTransformationMatrix(new Vector3f(terrain.getX(), 0, terrain.getZ()), 0, 0, 0, 1));
+		GL11.glDrawElements(GL11.GL_TRIANGLES, vao.getVertexCount(), GL11.GL_UNSIGNED_INT, 0);
+		vao.unbind();
+	}
+}
diff --git a/saveData/renderEngine/renderers/WaterRenderer.java b/saveData/renderEngine/renderers/WaterRenderer.java
new file mode 100644
index 0000000..041773f
--- /dev/null
+++ b/saveData/renderEngine/renderers/WaterRenderer.java
@@ -0,0 +1,57 @@
+package renderers;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import camera.ICamera;
+import entities.Light;
+import openglObjects.VAO;
+import shaders.WaterShader;
+import utils.Maths;
+import water.WaterFBOs;
+import water.WaterTile;
+
+public class WaterRenderer {
+	private static final float WAVE_SPEED = 0.003f;
+
+	private WaterShader shader;
+	private float waveTime;
+
+	public WaterRenderer(WaterShader shader, Matrix4f projectionMatrix) {
+		this.shader = shader;
+		shader.start();
+		shader.projectionMatrix.load(projectionMatrix);
+		shader.connectTextureUnits();
+		shader.one.load(WaterTile.getTileSize() / (float) WaterTile.getVertexCount());
+		shader.nearFarPlanes.load(new Vector2f(MasterRenderer.NEAR_PLANE, MasterRenderer.FAR_PLANE));
+		shader.stop();
+	}
+
+	public void render(WaterTile water, ICamera camera, WaterFBOs fbos, Light sun) {
+		shader.start();
+
+		waveTime += WAVE_SPEED;
+		shader.waveTime.load(waveTime);
+
+		shader.skyColor.load(new Vector3f(MasterRenderer.RED, MasterRenderer.GREEN, MasterRenderer.BLUE));
+		shader.fogValues.load(MasterRenderer.FOG_VALUES);
+
+		shader.light.load(sun);
+
+		shader.viewMatrix.load(Maths.createViewMatrix(camera));
+		shader.cameraPosition.load(camera.getPosition());
+
+		fbos.getReflexion().getTex().bindToTextureUnit(0);
+		fbos.getRefraction().getTex().bindToTextureUnit(1);
+		fbos.getRefraction().getDepthTex().bindToTextureUnit(2);
+
+		VAO model = water.getModel();
+		model.bind();
+		GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, model.getVertexCount());
+		model.unbind();
+
+		shader.stop();
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/DepthFieldBlurShader.java b/saveData/renderEngine/shaders/DepthFieldBlurShader.java
new file mode 100644
index 0000000..8a5dd2a
--- /dev/null
+++ b/saveData/renderEngine/shaders/DepthFieldBlurShader.java
@@ -0,0 +1,23 @@
+package shaders;
+
+public class DepthFieldBlurShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/depthFieldBlur/vertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/depthFieldBlur/fragment.glsl";
+	
+	private UniformSampler2D colorTexture = locator.locateUniformSampler2D("colorTexture");
+	private UniformSampler2D depthTexture = locator.locateUniformSampler2D("depthTexture");
+	private UniformSampler2D bluredTexture = locator.locateUniformSampler2D("bluredTexture");
+	
+	public UniformVec2 nearFarPlanes = locator.locateUniformVec2("nearFarPlanes");
+
+	public DepthFieldBlurShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+	
+	public void connectTextureUnits() {
+		colorTexture.load(0);
+		depthTexture.load(1);
+		bluredTexture.load(2);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/GUIShader.java b/saveData/renderEngine/shaders/GUIShader.java
new file mode 100644
index 0000000..baeb7f3
--- /dev/null
+++ b/saveData/renderEngine/shaders/GUIShader.java
@@ -0,0 +1,14 @@
+package shaders;
+
+public class GUIShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/guis/guiVertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/guis/guiFragment.glsl";
+	
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+
+	public GUIShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+
+}
diff --git a/saveData/renderEngine/shaders/HBlurShader.java b/saveData/renderEngine/shaders/HBlurShader.java
new file mode 100644
index 0000000..4c89c60
--- /dev/null
+++ b/saveData/renderEngine/shaders/HBlurShader.java
@@ -0,0 +1,13 @@
+package shaders;
+
+public class HBlurShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/blur/vhshader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/blur/fshader.glsl";
+	
+	public UniformVec2 size = locator.locateUniformVec2("size");
+
+	public HBlurShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/MenuDNAShader.java b/saveData/renderEngine/shaders/MenuDNAShader.java
new file mode 100644
index 0000000..e6fa1b7
--- /dev/null
+++ b/saveData/renderEngine/shaders/MenuDNAShader.java
@@ -0,0 +1,14 @@
+package shaders;
+
+public class MenuDNAShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/menuDNA/vertexShader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/menuDNA/fragmentShader.glsl";
+
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+	
+	public MenuDNAShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/ShaderLib.java b/saveData/renderEngine/shaders/ShaderLib.java
new file mode 100644
index 0000000..7287402
--- /dev/null
+++ b/saveData/renderEngine/shaders/ShaderLib.java
@@ -0,0 +1,41 @@
+package shaders;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import res.Resource;
+import utils.GU;
+
+public class ShaderLib {
+	private static final Map<String, String> sources = new HashMap<>();	
+	
+	public static void loadAll() {
+		File shadersPackage = new File("resources/res/shaders");
+		for(File shaderPackage : shadersPackage.listFiles()) {
+			for(File shaderFile : shaderPackage.listFiles()) {
+				Resource resource = new Resource(shaderFile.getPath().replace("resources/", ""));
+				BufferedReader reader = GU.open(resource);
+				String line, source = "";
+				try {
+					while((line = reader.readLine()) != null) {
+						if (line.startsWith("#Struct_Lib.")) {
+							line = StructLib.get(line.replace("#Struct_Lib.", ""));
+						}
+						source += line + "\n";
+					}
+					reader.close();
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
+				sources.put(resource.getLocation(), source);
+			}
+		}
+	}
+	
+	public static String getSource(String shaderName) {
+		return sources.get(shaderName);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/ShaderProgram.java b/saveData/renderEngine/shaders/ShaderProgram.java
new file mode 100644
index 0000000..9c8985c
--- /dev/null
+++ b/saveData/renderEngine/shaders/ShaderProgram.java
@@ -0,0 +1,118 @@
+package shaders;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20;
+
+import openglObjects.IOpenGLObject;
+
+public abstract class ShaderProgram implements IOpenGLObject {
+	private final int programId;
+	private final int vertexShaderId;
+	private final int fragmentShaderId;
+	protected StringBuffer src;
+	protected UniformLocator locator = new UniformLocator(this);
+
+	public ShaderProgram(String VERTEX_SHADER, String FRAGMENT_SHADER) {
+		programId = GL20.glCreateProgram();
+		src = new StringBuffer();
+		vertexShaderId = createShader(VERTEX_SHADER, GL20.GL_VERTEX_SHADER);
+		fragmentShaderId = createShader(FRAGMENT_SHADER, GL20.GL_FRAGMENT_SHADER);
+		GL20.glAttachShader(programId, vertexShaderId);
+		GL20.glAttachShader(programId, fragmentShaderId);
+		preLink();
+		GL20.glLinkProgram(programId);
+		GL20.glValidateProgram(programId);
+		postLink();
+	}
+
+	protected void preLink() {
+	}
+
+	protected void postLink() {
+	}
+
+	protected int variableType(String name) {
+		String[] src = this.src.toString().split("\n");
+		String declarationLine = null;
+		for (String s : src) {
+			String[] lineParts = s.split(" ");
+			if (lineParts[lineParts.length - 1].equals(name + ";")) {
+				declarationLine = s;
+			}
+		}
+		if (declarationLine == null)
+			return -1;
+		String type = declarationLine.split(" ")[declarationLine.split(" ").length - 2];
+		switch (type) {
+		case "float":
+			return UniformVar.TYPE_FLOAT;
+		case "vec2":
+			return UniformVar.TYPE_VEC2;
+		case "vec3":
+			return UniformVar.TYPE_VEC3;
+		case "vec4":
+			return UniformVar.TYPE_VEC4;
+		case "mat4":
+			return UniformVar.TYPE_MAT4;
+		case "int":
+			return UniformVar.TYPE_INT;
+		case "bool":
+			return UniformVar.TYPE_BOOL;
+		case "sampler2D":
+			return UniformVar.TYPE_SAMPLER_2D;
+		case "Light":
+			return UniformVar.TYPE_LIGHT;
+		default:
+			return -1;
+		}
+	}
+
+	protected int getLocation(String name) {
+		return GL20.glGetUniformLocation(programId, name);
+	}
+
+	private int createShader(String shader, int shaderType) {
+		String source = "";
+		String shaderSource = ShaderLib.getSource(shader);
+		source += shaderSource;
+		src.append(shaderSource);
+		int shaderId = GL20.glCreateShader(shaderType);
+		GL20.glShaderSource(shaderId, source);
+		GL20.glCompileShader(shaderId);
+		if (GL20.glGetShaderi(shaderId, GL20.GL_COMPILE_STATUS) == GL11.GL_FALSE) {
+			System.err.println("Error compiling shader :" + shader + ", log:");
+			System.err.print(GL20.glGetShaderInfoLog(shaderId, 500));
+			System.exit(-1);
+		}
+		return shaderId;
+	}
+
+	public void start() {
+		GL20.glUseProgram(programId);
+	}
+
+	public void stop() {
+		GL20.glUseProgram(0);
+	}
+
+	public void cleanUp() {
+		stop();
+		GL20.glDetachShader(programId, vertexShaderId);
+		GL20.glDetachShader(programId, fragmentShaderId);
+		GL20.glDeleteShader(vertexShaderId);
+		GL20.glDeleteShader(fragmentShaderId);
+		GL20.glDeleteProgram(programId);
+	}
+	
+	public ShaderProgram create() {
+		return this;
+	}
+	
+	public void delete() {
+		cleanUp();
+	}
+	
+	public int getID() {
+		return programId;
+	}
+}
diff --git a/saveData/renderEngine/shaders/StaticShader.java b/saveData/renderEngine/shaders/StaticShader.java
new file mode 100644
index 0000000..2d845c3
--- /dev/null
+++ b/saveData/renderEngine/shaders/StaticShader.java
@@ -0,0 +1,30 @@
+package shaders;
+
+import shaders.uniformStructs.UniformFogValues;
+import shaders.uniformStructs.UniformLight;
+
+public class StaticShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/standard/vertexShader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/standard/fragmentShader.glsl";
+
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 viewMatrix = locator.locateUniformMat4("viewMatrix");
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+
+	public UniformLight light = new UniformLight("light", locator);
+
+	public UniformVec4 clipPlane = locator.locateUniformVec4("clipPlane");
+	public UniformVec3[] customColors = { locator.locateUniformVec3("customColors[0]", false),
+			locator.locateUniformVec3("customColors[1]", false), locator.locateUniformVec3("customColors[2]", false) };
+	
+	public UniformVec3 skyColor = locator.locateUniformVec3("skyColor");
+
+	public UniformFogValues fogValues = new UniformFogValues("fogValues", locator);
+	
+	public UniformFloat time = locator.locateUniformFloat("time");
+	
+	public StaticShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
diff --git a/saveData/renderEngine/shaders/StructLib.java b/saveData/renderEngine/shaders/StructLib.java
new file mode 100644
index 0000000..3a3e3db
--- /dev/null
+++ b/saveData/renderEngine/shaders/StructLib.java
@@ -0,0 +1,43 @@
+package shaders;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import res.Resource;
+import utils.GU;
+
+public class StructLib {
+	private static Map<String, String> structs = new HashMap<>();
+
+	public static void load(Resource resource) {
+		BufferedReader reader = GU.open(resource);
+		try {
+			String line;
+			String currentStructName = null, structBody = null;
+			while((line = reader.readLine()) != null) {
+				if(line.startsWith("}")) {
+					structBody += "};";
+					structs.put(currentStructName, structBody);
+				}
+				else if(line.startsWith("struct ")) {
+					currentStructName = line.split(" ")[1];
+					if(currentStructName.contains("{")) {
+						currentStructName = currentStructName.replace("{", "");
+					}
+					structBody = line + "\n";
+				}
+				else if(!line.equals(""))
+					structBody += line + "\n";
+			}
+			reader.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	static String get(String name) {
+		return structs.get(name);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/TerrainShader.java b/saveData/renderEngine/shaders/TerrainShader.java
new file mode 100644
index 0000000..d455b8b
--- /dev/null
+++ b/saveData/renderEngine/shaders/TerrainShader.java
@@ -0,0 +1,48 @@
+package shaders;
+
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL43;
+
+import shaders.uniformStructs.UniformFogValues;
+import shaders.uniformStructs.UniformLight;
+import terrain.Terrain;
+
+public class TerrainShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/terrain/terrainVertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/terrain/terrainFragment.glsl";
+	
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 transformationMatrix = locator.locateUniformMat4("transformationMatrix");
+	public UniformMat4 viewMatrix = locator.locateUniformMat4("viewMatrix");
+	
+	public UniformLight light = new UniformLight("light", locator);
+	
+	public UniformVec4 clipPlane = locator.locateUniformVec4("clipPlane");
+	
+	public UniformVec3 skyColor = locator.locateUniformVec3("skyColor");
+
+	public UniformFogValues fogValues = new UniformFogValues("fogValues", locator);
+	
+	private int colors_buffer;
+	
+	public TerrainShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+	
+	@Override
+	protected void postLink() {
+		colors_buffer = GL15.glGenBuffers();
+		GL15.glBindBuffer(GL43.GL_SHADER_STORAGE_BUFFER, colors_buffer);
+		GL15.glBufferData(GL43.GL_SHADER_STORAGE_BUFFER, Terrain.VERTEX_COUNT * Terrain.VERTEX_COUNT * 12, GL15.GL_STATIC_DRAW);
+		GL30.glBindBufferBase(GL43.GL_SHADER_STORAGE_BUFFER, 0, colors_buffer);
+		GL15.glBindBuffer(GL43.GL_SHADER_STORAGE_BUFFER, 0);
+	}
+	
+	@Override
+	public void cleanUp() {
+		super.cleanUp();
+		GL15.glDeleteBuffers(colors_buffer);
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformBool.java b/saveData/renderEngine/shaders/UniformBool.java
new file mode 100644
index 0000000..7fb825a
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformBool.java
@@ -0,0 +1,14 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformBool extends UniformVar {
+
+	public UniformBool(int location) {
+		super(location);
+	}
+	
+	public void load(boolean value) {
+		GL20.glUniform1i(location, (value ? 1 : 0));
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformFloat.java b/saveData/renderEngine/shaders/UniformFloat.java
new file mode 100644
index 0000000..3706999
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformFloat.java
@@ -0,0 +1,14 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformFloat extends UniformVar {
+
+	public UniformFloat(int location) {
+		super(location);
+	}
+	
+	public void load(float value) {
+		GL20.glUniform1f(location, value);
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformInt.java b/saveData/renderEngine/shaders/UniformInt.java
new file mode 100644
index 0000000..b673f3e
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformInt.java
@@ -0,0 +1,14 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformInt extends UniformVar {
+
+	public UniformInt(int location) {
+		super(location);
+	}
+	
+	public void load(int value) {
+		GL20.glUniform1i(location, value);
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformLocator.java b/saveData/renderEngine/shaders/UniformLocator.java
new file mode 100644
index 0000000..0dbde36
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformLocator.java
@@ -0,0 +1,73 @@
+package shaders;
+
+public final class UniformLocator {
+	private ShaderProgram program;
+
+	public UniformLocator(ShaderProgram program) {
+		this.program = program;
+	}
+	
+	public UniformFloat locateUniformFloat(String name) {
+		return (UniformFloat) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformVec2 locateUniformVec2(String name) {
+		return (UniformVec2) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformVec3 locateUniformVec3(String name) {
+		return (UniformVec3) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformVec4 locateUniformVec4(String name) {
+		return (UniformVec4) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformMat4 locateUniformMat4(String name) {
+		return (UniformMat4) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformInt locateUniformInt(String name) {
+		return (UniformInt) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformBool locateUniformBool(String name) {
+		return (UniformBool) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+
+	public UniformSampler2D locateUniformSampler2D(String name) {
+		return (UniformSampler2D) UniformVar.createVar(program.variableType(name), program.getLocation(name));
+	}
+	
+	public UniformFloat locateUniformFloat(String name, boolean typeCheck) {
+		return (UniformFloat) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_FLOAT), program.getLocation(name));
+	}
+	
+	public UniformVec2 locateUniformVec2(String name, boolean typeCheck) {
+		return (UniformVec2) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_VEC2), program.getLocation(name));
+	}
+	
+	public UniformVec3 locateUniformVec3(String name, boolean typeCheck) {
+		return (UniformVec3) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_VEC3), program.getLocation(name));
+	}
+	
+	public UniformVec4 locateUniformVec4(String name, boolean typeCheck) {
+		return (UniformVec4) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_VEC4), program.getLocation(name));
+	}
+	
+	public UniformMat4 locateUniformMat4(String name, boolean typeCheck) {
+		return (UniformMat4) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_MAT4), program.getLocation(name));
+	}
+	
+	public UniformInt locateUniformInt(String name, boolean typeCheck) {
+		return (UniformInt) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_INT), program.getLocation(name));
+	}
+	
+	public UniformBool locateUniformBool(String name, boolean typeCheck) {
+		return (UniformBool) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_BOOL), program.getLocation(name));
+	}
+
+	public UniformSampler2D locateUniformSampler2D(String name, boolean typeCheck) {
+		return (UniformSampler2D) UniformVar.createVar((typeCheck ? program.variableType(name) : UniformVar.TYPE_SAMPLER_2D), program.getLocation(name));
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformMat4.java b/saveData/renderEngine/shaders/UniformMat4.java
new file mode 100644
index 0000000..c15145b
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformMat4.java
@@ -0,0 +1,22 @@
+package shaders;
+
+import java.nio.FloatBuffer;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Matrix4f;
+
+public class UniformMat4 extends UniformVar {
+	
+	private static final FloatBuffer matrix = BufferUtils.createFloatBuffer(16);
+	
+	public UniformMat4(int location) {
+		super(location);
+	}
+	
+	public void load(Matrix4f value) {
+		value.store(matrix);
+		matrix.flip();
+		GL20.glUniformMatrix4(location, false, matrix);
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformSampler2D.java b/saveData/renderEngine/shaders/UniformSampler2D.java
new file mode 100644
index 0000000..ad3aa5b
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformSampler2D.java
@@ -0,0 +1,14 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+
+public class UniformSampler2D extends UniformVar {
+
+	public UniformSampler2D(int location) {
+		super(location);
+	}
+	
+	public void load(int value) {
+		GL20.glUniform1i(location, value);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/UniformVar.java b/saveData/renderEngine/shaders/UniformVar.java
new file mode 100644
index 0000000..c3281a4
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformVar.java
@@ -0,0 +1,40 @@
+package shaders;
+
+public abstract class UniformVar {
+	protected static final int TYPE_FLOAT = 1;
+	protected static final int TYPE_VEC2 = 2;
+	protected static final int TYPE_VEC3 = 3;
+	protected static final int TYPE_VEC4 = 4;
+	protected static final int TYPE_MAT4 = 5;
+	protected static final int TYPE_INT = 6;
+	protected static final int TYPE_BOOL = 7;
+	protected static final int TYPE_SAMPLER_2D = 8;
+	protected static final int TYPE_LIGHT = 9;
+
+	protected int location;
+
+	public UniformVar(int location) {
+		this.location = location;
+	}
+
+	public static UniformVar createVar(int type, int location) {
+		if (type == TYPE_FLOAT)
+			return new UniformFloat(location);
+		else if (type == TYPE_VEC2)
+			return new UniformVec2(location);
+		else if (type == TYPE_VEC3)
+			return new UniformVec3(location);
+		else if (type == TYPE_VEC4)
+			return new UniformVec4(location);
+		else if (type == TYPE_MAT4)
+			return new UniformMat4(location);
+		else if (type == TYPE_INT)
+			return new UniformInt(location);
+		else if (type == TYPE_BOOL)
+			return new UniformBool(location);
+		else if (type == TYPE_SAMPLER_2D)
+			return new UniformSampler2D(location);
+		else
+			return null;
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformVec2.java b/saveData/renderEngine/shaders/UniformVec2.java
new file mode 100644
index 0000000..951db56
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformVec2.java
@@ -0,0 +1,15 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Vector2f;
+
+public class UniformVec2 extends UniformVar {
+
+	public UniformVec2(int location) {
+		super(location);
+	}
+	
+	public void load(Vector2f value) {
+		GL20.glUniform2f(location, value.x, value.y);
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformVec3.java b/saveData/renderEngine/shaders/UniformVec3.java
new file mode 100644
index 0000000..5123135
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformVec3.java
@@ -0,0 +1,15 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Vector3f;
+
+public class UniformVec3 extends UniformVar {
+
+	public UniformVec3(int location) {
+		super(location);
+	}
+	
+	public void load(Vector3f value) {
+		GL20.glUniform3f(location, value.x, value.y, value.z);
+	}
+}
diff --git a/saveData/renderEngine/shaders/UniformVec4.java b/saveData/renderEngine/shaders/UniformVec4.java
new file mode 100644
index 0000000..d86706e
--- /dev/null
+++ b/saveData/renderEngine/shaders/UniformVec4.java
@@ -0,0 +1,15 @@
+package shaders;
+
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.util.vector.Vector4f;
+
+public class UniformVec4 extends UniformVar {
+
+	public UniformVec4(int location) {
+		super(location);
+	}
+	
+	public void load(Vector4f value) {
+		GL20.glUniform4f(location, value.x, value.y, value.z, value.w);
+	}
+}
diff --git a/saveData/renderEngine/shaders/VBlurShader.java b/saveData/renderEngine/shaders/VBlurShader.java
new file mode 100644
index 0000000..de7d992
--- /dev/null
+++ b/saveData/renderEngine/shaders/VBlurShader.java
@@ -0,0 +1,13 @@
+package shaders;
+
+public class VBlurShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/blur/vvshader.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/blur/fshader.glsl";
+
+	public UniformVec2 size = locator.locateUniformVec2("size");
+	
+	public VBlurShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/WaterShader.java b/saveData/renderEngine/shaders/WaterShader.java
new file mode 100644
index 0000000..2e4ba95
--- /dev/null
+++ b/saveData/renderEngine/shaders/WaterShader.java
@@ -0,0 +1,37 @@
+package shaders;
+
+import shaders.uniformStructs.UniformFogValues;
+import shaders.uniformStructs.UniformLight;
+
+public class WaterShader extends ShaderProgram {
+
+	private static final String VERTEX_SHADER = "res/shaders/water/vertex.glsl";
+	private static final String FRAGMENT_SHADER = "res/shaders/water/fragment.glsl";
+
+	public UniformMat4 projectionMatrix = locator.locateUniformMat4("projectionMatrix");
+	public UniformMat4 viewMatrix = locator.locateUniformMat4("viewMatrix");
+	public UniformFloat waveTime = locator.locateUniformFloat("waveTime");
+	public UniformFloat one = locator.locateUniformFloat("one");
+
+	private UniformSampler2D reflectionTexture = locator.locateUniformSampler2D("reflectionTexture");
+	private UniformSampler2D refractionTexture = locator.locateUniformSampler2D("refractionTexture");
+	private UniformSampler2D depthTexture = locator.locateUniformSampler2D("depthTexture");
+	
+	public UniformVec3 cameraPosition = locator.locateUniformVec3("cameraPos");
+	public UniformVec2 nearFarPlanes = locator.locateUniformVec2("nearFarPlanes");
+	public UniformVec3 skyColor = locator.locateUniformVec3("skyColor");
+
+	public UniformLight light = new UniformLight("light", locator);
+	
+	public UniformFogValues fogValues = new UniformFogValues("fogValues", locator);
+	
+	public WaterShader() {
+		super(VERTEX_SHADER, FRAGMENT_SHADER);
+	}
+
+	public void connectTextureUnits() {
+		reflectionTexture.load(0);
+		refractionTexture.load(1);
+		depthTexture.load(2);
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/uniformStructs/UniformFogValues.java b/saveData/renderEngine/shaders/uniformStructs/UniformFogValues.java
new file mode 100644
index 0000000..36880de
--- /dev/null
+++ b/saveData/renderEngine/shaders/uniformStructs/UniformFogValues.java
@@ -0,0 +1,27 @@
+package shaders.uniformStructs;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector2f;
+
+import shaders.UniformLocator;
+import shaders.UniformVar;
+
+public class UniformFogValues extends UniformStruct {
+
+	public UniformFogValues(String name, UniformLocator locator) {
+		super(name, getAttributes(name, locator));
+	}
+
+	private static List<UniformVar> getAttributes(String name, UniformLocator locator) {
+		List<UniformVar> attributes = new ArrayList<>();
+		attributes.add(locator.locateUniformFloat(name + ".density", false));
+		attributes.add(locator.locateUniformFloat(name + ".gradient", false));
+		return attributes;
+	}
+	
+	public void load(Vector2f values) {
+		super.load(new UniformValue(values.x), new UniformValue(values.y));
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/uniformStructs/UniformLight.java b/saveData/renderEngine/shaders/uniformStructs/UniformLight.java
new file mode 100644
index 0000000..a1d4260
--- /dev/null
+++ b/saveData/renderEngine/shaders/uniformStructs/UniformLight.java
@@ -0,0 +1,27 @@
+package shaders.uniformStructs;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import entities.Light;
+import shaders.UniformLocator;
+import shaders.UniformVar;
+
+public class UniformLight extends UniformStruct {
+
+	public UniformLight(String name, UniformLocator locator) {
+		super(name, getAttributes(name, locator));
+	}
+
+	public void load(Light light) {
+		super.load(new UniformValue(light.dir), new UniformValue(light.color), new UniformValue(light.bias));
+	}
+
+	private static List<UniformVar> getAttributes(String name, UniformLocator locator) {
+		List<UniformVar> attributes = new ArrayList<>();
+		attributes.add(locator.locateUniformVec3(name + ".direction", false));
+		attributes.add(locator.locateUniformVec3(name + ".color", false));
+		attributes.add(locator.locateUniformVec2(name + ".bias", false));
+		return attributes;
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/uniformStructs/UniformStruct.java b/saveData/renderEngine/shaders/uniformStructs/UniformStruct.java
new file mode 100644
index 0000000..dc80905
--- /dev/null
+++ b/saveData/renderEngine/shaders/uniformStructs/UniformStruct.java
@@ -0,0 +1,34 @@
+package shaders.uniformStructs;
+
+import java.util.List;
+
+import shaders.UniformVar;
+
+public abstract class UniformStruct {
+
+	private String name;
+	private List<UniformVar> attributes;
+
+	public UniformStruct(String name, List<UniformVar> attributes) {
+		this.name = name;
+		this.attributes = attributes;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	protected void load(List<UniformValue> values) {
+		int itn = Math.min(attributes.size(), values.size());
+		for (int i = 0; i < itn; i++) {
+			values.get(i).loadTo(attributes.get(i));
+		}
+	}
+
+	protected void load(UniformValue... values) {
+		int itn = Math.min(attributes.size(), values.length);
+		for (int i = 0; i < itn; i++) {
+			values[i].loadTo(attributes.get(i));
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/uniformStructs/UniformValue.java b/saveData/renderEngine/shaders/uniformStructs/UniformValue.java
new file mode 100644
index 0000000..127bf74
--- /dev/null
+++ b/saveData/renderEngine/shaders/uniformStructs/UniformValue.java
@@ -0,0 +1,101 @@
+package shaders.uniformStructs;
+
+import org.lwjgl.util.vector.Matrix4f;
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+import org.lwjgl.util.vector.Vector4f;
+
+import shaders.UniformBool;
+import shaders.UniformFloat;
+import shaders.UniformInt;
+import shaders.UniformMat4;
+import shaders.UniformSampler2D;
+import shaders.UniformVar;
+import shaders.UniformVec2;
+import shaders.UniformVec3;
+import shaders.UniformVec4;
+
+public class UniformValue {
+
+	protected static final int INT = 1;
+	protected static final int FLOAT = 2;
+	protected static final int BOOLEAN = 3;
+	protected static final int VEC2 = 4;
+	protected static final int VEC3 = 5;
+	protected static final int VEC4 = 6;
+	protected static final int MAT4 = 7;
+
+	protected int int_value;
+	protected float float_value;
+	protected boolean boolean_value;
+	protected Vector2f vec2_value;
+	protected Vector3f vec3_value;
+	protected Vector4f vec4_value;
+	protected Matrix4f mat4_value;
+
+	protected final int type;
+
+	public UniformValue(int value) {
+		this.int_value = value;
+		this.type = INT;
+	}
+
+	public UniformValue(float value) {
+		this.float_value = value;
+		this.type = FLOAT;
+	}
+
+	public UniformValue(boolean value) {
+		this.boolean_value = value;
+		this.type = BOOLEAN;
+	}
+
+	public UniformValue(Vector2f value) {
+		this.vec2_value = value;
+		this.type = VEC2;
+	}
+
+	public UniformValue(Vector3f value) {
+		this.vec3_value = value;
+		this.type = VEC3;
+	}
+
+	public UniformValue(Vector4f value) {
+		this.vec4_value = value;
+		this.type = VEC4;
+	}
+
+	public UniformValue(Matrix4f value) {
+		this.mat4_value = value;
+		this.type = MAT4;
+	}
+
+	public void loadTo(UniformVar var) {
+		switch (type) {
+		case INT:
+			if (var instanceof UniformInt)
+				((UniformInt) var).load(int_value);
+			if (var instanceof UniformSampler2D)
+				((UniformSampler2D) var).load(int_value);
+			break;
+		case FLOAT:
+			((UniformFloat) var).load(float_value);
+			break;
+		case BOOLEAN:
+			((UniformBool) var).load(boolean_value);
+			break;
+		case VEC2:
+			((UniformVec2) var).load(vec2_value);
+			break;
+		case VEC3:
+			((UniformVec3) var).load(vec3_value);
+			break;
+		case VEC4:
+			((UniformVec4) var).load(vec4_value);
+			break;
+		case MAT4:
+			((UniformMat4) var).load(mat4_value);
+			break;
+		}
+	}
+}
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/uniformStructs/package-info.java b/saveData/renderEngine/shaders/uniformStructs/package-info.java
new file mode 100644
index 0000000..f023ae1
--- /dev/null
+++ b/saveData/renderEngine/shaders/uniformStructs/package-info.java
@@ -0,0 +1,9 @@
+/**
+ * 
+ */
+/**
+ * This package is for dealing with uniform structures from the predefined structures in structlib.glsl
+ * @author Dinu B.
+ *
+ */
+package shaders.uniformStructs;
\ No newline at end of file
diff --git a/saveData/renderEngine/shaders/uniformStructs/structlib.glsl b/saveData/renderEngine/shaders/uniformStructs/structlib.glsl
new file mode 100644
index 0000000..55d1ce7
--- /dev/null
+++ b/saveData/renderEngine/shaders/uniformStructs/structlib.glsl
@@ -0,0 +1,10 @@
+struct Light {
+	vec3 direction;
+	vec3 color;
+	vec2 bias;
+}
+
+struct FogValues {
+	float density;
+	float gradient;
+}
diff --git a/saveData/save0.sav b/saveData/save0.sav
new file mode 100644
index 0000000..adef6da
--- /dev/null
+++ b/saveData/save0.sav
Binary files differ
diff --git a/src/module-info.java b/src/module-info.java
new file mode 100644
index 0000000..3af6831
--- /dev/null
+++ b/src/module-info.java
@@ -0,0 +1,61 @@
+/**
+ * The game module
+ * 
+ * @author Dinu B.
+ */
+module src {
+	// Dependencies
+	requires java.se;
+	requires transitive lwjgl;
+	requires transitive lwjgl.util;
+	
+	// src
+	exports ns.mainEngine;
+
+	// audioEngine
+	exports ns.openALObjects;
+	
+	// resources
+	exports obj;
+	exports res;
+	
+	//gameEngine
+//	exports ns.camera;
+//	exports ns.components;
+//	exports ns.configuration;
+//	exports ns.customFileFormat;
+//	exports ns.entities;
+//	exports ns.exceptions;
+//	exports ns.mainMenu;
+//	exports ns.parallelComputing;
+//	exports ns.terrain;
+//	exports ns.ui;
+//	exports ns.utils;
+//	exports ns.water;
+//	exports ns.world;
+//	exports ns.worldSave;
+	
+	// renderEngine
+	exports ns.display;
+	exports ns.openglObjects;
+	exports ns.openglWorkers;
+	exports ns.renderers;
+	exports ns.shaders;
+	exports ns.shaders.uniformStructs;
+
+	// Shaders
+	opens ns.shaders.uniformStructs;
+	opens res.shaders.standard;
+	opens res.shaders.terrain;
+	opens res.shaders.water;
+	opens res.shaders.depthFieldBlur;
+	opens res.shaders.blur;
+	opens res.shaders.guis;
+	opens res.shaders.menuDNA;
+
+	// Textures
+	opens res.textures.buttonTextures;
+
+	// Models
+	opens res.models.others;
+}
\ No newline at end of file
diff --git a/src/ns/mainEngine/GS.java b/src/ns/mainEngine/GS.java
new file mode 100644
index 0000000..7c7fc9e
--- /dev/null
+++ b/src/ns/mainEngine/GS.java
@@ -0,0 +1,9 @@
+package ns.mainEngine;
+
+/**
+ * The game state
+ * @author Dinu B.
+ */
+public enum GS {
+	GAME, MENU;
+}
\ No newline at end of file
diff --git a/src/ns/mainEngine/MainGameLoop.java b/src/ns/mainEngine/MainGameLoop.java
new file mode 100644
index 0000000..f4a4ad4
--- /dev/null
+++ b/src/ns/mainEngine/MainGameLoop.java
@@ -0,0 +1,163 @@
+package ns.mainEngine;
+
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.util.vector.Vector4f;
+
+import ns.camera.ICamera;
+import ns.display.DisplayManager;
+import ns.entities.Light;
+import ns.mainMenu.MainMenu;
+import ns.openglObjects.FBO;
+import ns.openglObjects.Texture;
+import ns.openglWorkers.DataPacking;
+import ns.parallelComputing.ThreadMaster;
+import ns.renderers.Blurer;
+import ns.renderers.GUIRenderer;
+import ns.renderers.MainMenuRenderer;
+import ns.renderers.MasterRenderer;
+import ns.renderers.WaterRenderer;
+import ns.shaders.GUIShader;
+import ns.shaders.WaterShader;
+import ns.water.WaterFBOs;
+import ns.water.WaterTile;
+import ns.world.World;
+import ns.world.WorldGenerator;
+
+/**
+ * @version 1.1.3
+ * @author Dinu B.
+ * @since 1.0
+ */
+public class MainGameLoop implements Runnable {
+	protected static boolean inLoop = true;
+	public static GS state = GS.MENU;
+
+	private WaterRenderer waterRenderer;
+	private WaterFBOs fbos;
+	private ICamera camera;
+	private Light sun;
+	private World world;
+	private WaterTile water;
+	private MasterRenderer renderer;
+	private WaterShader shader;
+	private FBO sceneFBO;
+	private FBO bluredSceneFBO;
+	private Blurer blurer;
+	
+	private MainMenu menu;
+	private MainMenuRenderer menuRenderer;
+
+	public void run() {
+		long btime = System.nanoTime();
+		DisplayManager.createDisplay();
+		renderer = new MasterRenderer();
+		shader = new WaterShader();
+		waterRenderer = new WaterRenderer(shader, renderer.getProjectionMatrix());
+		fbos = new WaterFBOs();
+		camera = ICamera.createdCamera;
+		sun = Light.sun;
+		while (WorldGenerator.generatedWorld == null)
+			java.lang.Thread.yield();
+		world = WorldGenerator.generatedWorld;
+		while (WaterTile.tile == null)
+			java.lang.Thread.yield();
+		water = WaterTile.tile;
+		executeRequests();
+		sceneFBO = new FBO(1200, 800, (FBO.COLOR_TEXTURE | FBO.DEPTH_RENDERBUFFER)).create();
+		bluredSceneFBO = new FBO(Display.getWidth() / 3, Display.getHeight() / 3, FBO.COLOR_TEXTURE).create();
+		blurer = new Blurer(MasterRenderer.standardModels.get(0));
+		GUIShader guiShader = new GUIShader();
+		GUIRenderer guiRenderer = new GUIRenderer(guiShader, MasterRenderer.standardModels.get(0));
+		menu = MenuMaster.createMainMenu();
+		menuRenderer = new MainMenuRenderer(guiRenderer);
+		executeRequests();
+		System.out.println("Primary thread finished in " + (System.nanoTime() - btime));
+		while (!Display.isCloseRequested()) {
+			runLogicAndRender();
+			DisplayManager.updateDisplay();
+		}
+		inLoop = false;
+		DataPacking.cleanUp();
+		renderer.cleanUp();
+		menuRenderer.cleanUp();
+		shader.cleanUp();
+		blurer.cleanUp();
+		sceneFBO.cleanUp();
+		bluredSceneFBO.cleanUp();
+		guiShader.cleanUp();
+		Texture.cleanUp();
+		DisplayManager.closeDisplay();
+	}
+
+	private void runLogicAndRender() {
+		logic();
+		render();
+	}
+
+	public void logic() {
+		if (state == GS.GAME) {
+			camera.update(world);
+			world.update();
+		} else if (state == GS.MENU) {
+			menu.update();
+		}
+	}
+
+	public void render() {
+		if (state == GS.GAME) {
+			GL11.glEnable(GL30.GL_CLIP_DISTANCE0);
+			fbos.bindReflexion();
+			float distance = 2 * camera.getPosition().y;
+			camera.getPosition().y -= distance;
+			camera.invertPitch();
+			renderer.renderScene(world, camera, sun, new Vector4f(0, 1, 0, 0f), true);
+			fbos.bindRefraction();
+			camera.getPosition().y += distance;
+			camera.invertPitch();
+			renderer.renderScene(world, camera, sun, new Vector4f(0, -1, 0, 2.0f), false);
+			GL11.glDisable(GL30.GL_CLIP_DISTANCE0);
+			FBO.unbind();
+			MasterRenderer.prepare();
+			renderer.renderScene(world, camera, sun, new Vector4f(0, 0, 0, 0), false);
+			waterRenderer.render(water, camera, fbos, sun);
+		} else if (state == GS.MENU) {
+			GL11.glEnable(GL30.GL_CLIP_DISTANCE0);
+			fbos.bindReflexion();
+			float distance = 2 * camera.getPosition().y;
+			camera.getPosition().y -= distance;
+			camera.invertPitch();
+			renderer.renderScene(world, camera, sun, new Vector4f(0, 1, 0, 0f), true);
+			fbos.bindRefraction();
+			camera.getPosition().y += distance;
+			camera.invertPitch();
+			renderer.renderScene(world, camera, sun, new Vector4f(0, -1, 0, 2.0f), false);
+			GL11.glDisable(GL30.GL_CLIP_DISTANCE0);
+			sceneFBO.bind();
+			renderer.renderScene(world, camera, sun, new Vector4f(0, 0, 0, 0), false);
+			waterRenderer.render(water, camera, fbos, sun);
+			FBO.unbind();
+			MasterRenderer.prepare();
+			blurer.apply(sceneFBO, bluredSceneFBO);
+			bluredSceneFBO.blitToScreen();
+			menuRenderer.render(menu);
+		}
+	}
+
+	public void executeRequests() {
+		ns.parallelComputing.Thread thread = (ns.parallelComputing.Thread) java.lang.Thread.currentThread();
+		for (int i = 0; i < thread.vaoCreateRequests.size(); i++)
+			thread.vaoCreateRequests.get(i).execute();
+		for (int i = 0; i < thread.toCarryOutRequests.size(); i++)
+			thread.toCarryOutRequests.get(i).execute();
+		thread.clearRequests();
+	}
+
+	public static void main(String[] args) {
+		ns.parallelComputing.Thread thread = ThreadMaster.createThread(new MainGameLoop(), "main thread");
+		thread.start();
+		thread = ThreadMaster.createThread(new SecondaryThread(), "secondary thread");
+		thread.start();
+	}
+}
\ No newline at end of file
diff --git a/src/ns/mainEngine/MenuMaster.java b/src/ns/mainEngine/MenuMaster.java
new file mode 100644
index 0000000..53b0980
--- /dev/null
+++ b/src/ns/mainEngine/MenuMaster.java
@@ -0,0 +1,32 @@
+package ns.mainEngine;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.components.Blueprint;
+import ns.components.BlueprintCreator;
+import ns.customFileFormat.TexFile;
+import ns.entities.Entity;
+import ns.mainMenu.MainMenu;
+import ns.mainMenu.MainMenuButton;
+import ns.ui.Action;
+
+public class MenuMaster {
+	public static MainMenu menu;
+
+	public static MainMenu createMainMenu() {
+		List<MainMenuButton> buttons = new ArrayList<>();
+		buttons.add(new MainMenuButton(new Vector2f(0f, 0.5f), new Vector2f(0.1f, 0.05f), new Action() {
+			@Override
+			public void execute() {
+				MainGameLoop.state = GS.GAME;
+			}
+		}, new TexFile("res/textures/buttonTextures/mainMenu_Start.tex").load()));
+		Blueprint dnaBlueprint = BlueprintCreator.createBlueprintFor("menuDNA");
+		menu = new MainMenu(buttons, new Entity(dnaBlueprint, new Vector3f(1f, -5f, -8.1f)));
+		return menu;
+	}
+}
\ No newline at end of file
diff --git a/src/ns/mainEngine/SecondaryThread.java b/src/ns/mainEngine/SecondaryThread.java
new file mode 100644
index 0000000..e63a16d
--- /dev/null
+++ b/src/ns/mainEngine/SecondaryThread.java
@@ -0,0 +1,40 @@
+package ns.mainEngine;
+
+import org.lwjgl.util.vector.Vector2f;
+import org.lwjgl.util.vector.Vector3f;
+
+import ns.camera.Camera;
+import ns.entities.Light;
+import ns.openglWorkers.ModelsLibrary;
+import ns.renderers.MasterRenderer;
+import ns.shaders.ShaderLib;
+import ns.shaders.StructLib;
+import ns.water.WaterTile;
+import ns.world.World;
+import ns.world.WorldGenerator;
+import ns.worldSave.SaveWorldMaster;
+import res.Resource;
+import res.WritingResource;
+
+public class SecondaryThread implements Runnable {
+	@Override
+	public void run() {
+		long timeb = System.nanoTime();
+		MasterRenderer.initStandardModels();
+		StructLib.load(new Resource("ns/shaders/uniformStructs/structlib.glsl"));
+		ShaderLib.loadAll();
+		new Camera();
+		new Light(new Vector3f(0.5f, -0.5f, 0), new Vector3f(1, 1, 1), new Vector2f(0.5f, 0.5f));
+		World w = WorldGenerator.generateWorld();
+		new WaterTile(0, 0);
+		// Read model files and create CVAOR
+		ModelsLibrary.getModel("res/models/others/menu_DNA.obj");
+		Runtime.getRuntime().gc();
+		System.out.println("Secondary thread finished in " + (System.nanoTime() - timeb));
+		
+		while(MainGameLoop.inLoop)
+			Thread.yield();
+
+		SaveWorldMaster.save(w, new WritingResource("saveData/save0.sav"));		
+	}
+}
\ No newline at end of file
diff --git a/updater/online/Main.java b/updater/online/Main.java
new file mode 100644
index 0000000..d6cab4f
--- /dev/null
+++ b/updater/online/Main.java
@@ -0,0 +1,51 @@
+package online;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+import java.net.Socket;
+import java.net.UnknownHostException;
+
+public class Main {
+
+	public static void main(String[] args) throws UnknownHostException, IOException {
+		Socket socket = new Socket("192.168.1.13", 2500);
+		PrintWriter writer = new PrintWriter(socket.getOutputStream());
+		BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
+		BufferedReader vreader = new BufferedReader(new FileReader("version"));
+		writer.println("version:" + vreader.readLine());
+		vreader.close();
+		String path = System.getProperty("user.dir") + "/";
+
+		String line = reader.readLine();
+		if (line.compareTo("NO_UPDATES") == 0) {
+			System.out.println("Nothing new to update");
+			writer.close();
+			reader.close();
+			socket.close();
+		} else {
+			exec(line, path);
+			while((line = reader.readLine()).compareTo("FINISHED") != 0) {
+				exec(line, path);
+			}
+		}
+	}
+
+	private static void exec(String line, String path) throws IOException {
+		if(line.startsWith("createfolder "))
+			(new File(path + line.split(" ")[1])).mkdirs();
+		else if(line.startsWith("createfile ")) {
+			(new File(path + line.split(" ")[1])).createNewFile();
+		}
+		else if(line.startsWith("writetofile ")) {
+			BufferedWriter writer = new BufferedWriter(new FileWriter(new File(line.split(" ")[1])));
+			writer.write(line.split(" ")[2].replaceAll("%20", " ").replaceAll("//\\nln", "\n"));
+			writer.close();
+		}
+	}
+}
\ No newline at end of file
diff --git a/updater/updateFile/Main.java b/updater/updateFile/Main.java
new file mode 100644
index 0000000..f2a8de2
--- /dev/null
+++ b/updater/updateFile/Main.java
@@ -0,0 +1,141 @@
+package updateFile;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import updateFile.functions.Function;
+
+public class Main {
+	/**
+	 * To update the program, run this. Type into the console the name / the
+	 * relative path within the project folder of the update file(".update" is added by
+	 * the program, so do NOT type it in the console)
+	 * 
+	 * @param args
+	 *            NOT needed in the application
+	 * @throws IOException
+	 *             If any IOException occurs
+	 */
+	public static void main(String[] args) throws IOException {
+		byte[] file = new byte[200];
+		int len = System.in.read(file);
+		String fl = "";
+		for (int i = 0; i < len - 1; i++) {
+			fl += (char) file[i];
+		}
+		String path = System.getProperty("user.dir") + "/";
+		BufferedReader reader = new BufferedReader(new FileReader(new File(path + fl + ".update")));
+		String line;
+		List<String> lines = new ArrayList<>();
+		while ((line = reader.readLine()).compareTo("FINISHED") != 0) {
+			lines.add(line);
+		}
+		for (int i = 0; i < lines.size(); i++) {
+			line = lines.get(i);
+			if (line.startsWith("cd")) {
+				if (line.equals("cd..")) {
+					String[] pcs = path.split("/");
+					path = path.replace(pcs[pcs.length - 1] + "/", "");
+				} else
+					path += line.split(" ")[1] + "/";
+			} else
+				i = exec(line, path, lines, i);
+		}
+		reader.close();
+	}
+
+	private static int exec(String line, String path, List<String> lines, int iterationIndex) throws IOException {
+		if (line.startsWith("if(")) {
+			String condition = line.substring(3, line.lastIndexOf((int) ')'));
+			String actions = "", elss = "";
+			boolean writeToElse = false;
+			int end;
+			for (int i = iterationIndex + 1;; i++) {
+				String ln = lines.get(i);
+				if (ln.contains("then: "))
+					ln = ln.replace("then: ", "");
+				if (ln.contains("else: ")) {
+					writeToElse = true;
+					ln = ln.replace("else: ", "");
+				}
+				if (ln.startsWith("endif")) {
+					end = i;
+					break;
+				}
+				if (writeToElse)
+					elss += ln + "\n";
+				else
+					actions += ln + "\n";
+			}
+			if (condition.startsWith("$f:\"") && condition.endsWith("\".exists()") && condition.contains("/*.")) {
+				String fileName = condition.replace("$f:\"", "").replace("/*\".exists()", "");
+				File dir = new File(fileName);
+				boolean foundOneFile = false;
+				for (File f : dir.listFiles())
+					if (f.getName().endsWith(
+							condition.substring(condition.indexOf("."), condition.lastIndexOf((int) '.') - 2)))
+						foundOneFile = true;
+				if (foundOneFile) {
+					String[] aclines = actions.split("\n");
+					for (int i = 0; i < aclines.length; i++)
+						exec(aclines[i], path, lines, iterationIndex + i);
+					return end + 1;
+				} else {
+					String[] aclines = elss.split("\n");
+					for (int i = 0; i < aclines.length; i++)
+						exec(aclines[i], path, lines, iterationIndex + i);
+					return end + 1;
+				}
+			} else if (condition.startsWith("$f:\"") && condition.endsWith("/*\".exists()")) {
+				String fileName = condition.replace("$f:\"", "").replace("/*\".exists()", "");
+				File dir = new File(fileName);
+				boolean foundOneFile = dir.listFiles().length > 0;
+				if (foundOneFile) {
+					String[] aclines = actions.split("\n");
+					for (int i = 0; i < aclines.length; i++)
+						exec(aclines[i], path, lines, iterationIndex + i);
+					return end + 1;
+				} else {
+					String[] aclines = elss.split("\n");
+					for (int i = 0; i < aclines.length; i++)
+						exec(aclines[i], path, lines, iterationIndex + i);
+					return end + 1;
+				}
+			} else if (condition.startsWith("$f:\"") && condition.endsWith("\".exists()")) {
+				String fileName = condition.replace("$f:\"", "").replace("\".exists()", "");
+				if (new File(path + fileName).exists()) {
+					String[] aclines = actions.split("\n");
+					for (int i = 0; i < aclines.length; i++)
+						exec(aclines[i], path, lines, iterationIndex + i);
+					return end + 1;
+				} else {
+					String[] aclines = elss.split("\n");
+					for (int i = 0; i < aclines.length; i++)
+						exec(aclines[i], path, lines, iterationIndex + i);
+					return end + 1;
+				}
+			} else {
+				System.err.println(
+						"Could not understand condition:" + condition + " at line " + iterationIndex + ". Exit");
+				System.exit(-1);
+			}
+		} else if (line.startsWith("new ")) {
+			String[] pcs = line.split(" ");
+			Function.CREATE_NEW.callWithArgs(path, line.replace(pcs[0] + " ", ""));
+		} else if (line.startsWith("echo ")) {
+			String[] pcs = line.split(" ");
+			Function.ECHO.callWithArgs(path, line.replace(pcs[0] + " ", ""));
+		} else if (line.startsWith("del ")) {
+			String[] pcs = line.split(" ");
+			Function.DELETE.callWithArgs(path, line.replace(pcs[0] + " ", ""));
+		} else if (line.startsWith("write_new")) {
+			String[] pcs = line.split(" ");
+			Function.WRITE_NEW.callWithArgs(path, line.replace(pcs[0] + " ", ""));
+		}
+		return iterationIndex;
+	}
+}
\ No newline at end of file
diff --git a/updater/updateFile/functions/Function.java b/updater/updateFile/functions/Function.java
new file mode 100644
index 0000000..239c0ae
--- /dev/null
+++ b/updater/updateFile/functions/Function.java
@@ -0,0 +1,150 @@
+package updateFile.functions;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+public enum Function {
+	/**
+	 * Deletes a file/directory specified by the first argument
+	 * 
+	 * @param 1
+	 *            The file name / relative path at the current path variable
+	 */
+	DELETE("del", true),
+	/**
+	 * Creates a new file/directory specified in the current directory/in relative
+	 * path to current directory by the second argument
+	 * 
+	 * @param 1
+	 *            The type (--type=folder for folder and --type=file for file)
+	 * @param 2
+	 *            The name/The relative path of the folder/file
+	 */
+	CREATE_NEW("new", true),
+	/**
+	 * Writes to a file, if the file does not exist, then it creates one
+	 * 
+	 * @param 1
+	 *            The name/The relative path to the current directory of the file
+	 * @param 2
+	 *            The content of the file. To get this to work, @see Function.ECHO
+	 *            --target=file
+	 */
+	WRITE_NEW("write_new", true),
+	/**
+	 * Writes to a file/console
+	 * 
+	 * @param 1
+	 *            The target of the output(--target=console for console and
+	 *            --target=file for file)
+	 * @param 2
+	 *            Depends on the first parameter, if it is --target=console, then it
+	 *            prints every character after the space of the echo word, else if
+	 *            it is --target=file, then the parameter must be the file name/
+	 *            relative path to current directory
+	 * @param 3
+	 *            For --target=file, this is the content that is going to be written
+	 *            to the file, but the content should have replaced all ' ' with
+	 *            "%0" and '\n' with "%1"
+	 */
+	ECHO("echo", true);
+
+	private String updateFunctionName;
+	private String source;
+
+	/**
+	 * 
+	 * @param updateFunctionName
+	 *            The name of the function. If it is not a core .update function,
+	 *            then it is searched for in updater/updateFile/functions and loads
+	 *            the source from there
+	 * @param definedInCallWithArgs
+	 *            A boolean indicating if it is a core .update function or a
+	 *            user-defined one
+	 */
+
+	private Function(String updateFunctionName, boolean definedInCallWithArgs) {
+		this.updateFunctionName = updateFunctionName;
+		if (!definedInCallWithArgs) {
+			BufferedReader reader = new BufferedReader(new InputStreamReader(ClassLoader
+					.getSystemResourceAsStream("updateFile/functions/" + updateFunctionName + ".updateFunction")));
+			String line;
+			try {
+				while ((line = reader.readLine()) != null)
+					source += line + "\n";
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+	
+	
+	/**
+	 * 
+	 * @param path The current path
+	 * @param args The command arguments separated by ' '
+	 * @throws IOException If any IOException occurs
+	 * @throws NullPointerException If path / args is null
+	 */
+	public void callWithArgs(String path, String args) throws IOException, NullPointerException {
+		if(path == null || args == null)
+			throw new NullPointerException();
+		switch (updateFunctionName) {
+		case "del":
+			if (args.endsWith("/*")) {
+				String dir = args.substring(0, args.length() - 2);
+				File directory = new File(path + dir);
+				for (File f : directory.listFiles())
+					f.delete();
+			} else if (args.contains("/*.")) {
+				String dir = args.substring(0, args.length() - 3);
+				File directory = new File(path + dir);
+				String format = args.split("/*.")[1];
+				for (File f : directory.listFiles())
+					if (f.getName().endsWith("." + format))
+						f.delete();
+			} else
+				(new File(path + args)).delete();
+			break;
+		case "echo":
+			String[] pcs = args.split(" ");
+			if (pcs[0].compareTo("--target=file") == 0) {
+				BufferedWriter writer = new BufferedWriter(new FileWriter(new File(path + pcs[1])));
+				writer.write(pcs[2].replaceAll("%0", " ").replaceAll("%1", "\n"));
+				writer.close();
+			} else if (pcs[0].compareTo("--target=console") == 0)
+				System.out.println(args.replace(pcs[0] + " ", ""));
+			break;
+		case "write_new":
+			pcs = args.split(" ");
+			File f = new File(path + pcs[0]);
+			if (!f.exists()) {
+				f.getParentFile().mkdirs();
+				f.createNewFile();
+			}
+			BufferedWriter writer = new BufferedWriter(new FileWriter(f));
+			writer.write(pcs[1].replaceAll("%0", " ").replaceAll("%1", "\n"));
+			writer.close();
+			break;
+		case "new":
+			pcs = args.split(" ");
+			if (pcs[0].compareTo("--type=folder") == 0)
+				(new File(path + pcs[1])).mkdir();
+			else if (pcs[0].compareTo("--type=file") == 0)
+				(new File(path + pcs[1])).createNewFile();
+			break;
+		}
+	}
+
+	public String getSource() {
+		return source;
+	}
+
+	public String getUpdateFunctionName() {
+		return updateFunctionName;
+	}
+}
\ No newline at end of file
diff --git a/updater/updateFile/package-info.java b/updater/updateFile/package-info.java
new file mode 100644
index 0000000..3ea0d88
--- /dev/null
+++ b/updater/updateFile/package-info.java
@@ -0,0 +1,12 @@
+/**
+ * This package is meant for updating the game from a .update file that you
+ * received, and put it somewhere in the project. For updating, please execute
+ * {@link Main#main(String[])}, and type into the console the name / the
+ * relative path within the project folder of the update file(".update" is added by
+ * the program, so do NOT type it in the console)
+ * 
+ * @author Dinu B.
+ * 
+ * @see Main#main(String[])
+ */
+package updateFile;
\ No newline at end of file
diff --git a/utils/ns/converting/PngToTexConvertor.java b/utils/ns/converting/PngToTexConvertor.java
new file mode 100644
index 0000000..a4e1d64
--- /dev/null
+++ b/utils/ns/converting/PngToTexConvertor.java
@@ -0,0 +1,37 @@
+package ns.converting;
+
+import java.awt.image.BufferedImage;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+
+import javax.imageio.ImageIO;
+
+import res.Resource;
+
+public class PngToTexConvertor {
+	public static void main(String[] args) throws IOException {
+		byte[] buf = new byte[50];
+		int len = System.in.read(buf);
+		String location = "";
+		for (int i = 0; i < len - 1; i++)
+			location += (char) buf[i];
+		File target = new File("resources/" + location.replace(".png", ".tex"));
+		System.out.println("resources/" + location.replace(".png", ".tex"));
+		target.createNewFile();
+		BufferedWriter writer = new BufferedWriter(
+				new FileWriter(target));
+		BufferedImage img = ImageIO.read(new Resource(location).asInputStream());
+		int width = img.getWidth();
+		int height = img.getHeight();
+		writer.write(width + " " + height + "\n");
+		for(int y = height - 1; y >= 0; y--) {
+			for(int x = 0; x < width; x++) {
+				writer.write((x == 0 ? "" : " ") + img.getRGB(x, y));
+			}
+			writer.write((int) '\n');
+		}
+		writer.close();
+	}
+}
\ No newline at end of file
diff --git a/utils/ns/converting/WavToAudConvertor.java b/utils/ns/converting/WavToAudConvertor.java
new file mode 100644
index 0000000..5cfbab1
--- /dev/null
+++ b/utils/ns/converting/WavToAudConvertor.java
@@ -0,0 +1,35 @@
+package ns.converting;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.lwjgl.util.WaveData;
+
+import res.Resource;
+
+public class WavToAudConvertor {
+
+	public static void main(String[] args) throws IOException {
+		byte[] buf = new byte[50];
+		int len = System.in.read(buf);
+		String location = "";
+		for (int i = 0; i < len - 1; i++)
+			location += (char) buf[i];
+		File target = new File("resources/" + location.replace(".wav", ".aud"));
+		System.out.println("resources/" + location.replace(".wav", ".aud"));
+		target.createNewFile();
+		BufferedWriter writer = new BufferedWriter(new FileWriter(target));
+		WaveData data = WaveData.create(new Resource(location).asInputStream());
+		int format = data.format;
+		ByteBuffer bufferData = data.data;
+		int samplerate = data.samplerate;
+		writer.write(format + " " + bufferData.limit() + " " + samplerate + '\n');
+		while(bufferData.hasRemaining()) {
+			writer.write(bufferData.get() + (bufferData.position() == bufferData.capacity() ? "" : " "));
+		}
+		writer.close();
+	}
+}
\ No newline at end of file
diff --git a/utils/ns/counter/WriteCounter.java b/utils/ns/counter/WriteCounter.java
new file mode 100644
index 0000000..cba33cb
--- /dev/null
+++ b/utils/ns/counter/WriteCounter.java
@@ -0,0 +1,71 @@
+package ns.counter;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class WriteCounter {
+	private static int counter;
+	private static int lineCounter;
+
+	public static void main(String[] args) {
+		int totalCounter = 0, totalLineCounter = 0;
+		File sourceFolder = new File("src");
+		count(sourceFolder);
+		System.out.println("src = " + counter + "(" + lineCounter + " lines)");
+		totalCounter += counter;
+		totalLineCounter += lineCounter;
+		counter = 0;
+		lineCounter = 0;
+		sourceFolder = new File("updater");
+		count(sourceFolder);
+		System.out.println("updater = " + counter + "(" + lineCounter + " lines)");
+		totalCounter += counter;
+		totalLineCounter += lineCounter;
+		counter = 0;
+		lineCounter = 0;
+		sourceFolder = new File("gameEngine");
+		count(sourceFolder);
+		System.out.println("gameEngine = " + counter + "(" + lineCounter + " lines)");
+		totalCounter += counter;
+		totalLineCounter += lineCounter;
+		counter = 0;
+		lineCounter = 0;
+		sourceFolder = new File("renderEngine");
+		count(sourceFolder);
+		System.out.println("renderEngine = " + counter + "(" + lineCounter + " lines)");
+		totalCounter += counter;
+		totalLineCounter += lineCounter;
+		counter = 0;
+		lineCounter = 0;
+		sourceFolder = new File("resources/res/shaders");
+		count(sourceFolder);
+		System.out.println("shaders = " + counter + "(" + lineCounter + " lines)");
+		totalCounter += counter;
+		totalLineCounter += lineCounter;
+		counter = 0;
+		lineCounter = 0;
+		System.out.println("total = " + totalCounter + "(" + totalLineCounter + " lines)");
+	}
+
+	private static void count(File file) {
+		if (file.isDirectory())
+			for (File f : file.listFiles()) {
+				count(f);
+			}
+		else {
+			try {
+				BufferedReader reader = new BufferedReader(new FileReader(file));
+				String line;
+				while ((line = reader.readLine()) != null) {
+					counter += (line.length() + 1);
+					lineCounter++;
+				}
+				reader.close();
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+}
\ No newline at end of file
